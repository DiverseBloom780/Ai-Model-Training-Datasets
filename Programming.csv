"Language","Code","Description"
"Python","print(""Hello, World!"")","Hello World example"
"Python","def greet(name): print(f""Hello, {name}"")","Function example"
"Python","my_list = [1, 2, 3]","List example"
"Python","my_dict = {""name"": ""John"", ""age"": 30}","Dictionary example"
"Python","try: ... except Exception as e: ...","Error handling"
"Python","with open(""file.txt"", ""r"") as f: ...","File input/output"
"Language","Code","Description"
"Autohotkey","^!z:: MsgBox, Hello, World!","Hotkey example"
"Autohotkey","Send, Hello, World!","Send keys example"
"Autohotkey","FileRead, contents, example.txt","File input example"
"Autohotkey","FileAppend, Hello, World!, example.txt","File output example"
"Autohotkey","Loop, 5 { MsgBox, Loop iteration %A_Index% }","Loop example"
"Autohotkey","IfWinExist, Untitled - Notepad { WinActivate }","Window manipulation example"
"Autohotkey","InputBox, UserInput, User Input, Please enter your name.","Input box example"
"Autohotkey","^!z:: MsgBox, Hello, World!","Hotkey example"
"Language","Code","Description"
"HTML","<h1>Hello, World!</h1>","Heading example"
"HTML","<p>This is a paragraph.</p>","Paragraph example"
"HTML","<a href=""https://www.example.com"">Link</a>","Hyperlink example"
"HTML","<img src=""image.jpg"" alt=""Image"">","Image example"
"HTML","<ul><li>Item 1</li><li>Item 2</li></ul>","Unordered list example"
"HTML","<table><tr><td>Cell 1</td><td>Cell 2</td></tr></table>","Table example"
"HTML","<form><input type=""text"" name=""username""><input type=""submit""></form>","Form example"
"HTML","<h1>Hello, World!</h1>","Basic HTML structure"
"Language","Code","Description"
"Java","public class HelloWorld { public static void main(String[] args) { System.out.println(""Hello, World!""); } }","Hello World example"
"Java","public class Person { private String name; public Person(String name) { this.name = name; } public String getName() { return name; } }","Class example"
"Java","int[] myArray = {1, 2, 3};","Array example"
"Java","ArrayList<String> myList = new ArrayList<>(); myList.add(""Apple""); myList.add(""Banana"");","List example"
"Java","try { ... } catch (Exception e) { System.out.println(""Error: "" + e.getMessage()); }","Error handling"
"Java","File file = new File(""example.txt""); Scanner scanner = new Scanner(file);","File input"
"Java","FileWriter writer = new FileWriter(""example.txt""); writer.write(""Hello, World!""); writer.close();","File output"
"Java","public static void greet(String name) { System.out.println(""Hello, "" + name + ""!""); }","Method example"
"Java","public static int add(int x, int y) { return x + y; }","Method example with return value"
"Java","System.out.println(""Hello, World!"");","Hello World example"
"Java","public class HelloWorld { public static void main(String[] args) { System.out.println(""Hello, World!""); } }","Hello World example"
"Java","public class Person { private String name; public Person(String name) { this.name = name; } }","Class example"
"Java","int[] myArray = {1, 2, 3};","Array example"
"Java","try { ... } catch (Exception e) { ... }","Error handling"
"Java","File file = new File(""example.txt"");","File input/output"
"Language","Code","Description"
"JavaScript","console.log(""Hello, World!"");","Hello World example"
"JavaScript","function greet(name) { console.log(`Hello, ${name}!`); }","Function example"
"JavaScript","let myArray = [1, 2, 3];","Array example"
"JavaScript","try { ... } catch (error) { ... }","Error handling"
"JavaScript","const fs = require(""fs""); fs.readFile(""example.txt"", (err, data) => { ... });","File input/output"
"Language","Code","Description"
"C#","Console.WriteLine(""Hello, World!"");","Hello World example"
"C#","using System; class HelloWorld { static void Main(string[] args) { Console.WriteLine(""Hello, World!""); } }","Hello World example"
"C#","public class Person { private string name; public Person(string name) { this.name = name; } }","Class example"
"C#","int[] myArray = {1, 2, 3};","Array example"
"C#","try { ... } catch (Exception ex) { ... }","Error handling"
"C#","using (StreamWriter writer = new StreamWriter(""example.txt"")) { ... }","File input/output"
"Language","Code","Description"
"C++","#include <iostream> int main() { std::cout << ""Hello, World!"" << std::endl; return 0; }","Hello World example"
"C++","class Person { private: string name; public: Person(string name) { this->name = name; } };","Class example"
"C++","int myArray[3] = {1, 2, 3};","Array example"
"C++","try { ... } catch (const std::exception& e) { ... }","Error handling"
"C++","std::ofstream file(""example.txt"");","File input/output"
"Language","Code","Description"
"Linux","ls -l","List files in long format"
"Linux","cd ~","Change to home directory"
"Linux","mkdir mydir","Create a new directory"
"Linux","rm -rf mydir","Remove a directory recursively"
"Linux","echo ""Hello, World!"" > hello.txt","Create a file with text"
"Linux","cat hello.txt","Display file contents"
"Linux","grep ""keyword"" file.txt","Search for a keyword in a file"
"Language","Code","Description"
"Kotlin","fun main() { println(""Hello, World!"") }","Hello World example"
"Kotlin","class Person(val name: String) { fun greet() { println(""Hello, $name!"") } }","Class example"
"Kotlin","val numbers = listOf(1, 2, 3)","List example"
"Kotlin","try { ... } catch (e: Exception) { println(""Error: $e"") }","Error handling"
"Kotlin","fun add(x: Int, y: Int): Int { return x + y }","Function example"
"Language","Code","Description"
"Golang","package main; import ""fmt""; func main() { fmt.Println(""Hello, World!"") }","Hello World example"
"Golang","type Person struct { name string }; func (p *Person) greet() { fmt.Println(""Hello, "" + p.name + ""!"") }","Struct example"
"Golang","numbers := []int{1, 2, 3}","Slice example"
"Golang","if err != nil { fmt.Println(""Error:"", err) }","Error handling"
"Golang","func add(x int, y int) int { return x + y }","Function example"
"Language","Code","Description"
"Rust","fn main() { println!(""Hello, World!""); }","Hello World example"
"Rust","struct Person { name: String }; impl Person { fn greet(&self) { println!(""Hello, {}!", self.name); } }","Struct example"
"Rust","let numbers = vec![1, 2, 3];","Vector example"
"Rust","match result { Ok(value) => println!(""Result: {}", value), Err(err) => println!(""Error: {}", err) }","Error handling"
"Rust","fn add(x: i32, y: i32) -> i32 { x + y }","Function example"

