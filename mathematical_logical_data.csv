input,output
"What is the next number in the sequence: 2, 4, 8, 16, ?"," ""The next number is 32."
"If all bloops are razzles and all razzles are wozzles, are all bloops wozzles?"," ""Yes"
Is the statement 'This sentence is false' true or false?," ""This is a paradox known as the liar paradox; it cannot be classified as simply true or false."
What can be inferred if all mammals are warm-blooded and all whales are mammals?," ""It can be inferred that all whales are warm-blooded."
"Explain the logical fallacy in the statement 'If it's raining, the ground is wet. The ground is wet, so it must be raining.'"," ""This is the fallacy of affirming the consequent; the wet ground could be due to other reasons."
"If all roses are flowers and some flowers fade quickly, can we conclude that some roses fade quickly?"," ""Yes"
"If a>b and b>c, what is the relationship between a and c?"," ""It can be concluded that a>c."
"Evaluate the expression: If A = True, B = False, what is A AND B?",A AND B is False.
"Solve for x: If 2x + 3 = 11, what is x?",x equals 4.
"If all M are P and some S are M, what can we conclude about S and P?",Some S are P.
"What is the truth value of the statement: 'If today is Sunday, then 2 + 2 = 4.'",The statement is true because the conclusion is always true.
"Given the set A = {1,2,3} and B = {3,4,5}, what is A ∩ B?",A ∩ B is {3}.
"Solve the logical expression: NOT (A OR B), when A = False, B = True.",The result is False.
"If x > y and y > z, what is the relationship between x and z?",x > z.
"What is the contrapositive of the statement 'If it rains, then the ground is wet'?","If the ground is not wet, then it is not raining."
Simplify the Boolean expression: A AND (A OR B).,Simplified expression is A.
Translate into a logical expression: 'All that glitters is not gold.',"For all x, if x glitters, then x is not gold."
"If f(x) = 2x and g(x) = x + 3, what is f(g(2))?",f(g(2)) equals 10.
"Given that p ↔ q is true, and p is true, what is the truth value of q?",q is true.
"Is the following argument valid? 'All dogs are animals. Some animals are pets. Therefore, some dogs are pets.'",The argument is not necessarily valid.
Evaluate the logical equivalence: (A AND B) OR (A AND NOT B).,Equivalent to A.
Determine the solution set: x^2 - 4 = 0.,x equals 2 or x equals -2.
"What is the inverse of the conditional statement 'If P, then Q'?","If not P, then not Q."
"If 'All swans are white' is false, what does that imply?",There exists at least one swan that is not white.
Solve for y: If y = 3x + 2 and x = 4.,y equals 14.
"Find the truth value: 'If 2 is even, then 5 is odd.'",The statement is true.
"If the premises are 'All A are B' and 'All B are C,' what is the conclusion?",All A are C.
Simplify the expression: (x^3 * x^2).,Simplified expression is x^5.
"Determine the validity: 'If it is raining, then the ground is wet. The ground is wet. Therefore, it is raining.'",The argument is invalid; this is affirming the consequent.
"Compute the value: If log_base2 (x) = 3, what is x?",x equals 8.
"What is the converse of the statement 'If it is a dog, then it is an animal'?","If it is an animal, then it is a dog."
Evaluate the function: f(x) = x^2 - 5x + 6 at x = 2.,f(2) equals 0.
Is the following statement a tautology: A OR NOT A?,"Yes, it is a tautology."
"If p ∨ q is true and p is false, what is the truth value of q?",q is true.
Solve for x: |x - 3| = 5.,x equals 8 or x equals -2.
"Given that A ⇒ B is false, what can be said about A and B?","A is true, and B is false."
"Find the intersection of sets: If A = {x | x > 0} and B = {x | x < 5}, what is A ∩ B?",A ∩ B is {x | 0 < x < 5}.
Solve for x: 2^x = 16.,x equals 4.
"Is the argument valid: 'If today is Friday, then I will relax. Today is not Friday. Therefore, I will not relax.'",Invalid; this is denying the antecedent.
Compute the derivative of f(x) = x^2.,Derivative is f'(x) = 2x.
What is De Morgan's Law for 'NOT (A AND B)'?,Equivalent to 'NOT A OR NOT B.'
"Determine the solution: If 3x - 7 = 2x + 5, what is x?",x equals 12.
Evaluate the logical expression: (A ⇒ B) AND (B ⇒ C) ⇒ (A ⇒ C).,The expression is always true.
"Find the union of sets: A = {1,2}, B = {2,3}.","A ∪ B is {1,2,3}."
"If 'All squares are rectangles' and 'All rectangles have four sides,' what can be concluded?",All squares have four sides.
"Determine the truth value: 'For all x in real numbers, x^2 ≥ 0.'",The statement is true.
Solve for x: ln(x) = 1.,x equals e.
What is the biconditional form of 'If and only if P then Q'?,P if and only if Q.
"If f(x) = 1/x, what is f(f(x))?",f(f(x)) equals x.
Is the statement 'The sum of an even and an odd number is even' true or false?,False; the sum is odd.
"Determine if the following is a valid syllogism: 'All men are mortal. Socrates is a man. Therefore, Socrates is mortal.'",The syllogism is valid.
Find the inverse function of f(x) = (x - 2)/3.,Inverse function is f⁻¹(x) = 3x + 2.
Write a function in Python that calculates the factorial of a number.,The function should use recursion to compute the factorial of a given non-negative integer.
Implement a function to check if a string is a palindrome.,The function should compare characters from both ends moving towards the center.
Implement a function to reverse a linked list in-place.,Iteratively reverse the pointers of each node until the list is reversed.
Write a function to calculate the Fibonacci sequence up to n terms.,Use either iteration or recursion to sum the previous two numbers to get the next one.
Implement error handling in a promise-based function in JavaScript.,Use '.catch()' to handle errors in promise chains.
Write a function to sort a hashmap by its values in Java.,"Convert the map to a list of entries, sort the list using a comparator, and collect it back into a linked hashmap."
Implement a function to perform matrix multiplication.,"Multiply corresponding rows and columns, summing the products for each element in the result matrix."
Describe the steps to manage a cross-functional project effectively.,"Define clear project goals and objectives, assemble a diverse team with relevant expertise, establish communication channels, create a detailed project plan with timelines and milestones, assign roles and responsibilities, facilitate collaboration through regular meetings, track progress and address issues promptly, ensure alignment with overall business goals, and conduct post-project evaluations."
"Evaluate the argument: 'All swans we have seen are white; therefore, all swans are white.'","This argument is based on limited observation and may be biased; it overlooks the possibility of black swans, highlighting the importance of considering exceptions."
"If all mammals are warm-blooded and whales are mammals, what can we deduce about whales?",We can deduce that whales are warm-blooded.
"If it rains, the ground gets wet. It is raining now. What conclusion can we draw?",We can deduce that the ground is getting wet.
"From the premises 'All birds lay eggs' and 'A penguin is a bird,' what follows?",We can deduce that a penguin lays eggs.
"If all humans are mortal and Socrates is a human, what can we conclude?",We can deduce that Socrates is mortal.
Compare the heart's function to a pump in a mechanical system.,The heart pumps blood through the body much like a mechanical pump circulates fluids through a system.
"If all squares are rectangles and all rectangles are quadrilaterals, what can we conclude about squares?",We can deduce that all squares are quadrilaterals.
"Given that a conclusion follows logically from premises, what does this indicate about the argument?",It indicates that the argument is deductively valid.
"                        <time datetime=""2025-08-09"">Published on August 9", 2025</time>
"                        <time datetime=""2025-08-09"">Published on August 9", 2025</time>
function highlight(strings, ...values) {
        Map<Boolean, List<Employee>> partitioned = employees.stream()
    windowMs: 15 * 60 * 1000, // 15 minutes
                    Math.random() * 30 + 10,
- Intermediate concepts (functions, classes
**Error Handling:** JavaScript's dynamic typing can make sorting arrays with mixed types unpredictable. The `quickSort` function as implemented assumes comparable elements. If non-comparable types are present, the comparison operators (`<`
**Error Handling:** Express applications can handle errors using middleware. Error-handling middleware functions have four arguments: `(err, req
function filterByAge(data, ageThreshold) {
    // If it were a template function, one might check for comparability:
 * @details This function selects the last element as the pivot, places it at its correct
**Error Handling:** JavaScript's dynamic typing can make sorting arrays with mixed types unpredictable. The `quickSort` function as implemented assumes comparable elements. If non-comparable types are present, the comparison operators (`<`
**Error Handling:** Express applications can handle errors using middleware. Error-handling middleware functions have four arguments: `(err, req
function filterByAge(data, ageThreshold) {
    // If it were a template function, one might check for comparability:
 * @details This function selects the last element as the pivot, places it at its correct
**Code Review Comment:** LINQ offers two syntaxes: method syntax (fluent API) and query syntax (SQL-like). While both are functionally equivalent, method syntax is often more concise and powerful as not all LINQ operators are available in query syntax. Be aware of deferred execution: LINQ queries are not executed until the results are actually enumerated (e.g.
**Code Review Comment:** LINQ offers two syntaxes: method syntax (fluent API) and query syntax (SQL-like). While both are functionally equivalent, method syntax is often more concise and powerful as not all LINQ operators are available in query syntax. Be aware of deferred execution: LINQ queries are not executed until the results are actually enumerated (e.g.
            Function<DataItem, Map<String
    if not re.match(r'^[a-zA-Z0-9._-]+$', filename):
Boolean, character types
lambda functions work. Afterwards we will dive into the LINQ’s syntax, which 
In the period 2002-2005," he was instructor in the classes of ""Introduction in "
2001/2002 period," he held the course ""Transaction Processing"" at the Sofia "
- The development plan - separating the functionality in stages, 
standard functionality offered by the .NET Framework. For example, 
class libraries with standard functionality, which developers can use. For 
mathematical functions, calculating logarithms and trigonometric functions 
certain ready-to-use functionality. For example, ADO.NET is a technology 
fully functional desktop and ASP.NET applications for Linux, Mac OS X and 
(rounded with precision of 15-16 significant decimal digits), is from 
and the Boolean type: sbyte, byte
"(true or false). The basic Boolean operators are ""AND"" (&&)"," ""OR"" (|])"
electronics can be implemented by Boolean circuits, in which zero is 
false (Boolean values), while bitwise operators work with numerical values 
variables a and b," there is also 1 in the result. The second operation is ""AND"". "
operand (or expression) must be Boolean, and the next two operands must 
the two numbers you can find with the function Math.Max(a, b) and the 
logical (Boolean) expressions. The logical operators are: &&, ||
Boolean expression, body of a conditional statement
Boolean expression is calculated to true, the body of the conditional 
Write a program that asks for a digit (0-9), and depending on the input
For the result we use a Boolean variable called prime. Initially, its value is 
- Nl =1*2*3...(n-1) *n, forn> 1; 
2)*...*3*2, which is the desired value of n!. 
1=128, sum=255 
S =1+ 4 +27, ae 
1/2;,3/4 
If all numbers are positive, there is a much faster algorithm. We sum 
- FX = 5000 = 5 x 1,000 
represent the hundreds (107=100), and so on. In other words - every 
third position corresponds to 2 to the second power (27=4), and so on. If the 
2 O + 2°14 0 + 65,535 
4 0 + 2%7-41 0 + 4,294
8 0 + 2°-1 0 + 18,446
2 -25 = 24-4 -32,768 + 32
4 -23+ = 231-4 -2,147
8 763 = 963.4 -9,223
ushort | 16 bits 0 + 65,535 System.UInt16 
uint 32 bits 0 + 4,294
ulong 64 bits 0 + 18,446
point numbers accuracy of 15-16 digits, as well as exponents displacing the 
Multiply the next digit by 16*16, the next by 16*16*16 and so on. You 
functions or procedures. In C#, they are called methods. 
private. Its function is opposite to that of the public, i.e. if a method is 
2+3, the result of the calculation of that expression must be of type float 
Celsius to Fahrenheit formula is like this one: °C = (°F - 32) * 5/9, 
implemented in the method is divided by functionality, to several 
idea a functionality that is well detached logically, to be placed in a 
than the count of all cells (N*M). In our case the size of the maze is 7*5, i.e. 
What is the conclusion? The backtracking method does not work, when the 
generates all subsets, consisting exactly k strings chosen among the 
program that finds all subsets of numbers in the array, which have a 
whether there is one or more numbers in the array (subset), whose 
natural number. Similar functionality is widely used in practice, for example
After we got acquainted with the basic functionality of objects, we are going 
Boolean variables, etc.). We are going to describe them in details in the 
logarithm and square root, and some trigonometric functions. We are going to 
Se 7 = /3 =1,7320508... 
- mathematical functions: In(x), sqrt(x)
RIBUTES secAttrs. String msgPath. Boolean bFromProxy,. Boolea 
oding. Boolean detectEncodingFromByteOrderMarks, Int32 buffe 
Boolean result with either true value, if the strings have the same values
Using the built-in functionality of the method Split(...) from the class String, 
searching matches by a pattern. An example for a pattern is [A-Z0-9]+, 
"Assuming that the phones are saved in the following format: ""@8 + 8 digits", 
"text ""10/22/2010"" we can get an instance of DateTime type", containing the 
Let’s consider two classes - A and B. We say that, class A accesses the 
Smal1=10@, Normal=150
test functionality, which finds all books authored by Stephen King and 
There are buffered streams that do not add any extra functionality, but use 
List<int> unionList = Union(firstList, secondList); 
S3 = 2*S,4+ 1; 
The functions associated with node, like creating a node
Comparability - we call two objects A and B comparable, if exactly one of 
Similarly we will call two keys A and B comparable, if exactly one of the 
logarithmic behavior of the operations adding, searching and removing an 
For the edges a weight function can be assigned, that associates each edge 
crossing function of a pipe, etc. A graph that has weights on the edges is 
such as searching for the shortest path between two intersections, 
checking whether there is a road between two intersections, checking 
key and returns a Boolean value, indicating if the operation was 
defines a comparison function int Compare(T x, T y) that is an alternative 
function) is executed hash(key), that returns a number we call a hash- 
hash-code is a number returned by the hash-function, used for the 
Finding such a function in the common case is a very hard, almost 
Now we will take a look at a few examples for hash-functions, which are used 
functions. The main concept is that, the second hash function is used for the 
stopper is the need of two hash functions, which means that the class 
the elements of the intersection of both sets - the result is a set, 
elements of the sets union - the result is a set, containing the elements 
We have the data of the following buses: [08:24-08:33], [08:20-09:00]
[08:32-08:37], [09:00-09:15]. We are given the range [08:22-09:05]. 
You can use GetHashCode() % size as the first hash-function, 
(GetHashCode() * 83 + 7) % size as the second, (GetHashCode () * 
logarithmic, linear and so on
the base of the logarithm is most often 2, 
which makes 1/100*n¥*n steps, for elements up to 5000 the quadratic 
Besides the number of steps using a function of the input data, one can 
every step of the function execution 2 recursive calls are done in average, the 
hash-function, in SortedDictionary<K
hash-table is if we choose a bad hash-function, we can reach a linear 
executed with logarithmic complexity O(log(N)), which is the same in the 
To each of the one-elemental subsets we add every element from S, which 
subsets we generate, for example {ocean
the collection of the subsets of words, for example: 
through its elements. If we examine the algorithm for generating subsets, we 
The subset, which had been firstly generated
subsets with one more element have been generated from it, right? Therefore 
S which subset does not contain. The result is a set, which we enqueue. 
subsets of S, but some of them are generated twice. 
one and the same subset. It seems we have not thought of duplicates, which 
Since the subsets {1, 2
generate only subsets, in which the indices are in ascending order. Instead 
of subsets of words we can keep subsets of indices, right? In these subsets of 
in subset. We add to subset all indices, which are bigger than start 
and smaller than N. As a result we get several new subsets, which we 
and searching an element as well as union, intersection
methods to extract the subsets S and EE: RangeFrom(from, 
abstraction of data and behavior, encapsulation of data and class 
"take the indicator ""larger than"" (>) as an example. If A>B and B>C", we can 
complement / alter some of the inherited functionality. For example, the 
provides functions for printing, sending an e-mail and working with 
functionality is through interfaces. That way, the functionality can be 
Functional independence (or more precisely, loose coupling) between 
Examples of inadequate names for Boolean variables are: student, read
It would be useful if Boolean identifiers start with is, has or can (with an 
that methods are grouped by functionality, not by access level or scope. For 
Variables that span across just 4-5 lines can have short and simple names, 
// Declare boolean variable, initially true 
have common functionality, it should be moved into a base class. 
are well written and the entire functionality is covered, the code is 
and how to add functionality to already created classes, using extension 
built-in lambda functions work. Afterwards, we will pay more attention to 
use our new functionality. Unfortunately, that is the least of our problems. If 
used in the method body to create its functionality. Practically, it is the object 
borrowed from the functional programming languages (e.g. Haskell, Lisp
filtering lambda function from “e => e > 20000” to “e => e > 500000”, the 
be too small (e.g. 2-3 cards), because in this way our example might 
&'V¥)% 2/4) & 2,9 /\¢)| 4% | &)| & 
roughly 2 * 300,000 * 300
"the ""auto complete"" function; how to create methods", constructors and 
By Boolean variable can only know whether we are in a tag or not, but cannot 
Boolean variable, we can store the number of tags in which we are (in 
"Part cheapPart = new Part(""Tires 165/50/R13", 302.36m
"Part tires = new Part(""Tires 165/50/R13", 302.36m
character functions as a word separator. Therefore, we must first identify 
that the string class provides such functionality. After we check, it turns out 
counting function). For example if N=10, the estimated sieveSize will be 
Using a single loop we can evaluate the expression, provided we have the lists 
"2 -3"")", expression with large numbers
2*(2.25+5.25)-17/3 is a valid expression," but ""*232*-25+(33+a"" is not. "
"substitute ""(3+5)"" with 8"," and ""(4-7*2)"" with -10. Finally"
6. If you evaluate the expression using reverse polish notation, you can 
2. Implement functionality for add / edit / delete teachers, students
functionality for add / edit / delete teachers, students
functions that operate on it, and protects it from accidental modification from outside functions. OOP 
functions. However, the public members (both function and data) can be accessed from outside the 
A member function can call another member function directly, without using the dot operator. 
« Because the two functions are declared following the keyword public, they are 
Since we have two functions, we need to define them by saying what each function will 
« It is legal to declare variables and functions in the private part, and additional 
functions only declared in the public part of a class definition. Occasionally, 
Every C program consists of one or more functions, one of which must be main(). 
scanff.....) function can be used to enter any combination of numerical values, single 
"printf (""The sum of a and b is:\t%d\n", a+b); 
the addition operator. For example a = 8 + 3 * 5; here, a is assigned 23
condition is evaluated at the beginning of the loop. If the test expression is FALSE, 
Every C program consists of one or more functions, one of which must be main(). 
scanff.....) function can be used to enter any combination of numerical values, single 
"printf (""The sum of a and b is:\t%d\n", a+b); 
the addition operator. For example a = 8 + 3 * 5; here, a is assigned 23
condition is evaluated at the beginning of the loop. If the test expression is FALSE, 
that get called functional make these things easy, and make other 
• Functions are first class (objects). That is, everything you can do 
Python is in a functional programming style, and also expresses the 
If we simply call a function inside a for loop, the built-in higher- 
The following code is entirely equivalent to the functional version, 
"thing."" If those individual actions are wrapped in functions", map() 
could go further in turning suites into function sequences, using 
function identity_print( ), but this function is completely general
The emphasis in functional programming is, somewhat tautolo- 
ent ways to create functions, or at least something very function-like 
functional programming approach, which emphasizes immutability 
determine what result to return is not a pure function. Of course, all 
inlined into a function call. But as we have shown in this report, flow 
hence alter results of functions (e.g., by changing the contents of a 
you can pull out functions that have not been so decorated too — i.e., 
If your namespace is entirely a bag for pure functions, there is no 
calling such a function is not a regular value, but rather an iterator 
branching into the function call signatures themselves, and this 
tion. Given the get_p rimes () generator function discussed earlier, 
— in Python is to define a generator function, as was discussed in 
fully designed — functions for performing iterator algebra. That is, 
required. As well as the basic functions in the module itself, the 
ing blocks of higher-order functions, and most functional program- 
will take another function, along with zero or more arguments to 
The function functools. reduceQ is very general, very powerful
syntactic operation to some higher-order function, using the name 
full functional programming language. On the other hand, as we 
decorator is just syntax sugar that takes a function as an argument, 
some way an enhancement of the original function (or method, or 
same decorator function can always, in principle
functions). That would be an unusual use case, however. 
functions are f unctools. lru_cache, f unctools. total_orderlng
"and f unctools. wraps. The first ""memoizes"" a function (i.e.", it 
component in a flow or composition of functions, often done to 
gramming Python in a more functional style, and only some sugges- 
avoided by writing functions without side effects, and even more 
the header file defines information about some of the functions that are provided by the standard C library but, in 
you’re using the printf () function from the standard library, you have to include the stdio . h header file. This is 
other functions that deal with input and output. As such, its name
program consists of one or more functions, and every C program must contain a function called main ()—the reason 
being that a program always starts execution from the beginning of this function. So imagine that you’ve created, 
returned by the function, and the word int signifies that main() returns an integer value. The integer value that is 
The ma in () function can call other functions, which in turn may call further functions
function that’s called, you have the opportunity to pass some information to it within the parentheses that follow its 
name. A function will stop execution when a return statement in the body of the function is reached, and control will 
then transfer to the calling function (or the operating system in the case of the function main( )). In general, you define 
a function so that either it does return a value or it does not. When a function does return a value, the value is always 
Every function must have a body, although the body can be empty and just consist of the opening and closing 
You may wonder what use a function that does nothing is? Actually, this can be very useful when you’re 
immediately follow the function name. In this case, the call to the function displays the simple piece of Shakespearean 
Items enclosed between the parentheses following a function name, as with the printf () function in the previous 
one argument to a function, they must be separated by commas. 
The word function has appeared a few times so far in this chapter with reference to main(), printf ()
transmitted back from it. This interface is specified in the first line of the function, where the function name appears. 
Each of the four functions does a specific, well-defined job. Overall control of the sequence of operations in 
function to do the analysis. Once the data have been read and analyzed, a fourth function has the task of outputting 
that you’re interested in. If you find yourself writing a particular function frequendy, you can 
whenever you need to use that particular function, you can simply use your library version. 
functional, you’ve already been introduced to one of the standard library functions in one of this chapter's earliest 
of calls to the printf () function, and it demonstrates that output to the screen is controlled by what you pass to 
The next statement calls the standard library function printf () to output Hi there! to your display screen, 
printf () function. You’ll manipulate information and get some rather more interesting results. And by the way, the 
passed to a function. In this program statement, the two arguments to the printf () function are: 
executable code for a function, but you are not obliged to do so. You typically put declarations for variables that 
subsequent arguments to the printf () function, so the value of brides corresponds to the first specifier
abbreviated forms as shown in Table 2-3. Type int can also be written as signed int, but you won’t see this often 
to 10 +38 ), you should use variables of type float. Values of type float are known as single precision floating-point 
want to output a column of values so they align vertically. If you let the printf () function work out the field width, 
evaluates to 60. You start with the expression 5 + 4, which produces 9. The result is multiplied by 3
function, the scant () function
printf () function, except here it controls input rather than output. We’ll learn more about the scanf () function 
a function. For the moment, I won’t go into a more detailed explanation of this; you’ll see more on this in Chapter 8. 
function, and not to use it when you use the printf () function. 
Within the control string for the scanfQ function, the % character identifies the start of a format specification for 
to the function. The temporary variable is subsequently discarded. This is fine, as long as you don’t want to use 
printf () function calls. Numbers in your computer are always limited in the range of values that can be stored, 
when the value being displayed by the printf () function is type long double. Remember, this has to be a 
• OuarterSold /150 is calculated as 64400 /150, which should produce the result 
To write a single character to the command line with the printf () function, you use the same format specifier
good reason not to. I’ll use bool for the Boolean type throughout the rest of the book, but keep in mind that you need 
function name, so ceilf () applies to float values and sqrtlQ applies to long double values
You also have a range of trigonometric functions available, and some of them are shown in Table 2-12. Those for 
You also have the inverse trigonometric functions available: asinQ, acos()
functions sinhQ, cosh()
of these functions. If this stuff is not your bag, you can safely ignore this section. 
The triangles ADE and ABC are the same as those shown in Figure 2-4. The triangles are similar, which just 
You have seen and used some of the data output format specifications with the printf () function in this chapter, 
values: either true or false. Because a relational operator produces a Boolean result, you can store the result in a 
the control expression for an if statement is expected to produce a Boolean result, the compiler will arrange to 
mainQ function of the program. This function returns an integer value, as indicated by the keyword int: 
expression evaluates to true. If expression evaluates to false, all the statements between the braces following the 
use this function, you need to include the header file ctype.h in your source file. This header file also declares the 
complementary function, toupperQ
Now you have declared four Boolean variables using bool, which assumes the stdbool.h header has been 
just one operand. The logical NOT operator reverses the value of a logical expression: true becomes false, and false 
even simpler. This header declares functions isalphaQ, isupperQ
It also declares the toupperQ and the tolowerQ functions to convert a character to uppercase and lowercase, 
The conditional operator evaluates to one of two expressions, depending on whether a logical expression evaluates 
Notice how the operator is arranged in relation to the operands. The ? character follows the logical expression, 
does no harm to put the parentheses in. Table 3-2 shows the order of precedence for all the operators in C, from 
As you can see from Table 3-2, all the comparison operators are below the binary arithmetic operators in 
Each if expression can be anything as long as the result is true or false, which I’m sure you will remember is 
Because any logical expressions can be used as the if conditions, this statement is very flexible and allows you 
because it amounts to -164/4. If the sign bit isn’t propagated, however
The effect of each control expression is explained in Figure 4-2, but let’s take a closer look at exactly what’s 
The variable total will be assigned the value 15 (from 9 + 6). The variable count, with the initial value of 10
Each time you call the randQ function, it will return a random integer. The value will be from zero to a maximum 
The sequence of numbers that’s generated by the randQ function uses a starting seed number, and for a given 
seed the sequence will always be the same. If you use the function with the default seed value, as in the previous 
function each time the program executes. The time () function requires an argument to be specified, which you'll 
1 + 8 + 15 + 22 + ... and so on up to 1,000. 
You can start identifying the basic functional blocks of code, including the main loop for the game. The loop check 
The digits in the sequence that you generate have to be random. You’ll use the functions rand(), srandQ
The time() function accepts the address of a variable as an argument in which the time value is to be stored, and 
returned by the t ime () function, and you use this as the argument to the first call of s r a n d () to initialize the random 
There’s a standard library function, f flush ()
function is typically used for file buffers, which you’ll learn about in Chapter 12
The declaration required for the function ff lush () is in the stdio. h header file, for which you already have an 
• In complicated logical expressions, avoid using the operator ! as much as you can. 
Exercise 4-3. Extend the previous program to output the appropriate name, such as 
evaluated during the execution of the program. When you use an expression, the only constraints are that it must 
function, only the value stored in the variable is available to the function. Prefixing the variable name with the address 
"M , i , ~ 

,i,i r~r~ 

,i,l 


Each array element is 4 bytes 




Figure 5-5. Memory occupied by a4x 10 array 


198 




























CHAPTER 5 ARRAYS 


Because the array elements are of type float, which on my machine occupies four bytes, the total memory 
occupied by this array on my computer will be 4 x 10 x 4 bytes, which amounts to a total of 160 bytes. 

A three-dimensional array is a straightforward extension of a two-dimensional array: 

double beans[4] [10][20]; // 4 fields, each with 10 rows of 20 beans 

This declares an array with 800 elements. You can visualize it as storing yields from beans plants where there are 
three fields, each containing 10 rows of 20 plants. I’m sure you can see that the idea can be extended to define arrays 
with as many dimensions as you require. 

Initializing Multidimensional Arrays 

Initializing a two-dimensional array is similar to what you have seen for a one-dimensional array. The difference is 
that you put the initial values for each row between braces, { }, and then enclose all the rows between braces: 

int numbers[ 3 ][ 4 ] = { 

{ 10, 20, 30, 40 }, // Values for first row 

{ 15 , 25 , 35 , 45 }, // Values for second row 

{ 47, 48, 49, 50 } // Values for third row 

}; 


Each set of values that initializes the elements in a row is between braces, and the whole lot goes between 
another pair of braces. The values for a row are separated by commas, and each set of row values is separated from the 
next set by a comma. 

If you specify fewer initializing values than there are elements in a row, the values will be assigned to row 
elements in sequence, starting with the first. The remaining elements in a row that are left when the initial values have 
all been assigned will be initialized to 0. You can initialize the whole array to 0 by supplying just one value: 

int numbers[ 3 ][ 4 ] = {0}; 

For arrays of three or more dimensions, the process is extended. A three-dimensional array, for example, will 
have three levels of nested braces, with the inner level containing sets of initializing values for a row: 


int numbers[ 2 ][3][ 4 ] = { 











{ 







// 

First block of 3 rows 



{ 

10, 

20, 

50, 

40 

}, 





{ 

15, 

25, 

55, 

45 

}, 





{ 

47, 

-P* 

00 

49, 

50 

} 




}, 










{ 







// 

Second block of 3 rows 



{ 

10, 

20, 

50, 

40 

}, 





{ 

15, 

25, 

55, 

45 

}, 





{ 

47, 

- 1 ^ 

00 

49, 

50 

} 




} 









}; 











199 


CHAPTER 5 ARRAYS 


As you can see, die initializing values are between an outer pair of braces that enclose two blocks of three rows, each 
between braces. Each row is also between braces, so you have three levels of nested braces for a three-dimensional array. 
This is true generally; for instance, a six- dimensional array will have six levels of nested braces enclosing the initial values 
for the elements. You can omit the braces around the list for each row and the initialization will still work; but including 
the braces for the row values is much safer because you are much less likely to make a mistake. Of course, if you want to 
supply fewer initial values than there are elements in a row, you must include the braces around the row values. 

You need a nested loop to process all the elements in a multidimensional array. The level of nesting will be the 
number of array dimensions. Here’s how you could sum the elements in the previous numbers array: 

int sum = 0; 

for(int i = 0 ; i < 2 ; ++i) 

{ 

for(int j = 0 ; j < 3 ; ++j) 

{ 

for(int k = 0 ; k < 4 ; ++k) 

{ 

sum += numbers[i][j][k]; 

} 

} 

} 

print-f(The sum of the values in the numbers array is %d.", sum); 
smallest hat size is 6 1/2, so the first three characters corresponding to the first size are in size[o] [o]
size is 7 7/8, and it’s stored in the elements size[o][n]
6 1/2, and at the other end of the scale
Exercise 5-2. Define an array, data
Exercise 5-4. Define a two-dimensional array, data [ 11 ] [ 5 ]
printf () function, you have defined the message as a string constant. The following statements illustrate this: 
As Figure 6-1 shows, a special character with the code value 0 is added to the end of each string to mark where 
standard library provides an extensive range of functions to handle strings. First, let's see how you create variables that 
output the string stored in message using the printf () function, you could write this: 
handling functions are sensitive to the 1 \0' character, so outside of that there really is nothing special about an array 
To use the optional functions in string. h, you must define the STDC_WANT_LIB_EXT 1 symbol in your source 
code may use one or more of the new function names. In particular, many programmers implemented their own safer 
string handling functions in the past, so this could easily cause name conflicts with the Cl 1 library. When conflicts 
The strnlen_s () function that returns the length of a string requires two arguments: the address of the string, which 
The function returns the length of the string as an integer value of type size_t. If the first argument is NULL, 0 will 
first argument. The function returns an integer error code as a value of type errno t, which is an integer type that is 
The strncat_s () function is called in the condition to the if statement to check the return value, just like with 
value of their character codes. This mechanism is illustrated graphically in Figure 6-2, in which the character codes in 
The standard function strcmp (strl, str2) compares two strings
The strncmp () function compares up to a given number, n
arguments are the same as for the strcmpQ function, and the number of characters to be compared is specified by a 
The comparison functions are standard in string.h, so you don’t need to define_ stdc_want_lib_exti _for 
the array capacity. The function scanf_s() will help with this. Here's how you prompt for, and read
When you use the scanf_s() function to read characters using the %c conversion specification, it also requires 
The scanf_s() function will store up to five characters in the ch array. No \o is added. If you enter abcde, each 
If the value returned by the strcmpQ function is 0, the two strings are equal and you display a message to this 
The str ing. h header file declares several string-searching functions. Before I get into these, we'll take a peek at the 
function expects its second argument to be of type int, so the compiler will convert the value of ch to this type before 
function call, pGot_char will 
condition. The strchrQ function is called to start searching for ch at the address in pGot_char, which will be the start 
The strstr () function is probably the most useful of all the searching functions, ft searches one string for the first 
delimiter characters. There is also an optional tokenizing function, strtok_s()
function, so I will describe how that works. Because it's an optional standard function
first argument is stored. This will be updated by the function, so it stores the number of 
The function returns a pointer of type char* that points to the first character of a token, or NULL if no token 
1. On the first function call with str not NULL, str is searched to find the first character 
the function returns NULL. If a nondelimiter character is found, the function searches 
stdio. h is one way to do this. This is an optional function because it replaces gets (), which is now a deprecated 
function, so you should not use it. 
The gets s () function expects two arguments. The first is the address of an array, str say
wrong. If an error of some kind prevents the gets_s() function from reading the input successfully, it will return 
better by using the f get s () function, which stores the newline character in a string that is entered to end the input 
The f gets () function requires three arguments: the address of the input array, str say
You can examine the characters in a string using the library functions that are declared in the ctype. h header, which 
The string you enter is read into the buf array using the optional standard library function, gets_s(). This is 
ctype.h. The toupperQ function converts from lowercase to uppercase, and the tolowerQ function does the reverse. 
For all four functions, leading whitespace (characters for which isspace( ) returns true) is ignored. Any 
These functions are very easy to use, for example: 
"These functions recognize ""INF” ""INFINITY'","’ and ""NAN” as discussed for the previous functions in this section. "
You also have the functions strtollQ, strtoulQ
function reads a maximum of BUFSIZE - 1 characters from stdin. If the user enters a line longer than this, it won’t really 
The strcats () function returns a nonzero integer if the concatenation could not be completed. In this case, this can 
themselves. The strtok s ( ) function returns the address of the word that was found, and this must certainly be 
previously passed to the function. If a NULL is returned, there are no more words
segmented into several much shorter functions. By Chapter 9 you’ll be in a position to do this, and I would encourage 
Exercise 6-4. A palindrome is a phrase that reads the same backward as forward, 
must first cast the pointer to type int*. You’ll learn about the malloc () library function later in this chapter, which 
Figure 7-2 illustrates using a pointer. In this case the pointer is type char*, which is a pointer to char. The pchar 
Figure 7-3. Referencing an array, its subarrays
As Figure 7-3 shows, board refers to the address of the first element in the array of subarrays
Table 7-1 lists these ways of accessing your board array. The left column contains row index values to the board array, 
arguments and local variables in a function is allocated. When the execution of a function ends, the space allocated 
use the malloc () function, you specify the number of bytes of memory that you want allocated as the argument. The 
The free() function has a formal parameter of type void*, and because any pointer type can be automatically 
If you pass a NU L L pointer to the free () function, the function does nothing. You should avoid attempting to free 
The calloc() function that is declared in the stdlib.h header offers a couple of advantages over mallocQ. First, 
are expected to be of type sizet. The function still doesn’t know the type of the data you wish to store, so the address 
will be used by the strtok_s() function. When strtok_s() finds a word, it updates the value of strjLen to 
This example will really sort the wheat from the chaff. You use the input function fgets () for the input process, 
evaluate an expression from left to right, applying each operator to the previous result and the right operand. This 
You’ll be using the optional string functions, so you define the symbol that makes them available. Of course this 
learned about the complementary function f ree() that you use to release memory previously allocated by malloc (), 
more about functions, you’ll be able to do a much better job of implementing Program 7.15. 
relatively short. Even with the examples that you have seen so far that were written as a single ma in () function, other 
functions are inevitably involved because you have used a variety of standard library functions for input and output, 
implementing them in terms of several short functions, each with a well-defined purpose. 
main () where execution starts. When you use library functions such as printf () or scanf_s(), you see how one 
returns to the point at which that function was called. This is illustrated in Figure 8-1, where you can see an idealized 
particular function. At that point, any argument values are transferred to the function and execution moves to the 
start of that function—that is, the first statement in the body of the function. Execution of the program continues 
Before you look in more detail at how to define your own functions, I need to explain a particular aspect of the 
demonstrates why it isn’t a good idea to use the same variable name for two different variables in a function, 
local to the function and don’t exist elsewhere. Therefore, the variables declared within one function are quite 
the same name for variables in different functions; they will remain quite separate. Indeed, this is an advantage. It 
misleading overlapping of variable names in your various functions, and
printf () function, for instance
one of the function arguments. When you provide an address of a variable through an argument to a function, 
the function can modify the value of that variable. When you use scanf s () to read data from the keyboard, 
information back from a function is as a return value. With the strnlen s () function, for instance
2*7. Where a function returns a value of a given type, the function call can appear as part of any expression where 
a variable of the same type could be used. Of necessity you’ve written the function main() in all your programs, so 
When you create a function, you specify the function header as the first line of the function definition
• The function header defines the name of the function, the function parameters (which specify 
the number and types of values that are passed to the function when it’s called), and the type 
• The function body contains the statements that are executed when the function is called, and 
The statements in the function body can be absent, but the braces must be present. If there are no statements 
in the body of a function, the return type must be void
Conversely, for a function that does not have a void return type
add the detail for the function bodies step by step, testing at each stage
Note The statements in the body of a function can contain nested blocks of statements. However, you can’t define a 
You simply use the function’s name followed by a list of arguments separated by commas in parentheses, just as 
The name of a function can be any legal name in C that isn’t a reserved word (such as int, double
function, but would also be very confusing. Of course
file for the function into your source file, your program will not compile. 
You’ll often want to define function names (and variable names, too) that consist of more than one word. There 
functions and another for variables. Within this book, I have sprinkled these approaches around to give you a feel for 
specified when the function is called. The parameters for a function are a list of parameter names with their types, and 
that follow the function name. A function can have no parameters, in which case you should put void between 
using these parameter names and is executed with their current values when the function is called. Of course, a 
ends. When the execution of a function ends, the function returns an appropriate value back to the original calling 
When you want to pass an array as an argument to a function, you must also pass an additional argument 
This function has one parameter, text
This function has two parameters," one of type ""pointer to double” "
parentheses. When you call the function, the values of the arguments that you specify in the call will be assigned to the 
parameters in the function. When the function executes, the computation proceeds using the values you supplied as 
arguments. The arguments you specify when you call a function should agree in type, number
If the type of an argument to a function does not match the type of the corresponding parameter, the compiler will 
items as a single unit. A function can have parameters that are struct types, or pointers to a struct type
If expression results in a value that’s a different type from the return type in the function header, the compiler 
produce an error message if the conversion isn’t possible. There can be more than one return statement in a function, 
It’s always easier to understand new concepts with an example. This program consists of four functions, including 
arguments it receives when it is called to the Sum() function. Note that for both functions, the type of the first 
The main() function welds everything together, and Figure 8-3 illustrates the order of execution and how data 
Execution begins at the first executable statement of the function main(). After defining the samples array, 
The Average () function calls SumQ, but what goes on in AverageQ behind the scenes is of no conseguence 
Note how all four functions, including mainQ
AverageQ. You could pass it directly to the printfQ function in the output statement, like this: 
When you pass an argument to a function, the argument value
function, not the original value. This is illustrated in Figure 8-4. 
x and y. The AverageQ function has no access to the variables, valuel and value2
to functions in C, and it’s termed the pass-by-value mechanism. 
receiving an argument value that’s the address of the variable. When you pass an address to a function, it’s still only a 
function in Program 8.3 returns the value of nValues, which no longer exists when the function ends
This is similar to the GetData() function call in main (). Further, when the compiler begins compiling Average()
A function declaration, also called a function prototype
a function. It defines its name, its return value type
file adds the function prototypes for library functions to the program. For example, the header file stdio. h contains 
function prototypes for printf () and scanf_s(), among others. 
the body of ma in () prior to the function call, but this is never done. Function prototypes generally appear at the 
then external to all of the functions in the source file, and their scope extends to the end of the source file
There may be situations where a function, f unl( ) say
include declarations for all of the functions in a program source file, regardless of where they're called. This approach 
you choose to call a function from another part of your program. Of course, you never need a function prototype for 
corresponding argument to the function. More than that, you've seen that this is essential if a function is to modify the 
value of a variable that’s defined in the calling function. In fact, this is the only way it can be done. 
You have also seen that when you pass an array as an argument to a function with a pointer parameter, you are 
You can qualify a function parameter using the const keyword, which indicates that the function will treat the 
Tip If your function does not modify the data pointed to by a pointer parameter, declare the function parameter as 
In this function prototype, the first parameter is of type pointer to const pointer to const char. The pointers in 
it in any way. This function notionally returns the maximum length of the strings, which can be obtained without 
With the function prototypes at the beginning of the source file, the definitions of the functions can appear in any 
increased by nstr_incr elements by calling the reallocQ function. As you know, existing data are maintained 
swapped. In the example shown in Figure 8-5, the elements are in sequences after a single pass through all the 
swap() function: const char**, which is pointer to a pointer to const char. You must specify the parameters in 
function simply accesses the array argument; it does not change the pointers in the array or what they point to, so 
of strings to be displayed. The code in the body of the function is what you have seen before, so I won’t explain 
for longer programs that serves several functions, so you can always be sure you know what each function does. 
You've seen how you can return a numeric value from a function, and you know that a copy of the value is returned. 
Returning a pointer from a function is a particularly powerful capability, because it provides a way for you to return 
that nothing can go wrong with returning values from a function. In particular, there are specific hazards related to 
This returns the pointer value that the function received when it was called, which is the address contained in 
function incomePlusQ to hold the value that is returned. After a small modification, the example looks like this: 
So how should you implement the incomePlusQ function? Well, the first implementation is fine if you recognize 
function that allocates memory responsible for releasing it. When this is not possible, put in place the code to 
You’re not finished with functions yet, so I’ll postpone diving into another chunky example until the end of the next 
• C programs consist of one or more functions, one of which is called mainQ. The function mainQ 
function, the type of the value returned from the function
parameters to the function. The body contains the executable statements for the function, 
• Before you use a function in your source file, you’d either define the function or declare the 
• Copies of the argument values are transferred to a function, not the original values in the 
• If you want a function to modify a variable that’s declared in its calling function, the address of 
That covers the essentials of creating your own functions. In the next chapter, you’ll add a few more techniques 
first argument to the function into words, and return the words stored in the array that's 
In this chapter you'll build on that foundation by exploring how functions can be used and manipulated; in particular, 
The declaration for a pointer to a function looks a little strange and can be confusing, so let’s start with a 
one parameter of type int and that return a value of type int to the calling function. Furthermore, you can only use 
"There are a lot of parentheses in a ""pointer to function” declaration. In this example", the *pf unction part of 
called pfunction() that returns a value that’s a pointer to int, which isn’t what you want here. The second pair of 
This function has two parameters of type int and returns a value of type int, so you could store its address in a 
You declare and define three different functions to return the sum, the product
You just use a regular assignment statement that has the name of the function, completely unadorned
then be a function call, not an address
You use the name of the pointer as though it were a function name, followed by the argument list between 
To declare an array of function pointers, you just put the array dimension after the function pointer array name
Apart from the function name on the right of the equal sign, this could be a normal data array. It’s used in 
When it comes to calling a function that an array element points to, you write it as follows: 
This statement shows that you can incorporate function calls through pointers into expressions, in the same 
way you might use a normal function call. Here, you call two of the functions through pointers
correspond to the functions sum(), productQ
2. Execute the function productQ with the returned values from step 1 as arguments, 
You can also use a pointer to a function as an argument to a function. This allows a different function to be called, 
int any_function(int(*pfun)(int, int)
result = any_function(pf, a
result = any_function(product,a
int any_function(int(*pfun)(int, int)
int any_function(int(*pfun)(int, int)
Within the definition of any_function(), the function specified by the pointer argument is called in the 
int any_function(int(*pfun)(int, int)
You place the name of the function sum() as the initializer after the equal sign. As you saw earlier, you 
result = any_function(pf , a
result = any_function(product,aj b); 
Here you explicitly enter the name of a function, product
the product () function will be called with the values of a and b as arguments. In this case, you’re effectively 
pointer to a function. Because you specify the function name, difference
will pass the address of the function to any_function(). Lastly, the value returned by any_function() is passed 
as an argument to the function printf (). When all this unwinds, you eventually get the difference between the 
Take care not to confuse the idea of passing an address of a function as an argument to a function, such as in 
any_function(product, a
with the idea of passing a value that is returned from a function, as in this statement: 
depends on what goes on inside the body of any_function(). In the latter case, you’re calling the productQ 
Structuring a program into functions not only simplifies the process of developing the program, but also extends the 
power of the language to solve problems. Carefully designed functions can often be reused, making the development 
the next. You may wish to maintain a count of something within a function, such as the number of times the function 
destroyed when execution leaves the function. Second, whereas an automatic variable is initialized each time its 
program. Although a static variable is visible only within the function that contains its declaration, it is essentially a 
subsequent calls to the function. Because the variable has been declared as static, the compiler arranges things 
contain a junk value. This variable gets reinitialized to 0 at each entry to the function, and it’s discarded on exit 
beginning of a program file so they’re outside the scope of the functions that make up the program, you can also declare 
functions testiQ and test 2 ().This has to be different from the count variables in either of the called functions, 
Within the factorial () function itself, because the argument is greater than 1
This is the second return statement in the function, and it calls factorial () again with the argument value 3 
function, which can now calculate 2 * i and return the result to the previous call. 
arguments when writing the function. Because you don’t know how many there are, you can’t possibly give them 
So using the function average () as an illustration, you can start to write the function as follows: 
The average () function deals with arguments of type double, so the type isn’t a problem. You now need to 
The loop condition calls another function from stdarg. h, va_arg (). The first argument to va_arg () is the 
argument you expect to find. The function va arg () returns the value of the current argument specified by parg, and 
After you’ve written the function averageQ, it would be a good idea to exercise it in a little program to make sure 
long num3 = 12 L, num4 = 20L; 
specified when your function is called, your function won’t work properly. 
loop in the function averageQ. You could then modify main() to use an argument that isn’t double, or you could 
function usually arises when some disastrous state has been detected within the function, such as some serious error 
The function may flush output buffers and close open streams, but whether or not it does this is implementation 
You pass the name of the function to be called as the argument to atexit ( ), which returns 0 if the registration 
was successful and nonzero otherwise. You can register several functions by calling atexit () several times, and 
functions have been registered to be called when exit () is called, they are called in the reverse of their registration 
The Exit () function does essentially the same job as exit (), in that it causes normal termination and returns 
With the functions registered to be called by quick_exit() by the last two statements, CloseFilesQ will be 
The first relates to how short function calls are compiled, and the second is concerned with the use of pointers. The 
The functional structure of the C language encourages the segmentation of a program into many functions, and the 
functions can sometimes be very short. With very short functions, it is possible to improve execution performance 
in meters. This operation is sensibly defined as a function, but it is also a good candidate for inline implementation 
the strings referenced by si and s2 are only referenced through those pointers in the body of the function, so the 
Sometimes you will implement a function that will never return. For example, you might define a function that you 
function will not return, the only possible return type specification is void. Knowing that a function will never return 
main () function, if you like. Developing from this
be directly called by the main () function, and you’ll indicate what these functions have to do. Below that
directive. You’ll then be able to change the size later if you want. You’ll display the board using a separate function, 
board accidentally. The function will display a board of any size, but after 26 columns the column headings will be 
so you can use this value to indicate whether the function returns any valid moves. Remember, any nonzero integer is 
function executes a move, and the computer_move () function calculates the computer’s move. For the player
Let’s add the definition of the make move () function next. To make a move, you must place the appropriate 
Now that you have implemented this function, you can move on to the trickiest part of the program
just functions that help in the implementation of an operation, in this case implementing the move for the computer. 
The first will be the function get_score(), which will calculate the score for a given board position. You can add the 
The next helper function is best_move(), which will calculate and return the score for the best move of the 
A functional structure is inherent to the C language, and you should keep your functions short with a well-defined 
evaluate 5.0 * 5.0 * 5.0 * 5 . 0 , which will result in the value 625.0. 
The parameters for the arrayopQ function are the array to be operated on, the number of 
subtract () function is passed as the third argument, the function combines the elements 
This is no accident: the standard serial input/output functions in C have been designed to be device independent, 
The scanf s () function makes use of the facility of handling a variable number of arguments, which you learned 
function. As you can see, the value reflects the number of values stored and doesn’t include the value read by the 
The hexadecimal value aA is 10 x 16 + 10, which is 170 as a decimal value. The octal value 17 is 1 x 8 + 7
as the argument. The getcharQ function is defined in stdio. h, and its prototype is: 
The getchar () function requires no arguments, and it returns the code for the character read from the input 
The ungetc () function returns a value of type int that corresponds to the character pushed back into the stream, 
function, so you should check for this if you are attempting to return several characters to a stream. 
step removes leading spaces by calling the eatspacesQ function. After checking for a sign or the first digit, the 
function. This function returns false if an integer is not found, in which case the getname() function is called to 
function for formatted output to the stdout stream is printf (), and you have already used this extensively. The 
stdio . h header may also declare the optional printf s () function, which is a safe version of printf (). The primary 
that you specify elsewhere. The optional arguments to the function are the values to be output in sequence, and 
double fp3 = 234567898.0, fp4 = 11.22334455e-6; 
The function outputs a single character, c
Exercise 10-1. Write a program that will read, store
function in a program that will output the values from 1.5 to 4.5 in steps of 0.3 (i.e., 1.5
the use of the function to read and output five strings that are from the keyboard, each terminated by a 
included in the structure. The memory occupied by the structure dobbin is shown in Figure 11-1, assuming that variables 
can be used in any function in the source file. You could put the definition within the body of main(), in which 
You have the names of the member variables as the arguments to the function following the first argument, which 
This function has two parameters, each of which is a structure. It simply compares the strings corresponding 
modification of values from within a called function. You lose this if you pass a pointer to a function. On the upside, 
Have another look at the last siblings () function. It doesn’t need to modify the structures passed to it—in fact, it 
the function. Any attempt to change those structures will cause an error message during compilation. Of course, this 
structures themselves in the function, but you must not modify the addresses stored in the pointers. It’s the pointers that 
Although you can return a structure from a function like this, it’s often more convenient to return a pointer to a 
To demonstrate how returning a pointer to a structure from a function works, you can rewrite the previous 
No instances of the structure are declared at this point. The definition precedes all the functions in the source file, 
The getpersonQ function reads in all the basic data for a person, just as in previous examples
define a function that creates a node from a data item. I will assume we are creating a tree to store long integers, 
so you can also use this function to create the root node. When a root node is passed as the second argument, there 
Whatever happens within the recursive function calls, the function will return a pointer to the node where value 
union. The syntax for declaring a union is similar to that used for structures, and a union is usually given a tag name in 
the same way. You use the keyword union to define a union. For example, the following statement declares a union to 
This statement declares a union with the tag name U example, which shares memory between a floating-point 
union U_example u2, u3; 
Members of a union are accessed in exactly the same way as members of a structure. For example, to assign 
The union, udate
two additional possibilities. This example demonstrates a union, but this is not a good approach to doing what 
it does. The union makes the code difficult to understand, and this representation for a date is likely to be error 
need to pass the first structure to the bar chart function, and the function will be able to get at them all. You’ll keep the 
We can take a stab at defining prototypes for the functions to be called by main(). These are, respectively
new bar () function that reads a value from the keyboard, creates a Bar object on the heap
function return NULL when there is no more input, we can use that to control the loop that will create the linked list. 
each time the function is called. If value was not declared as static, the array would be re-created each time the 
bar chart () function incrementally. To draw the chart within the given dimensions, the function must work out the 
Creating the column and blank strings is done by a new function, chart stringQ
is stored at the last index position. When the function is called to create column, ch is ' #'. When it is called to create 
draw x axis () function draws the axis, and I'll explain the code for that once we get through the present loop. 
structures rates alongside understanding pointers and functions in importance, if you want to use C effectively. 
and return the sum as type Length. Define a second function, show()
add() and showQ functions to sum an arbitrary number of lengths in yards, feet
The C library provides functions for reading and writing to or from data streams. As you know from Chapter 10, a 
printfs () functions. Second, you can write a file as a binary file. Data written to a binary file are written as a series 
structure in practice. It’s all taken care of by the input/output functions. However, if you really want to know all the 
external file. There’s a safer alternative function, fopen_s ()
The safer optional alternative function for opening files, f open s ()
You can use the same mode strings with this function as with f open () , but you can optionally begin the mode 
argument to the function, the file is assumed to be in the current directory; if the file is not found there
just use the rename () function, which has the following prototype: 
already used this function to flush the keyboard input buffer. With your file pointer pf ile, you could force any data left 
The fflush () function returns a value of type int, which is normally 0 but will be EOF if an error occurs. 
a program that contains multiple functions, either you need to ensure the file pointer has global scope or you must 
functions, usually at the beginning of the source file. 
The simplest write operation is provided by the function f putc (), which writes a single character to a text file. It 
The function writes the character specified by the first argument to the file identified by the second argument, 
Note that the function getc(), which is equivalent to fgetc ()
fputcQ function call within the loop writes to the new file character by character, in reverse order. The particular 
The function reads a string into the memory area pointed to by str, from the file specified by pfile. Characters 
required by the operation of the function, but it’s very helpful when you want to read the file back using fgetsQ
The loop terminates when the function fgetsQ returns null, which will be when EOF is reached. Finally
The standard function for formatted output to a stream is f printf (), and there is an optional safe version called 
You can get formatted input from a file by using the standard f scant () function, but I’ll discuss the optional safer 
This function works in exactly the same way scanf s () does with stdin, except here you're obtaining input 
The f scanf s () function would return 3 when this works, as it should because three values are stored. 
feof () function will return a nonzero integer if the end of file has been reached, so you can check for this with 
the write unless the file position is at the end of the file. The functions that change the file position are rewind (), 
of array can be passed as the argument to the function. The second parameter is the size of an array element, and 
The fwrite () function operates on the principle of writing a specified number of binary data items to a file, 
This operates exactly inverse of the write operation. Starting at the address specified by data, the function reads 
In addition to the main() function, which will contain the prime finding loop
As this program consists of several functions and will work with variables at global scope, I'll explain it piece by 
After the symbol definition to make optional functions accessible and the usual #include directives, you define 
names used in the definition of the function, but you should only do this if it helps to make the code more readable. 
The function returns 1 if n is prime, 0 if it is not prime
You have two functions to tell you where you are in a file, which are very similar but not identical. They each 
complement a different positioning function. The first is the ftellQ function, which has the prototype: 
The fgetpos () function is designed to be used with the positioning function f setpos (), which I’ll come to 
0 when it succeeds. Because this function is designed to work with a value that is returned by fgetpos (), you can 
or a write may be safely carried out on the file after executing either of the file positioning functions, f setpos () or 
on each relative is obtained by the getpersonQ function, which is implemented like this: 
restored by calling fsetposQ before returning to the calling function, so the calling function will never know that 
The function first checks for global.pfile being non-NULL, in which case close_file() is called to close the 
The function will store the stream pointer for the temporary file in pfile, or NU L L if the file could not be created. 
There are several disadvantages with these functions: the file will be deleted as soon as you close it, and it will be 
sprintf_s() function, the format array will contain the following string: 
file. We can use a structure to pass data between functions, but we won’t write structure objects to the file. Here's the 
I haven’t checked whether the argument to the function is NULL, but in production code you should always 
auxiliary function get name (), which you can implement like this: 
file position has been set appropriately. The function writes the length of the string to the file, followed by the string 
Like the write_record() function, read_record() assumes the file has been opened with the correct mode 
Here’s the prototype of a function that will write an arbitrary number of records to a file, where the records are entered 
The function will handle finding out which record is to be changed, as well as opening and closing the file. Here’s 
This function reads a name for the record that is to be changed, then reads successive records from the file 
available from the file. The freadQ function returns the number of characters read, and you store this in count. 
functions that give you even more options for handling your file operations. For example, the C library does not 
global variables are placed in source files with the extension . c. You can place function prototypes, struct type 
want to make these external variables accessible to all functions within the current file, you should declare them as 
By default all the functions in a source file are implicitly extern, which means they are visible in all object files when 
This function can only be called in the . c file in which this definition appears. Without the static keyword, the 
involving dozens or even hundreds of functions should be obvious. Not only is it easy to make a change, but using this 
defined. This provides you with a method of avoiding duplicating functions, or other blocks of code and directives
This function just outputs its own name within the format string, so the output will be: 
with the time () function, which I'll discuss later in this chapter in the section “Date and Time Functions.” 
program consisting of compact functions, each with a well-defined purpose
"printf_s(""Function sum called args %d and %d.\n", x
"printf_s(""Function product called args %d and %d.\n", x
"printf_s(""Function difference called args %d and %d.\n", x
function generates random numbers in the range 0 to rand max, which is a constant defined in stdlib.h. The 
statement with the result of the timeQ function as the argument will be included, and you will get different 
Let’s look at just one of the functions that may be called because they are all similar, product () for example: 
"printf_s(""Function product called args %d and %d.\n", x
for the random index values generated and a message from each function as it’s called, so you can follow the 
The expression will be true (nonzero) if a is equal to b. If a and b are unequal, the argument to the macro will 
the hardware timer in your PC. You can use these functions to obtain the current time and date, to calculate the time 
clock() function is measured in clock ticks. To convert this value to seconds, you divide it by the value that is 
the function difftime(), which has this prototype: 
time elapsed between the two timeQ function calls that produce the time t values, Tl and T2. 
This program illustrates the use of the functions clockQ, time()
The inner loop calls the sqrtQ function that is declared in the math.h header iterations times, so this is just 
convenient to get today’s date as a string. You can do this with the function ctime (), which has this prototype: 
by the time () function. It returns a pointer to a 26-character string containing the day, the date
The ctime () function has no knowledge of the length of the string you have allocated to store the result, 
This function accepts a pointer to a timet value and returns a pointer to a structure of type tm, which is defined 
You pass the address of a tm structure object to the function with the tm_mon, tmjnday
The if statement checks whether the function returns -1, indicating that the operation has failed. In this case you 
Exercise 13-1. Define a macro, compare (x
Exercise 13-3. Define a macro, print_value(expr)
the setlocaleQ function that is declared in locale, h. The function has the prototype: 
• LC_C0LLATE affects how the strcollQ and strxfrmQ functions in string, h behave. 
the names ofthe functions in ctype. h by inserting w. For example, you have iswdigitQ and iswalphaQ in wctype.h
All these functions work in essentially the same way as the string functions you have already seen. Among others, 
This example defines a helper function that converts a wide string to uppercase using the towupperQ function, 
The wcsstrQ function returns null when the string that is the second argument is not found in the first, so 
operation sets the stream orientation. If you use a normal character I/O function immediately after opening a stream, 
and from a char32_t character. These functions are described as restartable (indicated by r in the function names), 
is used by the function to record the shift state, and mbstate_t is a struct type defined in uchar. h. The need for this 
You might use this function to convert a multibyte string, str
location pchmb. The function returns the number of bytes stored in pchmb, so you can use this to increment the array 
function returns (size t) - 1 . When a Unicode code that occupies two charl6_t elements is processed, no bytes are 
stored when the first element is passed as the second argument to the function, so 0 will be returned. You can use this 
such as 2.0 + 3.0*_Complex_I. The complex, h header defines I to be the equivalent of_Complex_I
The creal () function returns the real part of a value of type double complex that is passed as the argument, 
The con j () function returns the complex conjugate of its double complex argument, and you have the con jf () and 
that you pass to the function represents the results code for the thread, and you can then use this value in whatever 
The thrd join () function is called with the id of the thread executing get_data () as the first argument, so this 
The main() function starts get_data() in a new thread, then starts process_data() in another new thread. 
The main() function joins the process_data() thread, but not the get_data() thread because we know that 
mtx_lock() function, with the address of the required mutex as the argument. For a nonrecursive mutex
returned. The function never blocks, so you have the possibility of trying several mutexes until you find one that is 
324 is 3 x 10 2 + 2 x 10 1 + 4 x 10°, which is 3 x 10 x 10 + 2 x 10 + 4 
911 is 9 x 10 2 + 1 x 10 1 + 1 x 10°, which is 9 x 10 x 10 + 1 x 10 + 1 
1 x 2 3 + 1 x 2 2 + 0 x 2 1 + 1 x 2°, which islx2x2x2 + lx2x2 + 0x2 + l 
one. When you add 1 + 1, the result cannot be stored in the current bit position and is equivalent to one in the next bit 
Defines macros and functions supporting operations with dates and times, including the 
abortQ function, 372 
any_function(), 357 
scanf() function, 192 
main () function, 203 
atexitQ function, 372 
at_quick_exit() function, 373 
Boolean expressions, 86 
Boolean values, 73 
strstr() function, 251 
clock() function, 578
conjf() and conjl() functions, 606 
creal() function, 606 
functions, 18 
main() function, 10 
printf() function, 13
ctime() function, 581 
ctime_s() function, 581 
input and output functions, 475 
difftime() function, 578 
execute laskQ function, 617 
exit() function, 372 
factorial() function, 365 
fclose() function, 495 
fgetc() function, 497
fgetpos() function, 521 
fgets() function, 247
fgetws() function, 595 
main() function, 515 
write_file() function, 518 
fseek() function, 521 
ftell() function, 520 
main() function, 524 
feof() function, 510 
freopen_s() function, 511 
main() function, 550 
duplicate f’ile() function, 542 
find_record() function, 542
update_file function, 541 
fgets() function, 501 
fputs() function, 501 
removeO function, 501 
fopen_s() function, 510
fprintf() function, 506 
fputc() function, 496 
fscanf() function, 506 
Function declaration, 336 
function headers, 328 
output function, 460 
Noreturn function specifier, 374 
calling a function, 350 
abort() function, 372 
atexitQ function, 372 
at_quick exitQ function, 373 
exit() function, 372 
quick exit() function, 373 
best_move() function, 391 
computer_move() function, 386
display() function, 379 
get_score() function, 389 
main() function, 376 
make _move() function, 386 
player_counters() function, 383 
reset_board() function, 379 
scanf_s() function, 379 
valid_moves() function, 381 
funl() function, 337 
fun2() function, 337 
fwrite() function, 513 
get_ data() function, 608 
gets_s() function, 250
gmtime() function, 582 
gmtime_s() function, 582 
printf() function, 89 
scanf() function, 89 
input functions, 639 
isalpha() function, 103 
islowerQ function, 103 
isupper() function, 103 
iswalnum() function, 593 
localeconv() function, 591 
localtime() function, 581 
localtime_s() function, 582
Logical expressions, 86 
cloclc() function, 176
fflushO function, 180
printf() function, 172 
date functions, 581 
day function, 585 
look like functions, 561 
time functions, 577 
main() function, 11
malloc() function, 329
union, 470 
mktime() function, 585
mtx_lock() function, 614 
mtx_trylock() function, 615 
JSforeturn function, 374 
standard library functions, 637 
pfunction, 349 
scanf_s()function, 275 
calloc() function, 294 
free() function, 289 
malloc() function, 288 
realloc() function, 294
strcmpO function, 309 
fgets() function, 312 
strtod() function, 314 
strcat_s() function, 263 
static functions, 559 
printf() function, 104
process_data() function, 610 
trigonometric functions, 76 
scanf() function, 52 
Boolean values, 73 
main() function, 70 
printf() function, 27 
free_memory() function, 343 
sort() function, 338 
str_inQ function, 340 
str_sort() function, 341 
swap() function, 342 
five functions, 321-322 
GetData() function, 334 
Sum() function, 332 
main () function, 321 
Average() function, 335 
IncomePlus() function, 344
variable scope and functions, 325 
quick_exit() function, 373 
rand() function, 174
scanf() function, 190 
scanf_s() function, 236 
setlocale() function, 590 
sqrt() function, 580 
srand() function, 174
strcat_s() function, 229
strchr() function, 238 
strcmp() function, 237
character classification functions, 248 
strtol() function, 254 
comparison functions, 235 
scanf() function, 234 
standard function, 233 
strchr() function, 238 
strcpy_s() function, 229 
strncmpO function, 234 
strnlen_s() function, 228 
printf() function, 219-220 
scanf() function, 235 
scanf_s() function, 236 
strcmpO function, 237 
strncat_s() function, 232 
strncpy_s() function, 229 
strnlen_s() function, 228 
strrchr() function, 240 
strstr() function, 253
strtod() function, 3f4 
strtok_s() function, 303 
strtol() function, 254 
isalpha() function, 115 
testing character functions, 116 
tolower() function, 115 
fgets() function, 257 
thrd_create() function, 608 
thrd_join() function, 609 
thrd_sleep() function, 613 
thrd_start_t function pointer, 608 
time() function, 174
tmpnam_s() function, 530 
gets_s() function, 243 
strtok_s() function, 242 
tolower() function, 99
toupper() function, 99
towlowerQ function, 592 
towupper() function, 592
UDate union, 473 
conversion function, 600 
cl6rtomb() function, 601 
restartable functions, 600 
Union, 470 
wcsstr() function, 597 
functions, 594 
wprintf_s() output function, 597 
This work is subject to copyright. All rights are reserved by the Publisher, whether the whole or part of the material 
in developing C++ programs running 24/7 on Linux platforms (e.g., EIB home 
Copyright  ©2008-2016,  William  E.  Shotts
192 . 168 . 1 . 0/24, twin7 . localdomain 
192 . 168 . 1 . 0/24, twin7 . localdomain 
shell  functions,  a kind  of  mini  shell  script  that  we  will  cover  in  later  chapters.  If 
learn  about  shell  functions,  a powerful  feature  that  you  can  also  include  in  the  bash 
/dev/sdc  on  /media/live-1 . 0 . 10-8  type  iso9660  ( ro, noexec
tem) has  been  mounted  on  /media/live -1 . 0 . 10-8,  and  is  type  iso9660  (a  CD- 
back.  In  addition  to  this  basic  function,  the  SSH  protocol  allows  most  types  of 
Adding  the  test  - type  d limited  the  search  to  directories.  Conversely,  we  could  have 
100  * 100  * 3 = 30,000 
Conversely,  if  we  wanted  only  to  see  a list  of  the  files  that  did  not  contain  a match
"[me§linuxbox  ~]$  echo  ""(555)  123-4567""  | grep  -E  ",A\(?[0-9]{3}\)?  [0- 
"[me@linuxbox  ~]$  echo  ""555  123-4567""  | grep  -E  ",A\(?[0-9]{3}\)?  [0-9] 
"[me§linuxbox  ~]$  echo  ""5555  123-4567""  | grep  -E  ",A\(?[0-9]{3}\)?  [0-9 
within  our  program  as  shell  functions.  As  we  have  mentioned  before,  shell  functions  are 
Shell  functions  have  two  syntactic  forms.  First,  the  more  formal  form: 
comments  and  the  function  definition.  Execution  begins  at  line  12,  with  an  echo  com- 
recognized  as  shell  functions  and  not  interpreted  as  the  names  of  external  programs,  shell 
shell  functions,  it  is  often  desirable  to  have  local  variables.  Local  variables  are  only  ac- 
Once  outside  the  shell  function,  the  variable  no  longer  exists.  When  we  run  this  script
the  most  recent  change  is  the  source  of  the  problem.  By  adding  the  empty  functions, 
<P>Generated  03/19/2009  04:02:10  PM  EOT,  by  me</P> 
<P>Generated  03/20/2009  05:17:26  AM  EOT,  by  me</P> 
With  our  function  framework  in  place  and  working,  it’s  time  to  flesh  out  some  of  the 
function  code.  First,  the  repor t_uptime  function: 
This  function  uses  the  df  -h  command  to  determine  the  amount  of  disk  space.  Lastly, 
Shell  functions  make  excellent  replacements  for  aliases,  and  are  actually  the  pre- 
report_disk_space  shell  function  that  we  developed  for  our  script,  we 
could  be  so  potentially  destructive  if  it  malfunctioned,  our  code  fragment  deserves  careful 
used  to  pass  arguments  to  shell  functions.  To  demonstrate,  we  will  convert  the 
script  or  shell  function  that  simplifies  the  invocation  of  another  program.  The  wrapper,  in 
them  on  to  the  print_params  function,  using  each  of  the  four  methods  available  with 
page- writing  code  into  a shell  function,  for  reasons  that  will  become  clear  in  a moment: 
Copyright  1991-1994,  1997
While  the  basic  functionality  of  the  loan  - calc  script  is  in  place,  the  script  is  far  from 
interpret  values  “00”  through  “09”  as  octal  numbers  (see  Table  34-2).  Next,  we  increment 
ray (elements  0-99)  would  be  initialized  with  empty  values  and  counted.  In  bash,  array 
Lines  12-20:  Loop  through  the  files  in  the  directory.  Using  the  St  at  command,  lines 
common  practice  to  specify  a shell  function  as  the  command.  In  this  example,  a separate 
sion of  an  exit  command  in  each  of  the  signal-handling  functions.  Without  an  exit, 
DOM  shell  variable  only  returns  a value  in  the  range  of  1-32767,  which  is  not  a 
shell  functions 42,  126
anywhere inside a function, even outside the block in which it was created. 
Use functions to run and define blocks of code, to perform calculations
any other code in your program is run. Even if you define a function right at the end of your program, a 
lets you call the function before you define it, as in this example: 
JavaScript also has function expressions. You create them using a fat arrow, like this: 
You define function expressions in the same way you define a variable, by using let (or var). Each one 
also needs a semicolon after its closing brace. Unlike a function declaration, a function expression must be 
That’s because function expressions are read at run-time. The code reads them in the same order, from 
If you want to write a function that returns a value, use a return statement
You can write a function expression without using a fat arrow, as follows: 
scope is local to that function," not the surrounding code. That means the value of “this"" will be undefined. "
Now that you’ve got the hang of variables and functions, let’s look at how to store and manipulate them 
This means that the array should send each of its four elements to the displayElements function, one at 
another function to do some extra work. It’s as if forEach is saying," ""Hey! displayElements"
The displayElements function has one parameter, which represents the current element that it’s 
function once, and it works perfectly with both arrays. 
function displayElements(element , i) { 
function displayElements (element, i
from the callback function. In that case, you can use forEach with an anonymous callback function
you've just learned about formatting ES6 functions, you can write the whole thing very succinctly and 
function addNumbersTogether(a, b) { 
function flattenArray(a, b) { 
"function display(name = ""rose"," color = ""red"") { "
function displayl\lumbers(x, y
These three ways of getting information into functions give you a great deal of flexibility, and you can 
In JavaScript you can initialize a function with any value: numbers, strings
If you initialize the function with a single object literal, you can use the object's property values to configure 
the function. This is called a configuration object, and although it’s not a new feature of JavaScript
function display(name, x
Nothing special! You’ve probably written hundred of functions just like this. It works just fine, but there’s 
working on a big project with possibly dozens of functions that are similar to this, you might completely 
Instead of sending multiple arguments to a function, just send one object. That single object can contain as 
In the function’s argument, supply an object: 
greater skill in your games. We’ll go on a grand tour from objects to function closures, and we’ll end with an 
function makeNewProperty(object, propertyName
• Classes: These are functions that return new, customized objects. 
So how does composition work? Just wrap an object in a function, and make the function return that 
By using a function to return an object, we’re creating a completely fresh
function is called. We’re also taking advantage of a powerful JavaScript feature called function closure, 
function random(min, max) { 
function random(min, max) { 
Now that you know to use a function to create and return an object, let’s look at one of the most 
Now let's change this so that the function returns itself as an object. To do that, remove the newObject
to wrap your module code in an immediate function to isolate it from the global scope, and you don’t need any 
Make sure the script is inside an immediate function so that it runs automatically as soon as it loads, 
that we want to use a callback function to handle the file loading. Using a callback handler is important, 
special function built into the Promise object. Whenever the task is finished, call resolve to tell the Promise 
You can now access that argument’s information it in the then function, with like syntax: 
Figure 1-1 shows what these images look like in the browser before they’re clicked, and what they look like 
Figure 2-3 shows what you’ll see, along with the moveTo and lineTo commands used to create it. 
You can now use this drawPath function to draw the shape, like this: 
Figure 2-6. The x, y positions and the width and height of the rectangle 
Figure 2-10 shows a circle with a gradient fill, which you can create with the code that follows. 
shadowBlur properties. Figure 2-14 shows a circle with a light gray, slightly blurred drop shadow. Here’s the 
Figure 2-16 shows howthis coordinate space has been shifted. Ifwe don’t do this, the square won’t appear 
Figure 2-23 illustrates the effects of these operations, and the table that follows (Table 2-1) is a brief 
"copy” 


What it does 

Draws the first shape in front of the second shape. 

Draws the second shape in front of the first shape. 

Draws the second shape only on the section of the canvas 
where the two shapes overlap. 

Draws the first shape only on the section of the canvas 
where the two shapes overlap. 

Draws the second shape where it doesn’t overlap the first shape. 
Draws the first shape where it doesn’t overlap the second shape. 
Draws the second shape only where it overlaps the first shape. 
Draws the first shape only where it overlaps the second shape. 
Blends the overlapping shape colors together into a lighter shade. 
Blends the overlapping shape colors together into a darker shade. 
Makes the overlapping region transparent. 

Draws only the second shape. 


So far in this chapter we’ve just been working with shapes, but you can apply all of these techniques just 
as easily to images. We’ll do that next. 

Filling Shapes with Images 

You can fill a shape with an image using the createPattern method. Figure 2-24 shows how an image of a 
cat has been used to fill a square. 



Figure 2-24. Fill a shape with an image 


84 



CHAPTER 2 THE CANVAS DRAWING API 


This is done by drawing a square with the rect method and then using an image pattern as the 
f illStyle. The border is optional; if you don’t use a stroke style, there won’t be a border around the image. 
Also, if you want the top-left corner of the image to match up with the top-left corner of the shape, you need 
to offset the canvas to match the shape’s x, y position. This is the same trick that we used in the previous 
example, but it’s a bit simpler because we’re not rotating anything. I’ll explain how this works ahead. Here’s 
the code that produces this effect: 

//Load an image 

let catlmage = new ImageQ; 

catlmage. addEventListener(load", loadHandler
only one of those objects: a rocket ship. Figure 2-27 shows the tileset that we're going to load, and the single 
The setup function will run only after all the assets have loaded. You’ll then be able to access any asset, 
Now that you have a function that creates sprites, you need a global render function to display them. The 
function render(canvas, ctx) { 
reusable function that does it for you. Here’s the makeCanvas function, which creates the canvas element
Figure 4-4. If you rotate a parent, its children match its axis of rotation 
Figure 4-5 shows the effect: the grayBox and its child the pinkBox rotate by 0.3 radians, in addition to 
Figure 4-6. If you scale a parent, its children are also scaled 
How does the array’s sort method work? It takes a custom function with two arguments, a and b
//the sprite is run through the ' makelnteractive' function, 
function rectangle(width, height
function rectangle(width, height
export function circle(diameter, fillStyle
circular images that you want to use with collision detection functions for circles, which you’ll learn all about 
function line(strokeStyle, lineWidth
function text(content, font
function sprite(source, x
function frame(source, x
subimage because the source contains an image property that was created by the frame function, ffere’s the 
function frames(source, arrayOfPositions
function randomInt(min, max) { 
function randomFloat(min, max) { 
So let’s create a function called contain that you can use with any of your game projects, like this: 
export function contain (sprite, bounds
a convenient way to inject some custom code into the contain function, without modifying the function 
functions, or sorting algorithms that could be causing it? Are you using a physics library that’s doing lots 
function each frame, but you don’t update the game logic until the time passed since the last frame equals 
function you learned to use in the previous chapter, with the exception of this new bit of code that calculates 
function renderWithInterpolation(canvas, lagOffset) { 
at modularizing your code with a reusable contain function, and you learned some detailed strategies for 
Set these properties to true or false, depending on the key’s state. This will let you check for keystrokes with 
You’ll find this complete keyboard function in the library/interactive, js file in the chapter’s 
custom font and call the setup function when it’s ready, ffere’s the complete code that accomplishes all this: 
export function makePointer(element, scale = l) { 
You’ll find the complete makePointer function in the source code’s library/display folder, ffere’s how 
shown in Figure 6-2. When you move, tap
function distance(sl, s2) { 
function in action. There are two circle sprites with a line connecting them. When you move the pointer, 
Let’s look at how the program uses this distance function, and also take this opportunity to learn more 
function followEase(follower, leader
The function calculates the distance between the sprites. If they’re more than 1 pixel apart, the code 
function followConstant(follower, leader
function angle(sl, s2) { 
output is shown in Figure 6-5. The box rotates toward the pointer, and a red line 32 pixels long extends from 
Now when the game loop uses the angle function to make the box rotate toward the pointer, the 
function rotateSprite(rotatingSprite, centerSprite
as illustrated in Figure 6-7. By joining wobbly lines together like this, you could create wobbly shapes. 
export function rotatePoint(pointX, pointY
That’s a function that creates and returns the kind of sprite you want to use as a bullet. In this case, 
start point and velocity. The shoot function is designed to be flexible and generic, so you can use it in a wide 
"The outsideBounds function returns a collision variable that will have the value ""top"," ""right"
function outsideBounds(sprite, bounds
function makePointer(element, scale = l) { 
Figure 6-12. Up, Over
export function button(source, x
function does, and how it can transform any sprite into a clickable
The makelnteractive function assigns a handful of new methods to the sprite: press, release
function makePointer(element, scale = l) { 
need to know to add interactivity to any game. You’ve learned the classic functions for calculating distance, 
keyboard function to quickly add keyboard interactivity to games, and how to create a universal pointer 
deep into the math behind how these collision functions work, you’ll learn everything you need to know as we 
Figure 7-1. Check whether a single point, like the pointer
force the function to use global coordinates, set the final optional argument
Any sprite with a radius property can be used in this function. If the sprite also has a mass property, the 
Here’s the complete grid function that creates all the pegs, plots them on the grid
An important feature of this function is that when two moving circles collide, they transfer their 
Figure 7-7. Press, drag
collision function that works with ordinary circles. To make this easier for you, the library/collision module 
contains two “circle vs. point” functions: hitTestcirclePoint tests for a collision, and circlePointCollision 
Figure 7-9. Find the treasure, avoid the enemies
atlas (shown in Figure 7-10), and imported the texture atlas with assets . load. 
Figure 7-13. The squares don't overlap, and the output text tells you the collision side 
The rectangleCollision function has a third, optional Boolean argument
value is false. (As with the all the other collision functions in this chapter, you should set the final optional 
rectangleCollision function to find out if the player is touching any platforms. If it is, the code prevents the 
The program’s setup function creates the game world. All the level data is stored in an object called level, 
the sprites in the game. The makeWorld function basically just creates the group, adds the game sprites to it
The makeWorld function has a lot of work to do, so before we look at the details
function terraformMapQ {/* Add grass, rock
You can see that makeWorld methodically calls four functions in order: makeMap, terraformMap
and then hands the job over to the next function to continue. When the last one, makeSprites
The first function, makeMap
determined by a helper function called celllsAlive. The cells also have a property called item, which we’ll 
After this function runs, the map array will contain 256 cell objects
technique we used in the grid function that we wrote at the beginning of the chapter, so let’s take a closer 
(You can see all these improvements illustrated in Figure 7-18, along with the code that finds these cells.) 
makeSprites function first loops through the map array and uses the cell’s properties to create the border, 
function displays them, they’ll be the last sprites to render. That will make them overlap in front of the 
using a different tileset. Take a look at the following makelmageSprites function for details, and you’ll see 
functions from this chapter to use, you only need remember one: hit. 
The hit function also returns a collision object, with a return value that matches the kinds of sprites 
If you’re curious about how the h it function works, flip ahead to the Appendix where it’s explained 
important collision functions you need to know for 2D action games: rectangle collisions, circle collisions
Figure 8-1 shows a tileset called states . png. It contains an elf character shown in four states: up, left
You can see that the function takes the sprite as an argument, creates the show method
Here’s our new advance Frame function that implements the loop feature. If loop is true, it will restart 
//The ' playSequence' function, to play a sequence of frames 
export function sprite(source, x
export function filmstrip(image, frameWidth
This was created by a custom function called particleEffect, which you’ll find in the 
function has finished creating each particle, it pushes that particle into the particles array. 
spriteFunction = () => circle(l0," ""red"")"
To use this particleEff ect function, first import it and the particles array into your game program: 
calling the particleEffect function once, the emitter calls it periodically. In this next section we’re going 
to build an emitter function that you'll be able to use to create a constant stream of particles, at any time 
should be created. The second argument is the particleEffect function, which you can customize 
export function emitter(interval, particleFunction) { 
By using the particleEffect and emitter functions together this way, you’ll be able to create most of 
Figure 8-11. When the pattern is shifted, sprites from the extra hidden row and column are repositioned to 
In the library/display folder you’ll find the tilingSprite function, which sets all this up and returns 
export function tilingSprite(width, height
The game loop does this with the help of the hitTestRectangle function, which you learned to use in 
prototype in less than 200 lines of code. By creating reusable objects and functions, and by burying all that 
function makeSound(source, loadHandler) { 
We can use the value of echo (true or false) to turn the echo effect on or off. To do that, let’s add our 
function impulseResponse(duration = 2, decay = 2 
The impulseResponse function returns a buffer, which is a model of the reverb effect that we want to 
create the convolver node in the constructor function, as well as some properties that will help us control 
function playNote(frequency, decay = 1 
The sound effect function we’re going to build is called, sensibly
how the function works its magic, let’s take a close at how you can use it in a practical way. Here’s a model for 
Because the soundEffect function is wrapped in a custom shootSound function, you can play the effect 
But it’s not just for sound effects! You can use the soundEffect function to create musical notes, and play 
them at set intervals Here’s a function called bonusSound which plays three notes (D, A and high D) in a 
Here’s the entire soundEffect function with comments that explain how it works. As you’ll see, it’s a 
a specialized easing function, and apply the result back to the sprite’s position. You’ll learn many of these 
Don’t let it scare you! It's just an ordinary function that takes one argument, x
how these functions work," but my advice is not to use it in a real game. Nothing shouts ""student game"" "
all three smoothstep functions, which you can see graphed in Figure 10-8. 
let smoothstepSquared = x => Math.pow((x * x * (3 - 2 * x)), 2); 
let smoothstepCubed = x => Math.pow((x * x * (3 - 2 * x)), 3); 
let inverseSineSquared = x => 1 - Math.pow(Math.sin((l - x) * Math. PI / 2), 2); 
let inverseSineCubed = x => 1 - Math.pow(Math.sin((l - x) * Math. PI / 2), 3); 
Unlike the other tweening functions in this chapter, weightedAverage doesn't require you to calculate 
function cubicBezier(t, a
apply the return value of the cubicBezier function to the sprite’s x/y position. And, as a bonus
In the first part of this chapter I showed you how to use 16 easing functions like smoothstep, linear
smoothstep(x) {return x*x*(3-2* x);}, 
The seventh argument in the tweenProperty function is a Boolean value called yoyo. If yoyo is true, the 
The tween object also has an update function, which contains the code that should run inside the game 
loop. When the tweenProperty function creates the tween, it pushes the tween object into the global tweens 
the particleEffect function we used to make particles. The comments explain most of the details, but 
Now that we’ve written the tweenProperty function, how do we use it? The purpose of this function is 
export function fadeln(sprite, frames = 60) { 
export function fadeOut(sprite, frames = 60) { 
export function pulse(sprite, frames = 60
Here’s how you could use makeTween to create a complex high-level function called slide, which will 
of 400/30, over 60 frames. 
The ma keT ween function will accept any number of tween arrays as arguments, so you can use it to build 
You saw the code for the slide function in the previous section, and Figure 10-14 illustrates what it does. 
export function scale(sprite, endScaleX
It’s almost exactly the same as the breathe function, except that the yoyo argument is set to false. 
find a working example of the strobe function, as along with the rest of these effects
sprite inversely on the x and y axes with the help of a spline. The sprite starts off extremely wobbly, and then 
By tweaking the parameters of the makePath function, you can achieve a versatile variety of motion path 
Each of these states is just an ordinary function, containing ordinary game code: 
Its job will be to hold a reference to the current game state function. For example, imagine that when 
the load function, all the code in the load function will run; if it's referencing play 
function will run. Think of your game state functions (load, setup
The game engine is just an ordinary function called game that you’ll find in the library/engine, js folder. So 
assets load. You could tell the game engine that you want to add a load function, this way: 
function, use g .sprite. To access the game assets
The game function creates and returns an instance of a class called Game, which does the following things: 
//The 'setup' function is required, so throw an error if it's 
load function has been supplied.) After the setup function runs, the start method calls the gameLoop. The 
export function makePointer(element, scale = l) { 
the function that should run while the assets are loading. In Bloxyee this function is called load, as you can 
function detects a collision, it bounces the ball away
blocks. When the blocks group is created by the setup function, itsy position is set to 32: 
Figure 11 - 11 . All the blocks are a in a single group, positioned 32 pixels below the top of the canvas 
The shake function’s first argument is the sprite, and the second is the shake magnitude in radians. 
export function shake(sprite, magnitude = 16
let intersectionX = vl.ax + vl.vx * t, 
let intersectionX = vl.ax + vl.vx * t, 
Here’sthe hitTestCircle function from the library/collision, js file that does this work. It first plots 
export function hitTestCircle(cl, c2
export function circleCollision(cl, c2
problem. That means it makes sense to create a generic bounce function that you can use with points, 
function bounceOffSurface(o, s) { 
In this book I’ve used the movingCircleCollision function to make moving circles bounce apart, 
ffere’s the complete code for the movingCircleCollision function that implements all these techniques, 
export function movingCircleCollision(cl, c2
colliding. It simply returns true or false, depending on whether or not there’s a collision. It implements 
export function hitTestRectangle(rl, r2
The rectangleCollision function tests for a collision, pushes the colliding sprites apart
export function hitTestCircleRectangle(cl, rl
Then run it through the hitTestCirclePoint function, which just adds some properties to the point
export function hitTestCirclePoint(cl, point
a collision it calls the rectangleCollision or circlePointCollision functions to bounce the circle away, 
function is almost identical to the hitTestCirclePoint function, except that in its final line it calls and 
export function circlePointCollision(cl, point
export function hitTestPoint(point, sprite) { 
The hit function also returns a collision object, with a return value that matches the kinds of sprites 
checks to find out which collision function to implement. I’m listing it just as reference, in case you need 
function findCollisionType(a, b) { 
function circleVsCircle(a, b) { 
function rectangleVsRectangle(a, b) { 
function circleVsRectangle(a, b) { 
function and then, if there’s a collision
function uses two arguments: the return value of the collision check, and the sprite from the array that was 
some useful functions for working with vectors, but also all the low-level skills you need to create your own 
addStatePlayer function, 386 
loadlmage function, 100-101 
setup function, 93 
load function, 435 
bounceOffSurface function, 485 
Callback function, 6 
function arguments, 17 
circleCollision function, 483 
hitTestCircle function, 241 
circleCollision function, 242 
grid function, 245 
marble grid function, 250 
movingCircleCollision function, 247 
multiple circle collisions function, 253 
pegs array function, 244 
universal hit function, 512 
hitTestPoint function, 240 
universal hit function, 284 
extra callback function, 176-177 
cubicBezier function, 381 
Filmstrip function, 300 
Function declarations, 3 
Function expressions, 3 
Function scope, 3 
end function, 446 
game function, 413 
load function, 412 
play function, 412 
restart function, 446 
setup function, 412 
sprite function, 412 
capturePreviousPositions function, 186 
render function, 187 
renderWithlnterpolation function, 185 
update function, 186-187 
render function, 177
renderWithlnterpolation function, 182
update function, 177
render function, 140-141 
setup function, 162 
frame function, 157-158 
hitTestCircle function, 479 
angle function, 206 
makelnteractive function, 225 
distance function, 201
keyboard function, 214 
outsideBounds function, 214-215 
shoot function, 213-214 
followConstant function, 205 
keyboard function, 210 
makePointer function, 194
rotatePoint function, 208 
rotateSprite function, 207 
functions, 3 
addStatePlayer function, 295 
makeCanvas function, 121 
makePointer function, 420 
makeTween function, 390 
particleEffect function, 386 
function building, 304 
game function, 307 
addltem function, 277 
hitTestRectangle function, 267 
malceMap function, 271 
makeSprites function, 278 
makeWorld function, 270 
ID array function, 273 
rectangleCollision function, 266 
set up function keyboard controls, 268 
setup function, 269 
terraform map function, 273 
2D array function, 273 
RectangleCollision function, 263 
hitTestRectangle function, 254 
contain function, 260 
healthBar function, 258 
hitTestRectangle function, 261 
removeTween function, 393 
resume function, 446 
makeCanvas function, 121 
displaySprite function, 122-123 
shake function, 442 
jumpSound function, 362 
soundEffect function, 364 
randomFloat function, 172 
randomlnt function, 172 
rectangle function, 113-114 
render function, 115 
spriteVsArray function, 516 
makeTween function, 390 
removeTween function, 393 
tweenProperty function, 386 
breathe function, 394 
scale function, 395 
slide function, 393 
smoothstep function, 370
wobble function, 396 
walkCurve function, 402 
walkPath function, 399 
circleCollision function, 483 
movingCircleCollision function, 490 
walkCurve function, 402 
walkPath function, 399 
setup function, 346-347 
keyboard function, 342 
setup function, 342 
impulseResponse function, 354-355 
playNote function, 358-360 
weightedAverage function, 381 
wobble function, 396 
This work is subject to copyright. All rights are reserved by the Publisher, whether the whole or part of the 
6.2 Functions, Informally.139 
"»> print(""2 + 3 =", 2 + 3) 
2 + 3, which is 5. 
a function. This is true even when no parameters given. For example, you can create a blank line 
But if you type just the name of the function, omitting the parentheses
function that name refers to, as this interaction shows: 
function. When Python encounters the last line of the module, the main function is invoked
The function computed by this program has the general form: k(x)( 1 — x), where k in this case 
logistic function can produce chaos. Although our program has a well defined underlying behavior, 
• A basic functional view of a Computer System comprises a central processing unit (CPU), 
"(h) print(""2 + 3 =", 2+3) 
displayed on screen using Python’s built-in function print. So far, we have looked at a few exam- 
Since print is a built-in function, a print Statement has the same general form as any other 
ment can consist of the function name print followed by a parenthesized sequence of expressions, 
ränge into a plain-old list using another built-in function, list: 
point number. Are you surprised that the result of 10/3 has a 5 at the very end? Remember, floating 
383//100 = 3, and the remaining change is 383%100 = 83. Thus
conversion program the formula 9/5 * celsius + 32 would not compute the proper result, since 
9/5 would evaluate to 1 using integer division. In these “old-fashioned” languages, you need to be 
numbers are not in the domain of the sqrt function. Right now, we don’t have the tools to fix this 
common mathematical function, the math library is the first place to look. Table 3.2 shows some 
is 1 * 6 = 6. The next time through the loop, factor will be 5
In order to make sense of the expression 5.0 * 2, Python must either change 5.0 to 5 and 
• Additional mathematical functions are defined in the math library. To use these functions, a 
• Programs may also explicitly convert one data type into another using the functions f loat (), 
3. In order to use functions in the math library, a program must include 
(e) 3 * 10 / 3 + 10 7, 3 
the round function? For example, what should be the result of round(314.159265
4/3 + 4/5 — 4/7 + 4/9 — 4/11 + ... The program should prompt the user for n, the number of 
Using 200 pixels for the ränge 0-10,000 leaves 240 — 200 = 40 pixels to split between the top and 
function color_rgb(red, green
gram is an int that represents a month number (1-12), and the output is the abbreviation for the 
the values 65-90, and the lowercase versions have codes 97-122. 
störe characters that are in the ASCII subset, but may need up to 4 bytes in order to represent some 
Let’s return to the note-passing example. Using the Python ord and ehr functions, we can write 
The split function produces a list of (sub)strings, and numStr takes on each successive string in the 
I should mention that many of these functions, like split
user will input a date such as “05/24/2003,” and the program will display the date as “May 24
The date is 5/24/2003 or May 24, 2003. 
broken in the middle of the print function, Python knows that the Statement is not finished until 
to a file on disk. This is done using the open function. Usually, a file object is immediately assigned 
function. When processing is finished, a file should be closed. 
3. A certain CS professor gives 100-point exams that are graded on the scale 90-100:A, 80-89:B
70-79:C, 60-69:D
possible score (0-10) with a height corresponding to the count of that score. For example, if 
The programs that we have written so far comprise a single function, usually called main. We have 
also been using pre-written functions and methods including built-in Python functions (e.g., abs
6.2. Functions, Informally 
6.2 Functions, Informally 
function that prints the lyrics of the first, second
6.2. Functions, Informally 
the happy function. However, something still doesn’t feel quite right. We have two functions
Now that you’ve seen how defining functions can help solve the code duplication problem, let’s 
To use this function, we just need to supply values for the three parameters. For example
Incorporating the drawBar function, here is the latest Version of our future value program: 
You may be wondering about the choice of parameters for the drawBar function. Obviously, the 
drawing of a bar. But why is window also a parameter to this function? After all, we will be drawing 
local to that function, even if they happen to have the same name as variables that appear inside of 
The name of the function must be an identifier, and formal-parameters is a (possibly empty) list 
When Python comes to a function call, it initiates a four-step process: 
function. The body of happy consists of a single print. This Statement is executed, and then 
function. In a way, parameters act as inputs to a function. We can call a function many times and 
already seen numerous examples of this type of function. For example, consider this call to the 
The body of this function consists of a single return Statement. When Python encounters return, 
it exits the function and returns control to the point where the function was called. In addition, the 
Using the distance function, we can augment the interactive triangle program from Chapter 4 
that called the function. In some cases, functions can also communicate back to the calling program 
regarding functions and parameters, you will see that this is exactly the result that we should 
the name rate appears in both functions, these are two separate variables. The Situation as 
Although we have already shortened this algorithm through the use of the drawBar function, 
more readable is to move some of the details into a separate function. For example, there are eight 
Using our new function, the main algorithm seems much simpler. 
named functions, the code has become nearly self-documenting. 
much easier to understand. As you get used to reading and writing functions, you too will learn to 
and to help structure or modularize programs. Once a function is defined, it may be called 
8. If a function returns a value, it should generally be called from 
function to print the value of y 3 , assuming y is a 
ing to find the max of five values? Then we would need three Boolean expressions, each consisting 
3. A certain CS professor gives 100-point exams that are graded on the scale 90-100:A, 80-89:B
70-79:C, 60-69:D
by the square of the person’s height (in inches). A BMI in the ränge 19-25, inclusive
9. A formula for computing Easter in the years 1982-2048, inclusive
the date is valid. For example 5/24/1962 is valid, but 9/31/2000 is not. (September has only 
Our averaging program is certainly functional, but it doesn’t have the best user interface. It begins 
Here condition is a Boolean expression, just like in if Statements. The body is
The not operator computes the opposite of a Boolean expression. It is a unary operator, meaning 
Using Boolean operators, it is possible to build arbitrarily complex Boolean expressions. As with 
Now that we have some Boolean operators, we are ready to return to our example problem. To 
these operators is forming Boolean expressions, they have operational definitions that make them 
Treated as a Boolean expression, this will always evaluate to true. The first thing to notice is that 
the Boolean operator is combining two expressions; the first is a simple condition, and the second 
Exploiting the fact that the string in ans can be treated as a Boolean, the condition in this code 
Notes: All inputs are assumed to be legal numeric values, no error or validity checking is required. 
a function to produce a “random” number. The next time a random number is needed, the current 
value is fed back into the function to produce a new number. With a carefully chosen function, 
The name of the module (random) is the same as the name of the function, which gives rise to the 
getlnputs. The point of this function is to get values for variables probA, probB
the discussion of functions in Chapter 6, I said that parameters were used as function inputs
return values serve as function Outputs. Given this analysis, we now know how the next Step of the 
That wasn’t very hard. The main function is only five lines long, and the program looks like a more 
didn’t introduce any new functions, there is no change to our structure chart. 
a function are local to that function. This function is so short, it’s very easy to see what the three 
fairly complex. Let’s hide the details in another function, gameüver
That pretty much completes the function. It got a bit complicated, but seems to reflect the rules 
of the Simulation as they were laid out. Putting the function together, here is the result: 
Whew! We have just one more troublesome function left, gameüver. Here is what we know about 
this function is typed into a module file, we can immediately import the file and test it. Here is a 
I have selected test data that tries all the important cases for the function. The first time it is called, 
Having confidence that gameOver is functioning correctly, now we can go back and implement 
the simOneGame function. This function has some probabilistic behavior, so I’m not sure exactly 
simOneGame function. Simplifying even further, our prototype could assume that each player has a 
functions that “live” inside the object. Collectively, the instance variables and methods are called 
same method. This is different from regulär local function variables, whose values disappear once 
function, you can print its docstring directly like this: 
the numbers in a list. We can write a series of functions—mean, stdDev
Using this function, we can get a list of numbers from the user with a single line of code. 
With these two functions, our original program to average a series of numbers can now be done 
to the function simpler. To get the Standard deviation of a set of numbers, we just call stdDev and 
Now that we have all the basic functions, finishing out the program is a cinch. 
This function first opens the file for reading and then reads line by line, appending a Student object 
Using the functions readStudents and writeStudents, we can easily convert our data file into 
the key value. Having defined this little helper function, we can use it to sort a list of Students 
I do not want to call the function. Rather, I am sending use gpa to the sort method
It’s often useful to write this sort of helper function to provide keys for sorting a list; however, in 
a function that computes the GPA for a Student, it’s the gpa method in the Student dass. If you 
and returns the computed GPA. Since methods are just functions, we can use this as our key and 
save us the trouble of writing the helper. In order to use a method as a standalone function, we just 
will have buttons for the ten digits (0-9), a decimal point (.)
quency part of the tuple. With this comparison function, it is now a simple matter to sort our items 
it up in a suitable function. For example, as a function
6. Write and test a function shuffle(myList) that scrambles a list into a random order, like 
7. Write and test a function innerProd(x,y)that computes the inner product of two (same 
union(set2) Returns a new set containing all of elements that are in this set, set2
roll Assign a random value to some subset of the dice, while maintaining the current value of 
are going to implement a rollAll function anyway, calling it here saves duplicating that code. 
associated interfaces. Where top-down design looks for functions, OOD looks for objects. 
comfortable with logarithms, just remember that this value is the number of times that a collection 
lOOOx 1000 = 1,000
If we write factorial as a separate function, the recursive definition translates directly into code. 
called a recursive function. The function first checks to see if we are at the base case n == 0 and, if 
function Starts that function anew. That means it has its own copy of any local values, including 
We can use this relationship as the basis of a recursive function, we just need to find a suitable 
Now that you know how to implement recursive functions, we are ready to go back and look again 
calling functions is generally slower than iterating a loop. The recursive Version, however
with a loop can also be done by a simple kind of recursive function. In fact, there are programming 
versions are probably a bit faster because calling functions is generally slower than iterating a loop, 
This function obeys the rules that we’ve set out. The recursion is always on smaller values, and 
the log function grows very slowly (log 2 16,000
Using the terminates function, we can write an interesting program. 
terminates function returns true, turing.py will go into an infinite loop. 
• A definition or function is recursive if it refers to itself. To be well-founded, a recursive 
digits of the number in the new base. Use a recursive function baseConversion(num,base) 
6. Write a recursive function to print out the digits of a number in English. For example, if 
of which is 1/3 the length of the original. The bump rises at 60 degrees, so it forms two sides 
recursive function, 367 
intersection with line, 96 
reducing with functions, 138 
functional view, 4 
Boolean operators, 212 
implementation via Boolean operator, 212 
distance function, 148 
Boolean, 169
recursive function, 370 
function, 8 
function definition, 139 
hailstone function, 217 
functions, 50
Boolean, 204 
Boolean, 204 
as function input, 147 
Boolean operators, 204 
recursive function, 368 
recursive function, 365
square function, 148 
def (function definition), 8
function summary, 114 
summary of functions, 120 
type function, 46 
value returning function, 148 
#16/1, 8th Main Road
Program defensively. Functions should be simple and do a distinct, defined task. 
Create reusable functions and Keep the functions as simple, immutable and manageable 
When naming your variables and functions, choose names that are meaningful and 
e Boolean True, False 
C language itself — stdio.h comprises standard input output functions like scanf, printf etc. 
execution ends. So when there is value return from the main function, the Operating System gets to know that 
function and this printf function should be ended with the semicolon i.e., 
+1988 +5,456.3 
e Octal constant contains digits from 0-7, and these types of constants are always preceded by 0. 
"printf(""The sum of a and b = %d", sum); 
"printf(""The sum of a and b = %d", sum); 
"printf(""The sum of a and b = %f", sum); 
"printf(""The sum of a and b = %f", sum); 
"printf(""The sum of a and b = %f", sum); 
"printf(""The sum of a and b = %f", sum); return @; 
If you want to supply the values for a and b through the key board, then the statements: 
"printf(""The sum of a and b = %f", sum); 
declared floating-point variables a and b stored in the computer memory i.e., 
when we enter a number for a and b through the keyboard, these numbers are 
read by scanf() function and they are stored in the computer memory (i.e., the 
"printf(""The sum of a and b = %f", sum); 
"printf(""The sum of a and b = %f", sum); name was not well-known
"F = 9*C/5 +32; printf (""%d ", x); 
"printf(""The product of a and b = %d"," product); cout << "" See ee BAYS "
If you want to insert a 10 digit number for a and b L.e., 
"printf(""The product of a and b = %ld", product); 
If you want to supply the values for a and b through the key board, then the statements 
"printf(""The product of a and b = %d", product); 
"printf(""The product of a and b = %d", product); 
But if the body of the main function is followed by a semicolon i.e., 
in true or false) and if the condition (a>b) is true, then the statement: 
If you want to supply the integer values for a and b through the key board, then the statements 
If you want to supply the values for a and b through the , then the above program 
int y = max(22 + 57, 75 - 16); /* Output: 79 */ 
"printf(""The remainder of a and b = %d", c); 
"printf(""The remainder of a and b = %d", c); 
Since 2-2 is equal to 0 (1.e., x-y == @). 
Since 3-2 is not equal to 0 (1.e., x-y != 9). Therefore: the statement: 
"An algorithm must be seen to be believed.” 


Local variables: 


Variable whose existence is known only to the main program or functions are called 


local variables. Local variables are declared within the main program or a function. 


Global variables: 


Variables whose existence is known to the both main() as well as other functions are called 


global variables. Global variables are declared outside the main() and other functions. 


int x=1; 


int main() 


sf 
int y=3; 
} 


What will be the output of the following programs? 


#include <stdio.h> 


int main () { 


139 


Gar Ereceimne[G]] Sahl 5 @", TI
The function to add the entered values (i.e., 3 and 5) and return the result (i.e.
The function call i.e., this statement calls the function: 
C program to print the value of tan inverse x (i.e., the value of tan 'x) 
"printf(""The value of tan inverse x = %f", atan(x)); 
"printf(""The value of tan inverse x/y = %f", atan2(x
cout << i; print('15*3=, Math. (15
Function in C programming is a reusable block of code that makes a program easier to understand, test and 
iostream comprises input output functions like cout, cin etc. 
We can represent the main function in various forms, such as: 
execution ends. So when there is value returns from the main function, the Operating System get to know that 
= If the main function returns 0 to the operating system, then the program has completedexecution successfully. 
= If the main function returns 1 to the operating system, then the program has notcompleted execution 
If you assign the floating point values 1.5 and 2.6 for a and b, then the statement: 
"the sum of a and b = 4.1 print(""x={@} but y={1}"".format(x",y)) 
If you want to supply the values for a and b through the key board, then the statements: 
"cout<<""the sum of a and b = ""<< sum; print(len(list(map(list", a)))) 
If you want to insert a 10 digit number for a and b i.e., 
If you want to supply the integer values for a and b through the key board, then the statements: 
x = [3p 1) 8-2; 18,3] 
"urllib.request.urlretrieve(""https://parade.com/wp-content/uploads/2021/08/albert-einstein-quotes.jpg"," ""img1.jpg"") "
If you want to supply the values for a and b through the key board, then the above program 
"ce PV- PV* 0.3; 


The output on the screen: 


Enter purchased value: 


If you enter the purchased value 650 


Accessor 


A function that accesses 
information in an object without 
causing any observable changes 


to the object 


names=[Alan"," ""John"
"String y = x.replaceAll(""[%a-zA-Z0-9]"," "" ""); "
bool(re.match(' [A-Za-z0-9]+$', '$manju@1988' ) ) 
"a = datetime.strptime(""1988-03-01"," ""%Y-%m-%d"") .strftime(""%d:%m: ZY"" ) "
C++ program to print the value of tan inverse x (i.e., the value of tan ! x) 
C++ program to print the value of tan inverse — (i.e., the value of tan”! y ) 
"cout<<""the value of tan inverse x/y = ""<< atan2(x",y); (x==y) && (z>y)is 1 
would contain lines 1-12, the xx01 file would contain lines 13-61
lines 62-100, the xx03 file would contain lines 101-123 
changing its functionality in order to enhance understandability, richness
Recursion is the technique that defines a function in terms of itself. That is, a function which 
An algorithm is said to take logarithmic time (log n), if 
Once a conclusion is reached, it Conclusion is invalidated if 
check the networking functionality, database connectivit 
Android uses the Linux Kernel for all its core functionality such as Memory management, 
applications and manage the basic functions of phone like resource management, voice call 
If you want to supply the values for a and b through the key board, then we have to rewrite the 
If you want to supply the values for a and b through the key board, then we have to rewrite the 
If you want to assign the floating point values for a and b, then the above program should 
If you want to insert a1@ digit number for a and b L.e., 
If you want to supply the values for a and b through the key board, then the above program 
values for a and b through the key board, then the above program should take the form: 
Paradigm Multi-paradigm: functional, imperative
block can be embedded within a function, will not be accessible 
service is unsuccessful. A fallback function, for 
function add(x, y) { 
function mult(x, y) { 
x.sort(function(a, b){return a - b}); 
x.sort(function(a, b){return b - a}); 
seems to shift the definition of functions, variables
to the top of their scope. Before a function is declared, hoisting 
functions, it enables us to create 
echo GREETING; is defined outside of a function, the 
function addition($a, $b) { function myfunc() { 
print(format(1/5.77, '.1%')) 
NOES EI COPE function repeat(n, action) { 
e [3+2, 5+4] — A Two element array. First element is 5 and second is 9 
function myfunc(x, y) { 
function (x, y
SortedSet c=x.subSet(15,35); 
applications for functionality, accessibility
"x=re.fullmatch(""[7-9]\d{9}",num) 
"i=re.fullmatch(""\w[a-zA-Z0-9_.]*@gmail[.]com", x) 
print(max(2 * 22, 5**2
"oe in Ala print (""What is 2 + 16?", 2 + 16) 
Divisors of 220 = 1, 2
sum2=0 Divisors of 284 = 1, 2
4-4, 4.9
"Albert Einstein’: '@3/14/1879', 
Benjamin Franklin’: '@1/17/1706'", 
# Output: ['3/14/1879', '4/18/1955'] 
1/2! 8/10|17| 6 17 > 6, swap 
1/2;/8;10| 6 $17 10 > 6, swap 
1/2|/8); 6 |10 17 8 > 6, swap 
31/714 Maximum Digit = 7, Largest Number = 87 
817/14 Minimum Digit = 4, Smallest Number = 34 
SAP provides a faster career growth whether it is functional or technical area, provided the candidate has 
be 4x4 = 16 bytes. In addition to this memory, while 
Datatypes (union, structure) Supported Supported Not supported 
JavaScript Allongé: A strong cup of functions, objects
functions. In addition, I introduce the game loop and how to load and draw sprites (images). 
instructions but on functional links between the cells. In addition to these functional programming languages, 
grouped together in procedures (or functions, or methods
Modern game engines provide a lot of functionality to game developers, such as a 2D and 
Because of this strict separation between the core game functionalities and the game itself (levels, 
(see Figure 1-1). Although this book focuses mainly on the implementation phase, you can read a little 
Figure 1-4. A web page consisting of two divisions, each with a different background color and font size 
The page shown by the browser looks exactly the same as the first example (shown in Figure 1 -2), 
Figure 1-5. An HTML page containing a button. When the user clicks the button, an alert is displayed 
In the changeCanvasColor function, you first find the canvas element. This the HTML document 
Figure 2-1. The game loop, which continuously updates and then draws the game world 
In the start function, you retrieve the canvas and the canvas context; you store them in variables so 
function called mainLoop. This function, in turn
care of setting a background color. Then you call the update function, followed by the draw function. 
What this does is simply call the mainLoop function again, after waiting for a certain period of time 
background color is set and the update and draw functions are called. At the moment, update and 
JavaScript it isn’t obligatory that an instruction be part of a function. For example, the following 
grouped together is called the body of a function. Above the body, you write the header of the 
see in the example program. In these functions, you then place the instructions you want to execute 
function, and after the name is a pair of parentheses. These serve to provide information to the 
instructions that are executed inside the function. For example, take a look at the following header: 
in this case at the word function, and following the arrows. When you reach the gray dot
keyword; then you write the name of the function. After that, you write parentheses. Between these 
you call the fillRect function. In other words, you want the program to execute the instructions 
to this function, because it needs to know the size of the rectangle that should be filled. The 
parameters provide this extra information. A function can have more than one parameter, as you saw 
in the syntax diagram. When a function is called, you always write parentheses behind it
instructions in functions, it’s possible to write reusable program pieces that can be used in many 
update and draw functions, you can do this as follows. In the update function
In the draw function, you need to execute an instruction that displays a balloon image at the stored 
each function, as well as spaces between each equals sign and the expressions on either side of it. 
allowed to write function updateQ as functionupdateQ. And similarly, you aren’t allowed to write 
different kinds of information that were passed as parameters to functions. For example, the function 
multiplication before addition. The result of the expression 1 + 2*3 therefore is 7, not 9. Addition and 
to is an anonymous function. If you want to execute the instructions contained in this function, 
constructs a list of functions that are available. In the second stage, the browser interprets the rest 
to know which functions are available. For example, this piece of JavaScript code will run just fine
similar to what you do in a function, which groups instructions together. For example: 
to the function are grouped by using braces. Similar to grouping instructions, you can also group 
Because variables can also point to functions, you can even include a subvariable that points to a 
function. For example, you could define anotherGameCharacter as follows: 
character. It also adds a few functions that are useful for this game character to have. From now on, 
if a function belongs to a variable, I’ll call this function a method. I’ll call a variable composed of other 
clear that all these variables and functions belong to a game application, as follows: 
Game. drawlmage = function (sprite, position) { 
An event-handler function has a specific header. It contains a single parameter that, when the function 
instructions in this function to extract the mouse position from the evt object. For example, this 
Figure 5-1. Mouse positions for the upper-left, upper-right
Figure 5-3 shows what can now go wrong. Due to scrolling, the clientY value is smaller than 480
Figure 5-3. The mouse pointer is at the bottom of the background sprite, but the mouse y-position is 340 (instead of 480) 
Figure 5-4. Drawing a ball sprite at position (0, 0) with the origin at the top-left corner of the sprite (left) or the center of the 
Game. drawlmage = function (sprite, position
Game. drawlmage = function (sprite, position
trigonometric functions. In this case, you can calculate the angle using the tangent function
functions, including trigonometric functions such as sine
Canvas2D.drawImage = function (sprite, position
You assign this event-handler function in Game . start, as follows: 
such as the player pressing the A and B keys at the same time. Later, in Chapter 13
These conditions can either be true or false. A condition is an expression, because it has a value 
(it’s either true or false). This value is also called a Boolean value. With an if instruction, you can 
expression is a value: one of the two truth values yes or no. In logic, these values are called true and 
applied in a lot of different situations. A logical expression is similar to an arithmetic expression, 
The type of logical values is Boolean, named after the English mathematician and philosopher George 
Boolean variables are extremely handy for storing the status of different objects in a game. For example, 
you can use a Boolean variable to store whether the player is still alive, whether the player is currently 
Boolean variable, like this: 
Boolean is evaluated from the expression 12 > 5, which evaluates to true. This value is then assigned to 
true (3 + 4 doesn’t equal 8), so this evaluates to false
released. Depending on the truth value of the condition, you execute the body of the instruction. Of 
You add an extra Boolean variable leftPressed to the Mouse object, which hat indicates whether a 
function, you start the game. By changing the order of the script method calls
with event-handler functions. But before that, let’s talk a little bit more about methods and functions. 
You’ve already seen and used quite a few different kinds of methods and functions. For example, there 
stored in a variable. This is also called the return value of a method or function. In mathematics, it’s 
function returns a value, you can store that value in a variable: 
instruction before it ends the function. This is a very handy feature of the return instruction, and you 
If a method or function has a return value, this value doesn’t necessarily have to be stored in a 
body of that function, you decrement the variable. Here is the version of the loadSprite method that 
requestAnimationFrame point to a function that calls the window. setTimeout method. In JavaScript, 
not (!) operator, the entire condition in the if instruction will evaluate to true only if the shooting 
game objects that only 1/60 of a second has passed since the last time, even though that may not 
the ball based on the barrel orientation. Using the sine and cosine functions, you calculate the new 
Game. start = function (canvasName, x
■ The different kinds of methods/functions (with/without parameters, 
This creates a function called Dog. When this function is called in combination with the new keyword, 
Because lucy is created according to the prototype in the Dog function, the lucy object contains a 
you need to define a function. Let’s call this function Ball, and let’s add the initialize method to 
already is a function that is called? You can simply perform the initialization in that function, as follows: 
And since Ball is a function, you can even pass along parameters if you want to: 
Because the Ball function is responsible for initializing (or constructing) the object, this function is 
Figure 8-1 shows a screenshot of the Painter5 example, which now has three falling paint cans. 
Figure 8-1. A screenshot of the Painters example with a cannon, a ball
function Vector2(x, y) { 
function Vector2(x, y) { 
function Vector2(x, y) { 
function Vector2(x, y) { 
Canvas2D_Singleton. prototype. drawlmage = function (sprite, position
function PaintCan(xPosition, targetColor) { 
In Figure 10-5, notice that the Game Over overlay doesn’t completely hide the other objects and 
function ThreeColorGameObject(sprColorRed, sprColorGreen
using inheritance. Figure 11-3 also shows a Ball instance, but using the inheritance mechanism 
dealing with basic types such as numbers or Booleans, the variables are directly associated with a 
Because when the square function is called, the number parameter is passed by value. The variable 
function Sound(sound, looping) { 
Because not all browsers are capable of playing all different kinds of music, you added an if 
var loadSound = function (sound, looping) { 
Just like numbers or Booleans, strings are primitive types in JavaScript. Strings are also immutable. 
"\"" or "" for the double quote character 



1 66 CHAPTER 1 2: Finishing the Painter Game 



As you can see, you may use single quotes without a backslash in a string delimited by double quotes, 
and vice versa. The syntax diagram for representing all these symbols is given in Figure 12-2. 



Figure 12-2. The syntax diagram for symbols 


String Operations 

In the Painter game, you use string values in combination with the drawText method to draw text of 
a certain color in a desired font somewhere on the screen. In this case, you want to write the current 
score at upper left on the screen. The score is maintained in a member variable called score. This 
variable is increased or decreased in the update method of PaintCan. How can you construct the text 
that should be printed on the screen, given that part of this text (the score) is changing all the time? 
The solution is called string concatenation, which means gluing one piece of text after another. 

In JavaScript (and in many other programming languages), this is done using the plus sign. For 
example, the expression Hi"," my name is "" + ""Arjan"" results in the string ""Hi"
possible to “concatenate” two numbers: the expression 1 + 2 results in 3, not 12. Of course
Game_Singleton. prototype. start = function (divName, canvasName
do this by attaching an event-handler function, as follows: 
and only has two (boolean) member variables: one to indicate if the button is down, and another to 
In the event-handler functions, you’re changing the values of the member variables. In the 
handleMouseMove event-handler function, you have to calculate the mouse position. This is also the 
function. In the handleMouseUp event handler, you set the down variable to false again. Here is the 
Figure 13-2 shows another part of the expression syntax diagram, with the syntax for specifying an 
the other touch event-handler functions. In handleTouchEnd, you need to remove the touch from both 
In the handleTouchEnd function, you walk through the changedTouches variable with a for loop. For 
lewellamGameWorld. prototype. setGridValue = function (x, y
lewellamGameWorld. prototype. getGridValue = function (x, y) { 
you have to let go of the basic premise that a game object is a three-colored sprite. But then, what 
function SpriteGameObject (sprite, layer) { 
two objects in the array. You can write this function yourself. For example, here is a call to the sort 
this._gameObjects.sort(function (a, b) { 
When the sorting function returns a positive number, a is “larger” than b and should be placed after 
this._gameObjects.sort(function (a, b) { 
function GameObjectGrid(rows, columns
GameObjectGrid. prototype. addAt = function (gameobject, col
function lewelGrid(rows, columns
The result of this change is shown in Figure 14-2. As you can see, all the child objects are moved
function GameObject (layer, id) { 
function SpriteGameObject(sprite, layer
for (var i2 = 0, 12 = list. length; i2 < 12; ++i) { 
function product(a, b) { 
function product(a, b) { 
function Jewel(layer, id) { 
Canvas2D_Singleton. prototype. drawlmage = function (sprite, position
function Label(fontname, fontsize
function calculateTextSize(fontname, fontsize
function ScoreGameObject (fontName, fontSize
DewelGrid. prototype. isValidCombination = function (a, b
you see an interesting property: 0 + 0 + 0 = 0, 1+1+1= 3
Figure 1 5-1 , you see that the first nine jewels are yellow
lewelGrid. prototype. removelewel = function (x, y
function VisibilityTimer (target, layer
function GlitterField(density, width
function SpriteGameObject(sprite, layer
Figure 18-2. A screenshot of the PenguinPairsI example program. That shark looks hungry, and that penguin looks tasty! 
function Slider(sliderback, sliderfront
Math. clamp = function (value, min
function LevelButton(levelIndex, layer
classes are needed and how the functionality of your game should be split up between them, you 
"#. . .r. . 



CHAPTER 21 : Storing and Recalling Game Data 279 



In this level definition, a number of different blocks are defined. An iceberg (wall) tile is defined by the 
# sign, a penguin by an r character, a background tile by a . character, and an empty tile by a space 
character. Now you can write a method that uses this information to create the tiles and store them 
somewhere (probably in a GameObjectGrid instance). This means you need different types of tiles: a 
normal tile on which a penguin can stand, a transparent background tile, and a wall (iceberg) tile with 
which a penguin can collide. 

The Tile Class 

To get things started, let’s first write a basic Tile class. This class is a subclass of the 
SpriteGameObject class. For now, you don’t consider more complicated items in the level such as 
penguins, seals, and sharks. You only look at background (transparent) tiles, normal tiles, and wall 
(iceberg) tiles. Let’s introduce a variable to represent these different varieties of tiles: 

var TileType = { 
normal: 0, 
background: 1 , 
wall: 2 

}; 


The Tile class is a basic extension of SpriteGameObject. In the constructor, you declare a member 
variable type to store the type of tile that an instance represents: 

function Tile(sprite, layer) { 

SpriteGameObject. call(this, sprite, layer); 
this. type = TileType. normal; 

} 

To accommodate transparent tiles, you override the draw method to draw the sprite only if the tile 
isn’t a background tile: 

Tile. prototype. draw = function () { 

if (this. type === TileType. background) 
return; 

SpriteGameOb j ect . prototype . draw. call (this ) ; 

}; 


When you load the level, you create a tile for each character and store it in a grid structure such as 
GameObjectGrid. 


Other Level Information 

In addition to the tiles, you need to store a few other things in the levelData variable: 

■ Whether the level is locked 

■ Whether the level has been solved by the player 

■ A hint for the level 


280 CHAPTER 21: Staring and Recalling Game Data 



■ The number of pairs to be made 

■ The location and direction of the hint arrow 

So, you can define a complete level in a variable as follows: 

var myLevel = { 

locked : true, 

solved : false, 

hint : Don't let the penguins fall in the water!", 
function GameObject(layer, id) { 
(see Figure 22-1). Therefore, when you load the sprite
Figure 22-1. The sprite containing the four arrows, each pointing in a different direction 
function Arrow(sheetIndex, layer
function AnimalSelector(layer, id) { 
Figure 22-2. When the player clicks a penguin, four arrows are shown so the player can choose the direction in which the 
over the other penguin (see Figure 22-3). If you click that arrow, what happens? Does the selected 
GameObject : function(layer, id) { 
GameObjectList : function(layer, id) { 
define and call a function at the same time. Perhaps you recall using this before, when defining the 
function Vector2(x, y) { 
This example creates a function that expects an object literal module as a parameter. In the function, 
object literal to the function. The result of the function is stored in the variable powerupjs, which now 
function Vector2(x, y) { 
ways to control what functions or classes are available where. For example, perhaps some methods 
(see Figure 23-2 for a screenshot). When the player clicks or taps the screen, the next level is 
function Tile(sprite, tileTp
Level. prototype. loadWaterTile = function (x, y) { 
function Animation(sprite, looping
function AnimatedGameObject(layer, id) { 
AnimatedGameObject. prototype. loadAnimation = function (animname, id
function AnimatedGameObject(layer, id) { 
arrow keys (see Figure 25-2). If the character walks off the visible screen, it doesn’t just “stop” off- 
GameObjectGrid. prototype. getTileType = function (x, y) { 
Figure 26-1. Different types of collisions: circle-circle, circle-rectangle
Math. clamp = function (value, min
is often not enough. Figure 26-2 shows an example of two sprites whose bounding boxes overlap, 
SpriteSheet. prototype. getAlpha = function (x, y
SpriteGameObject. prototype. getAlpha = function (x, y) { 
the intersection depth in both x and y directions for two Rectangle objects. In this example, these 
this means you have to move the characterto the left to correct this intersection. Therefore, you 
return thex intersection depth as a negative value, which can be calculated as -minDistance.x - 
Now that you’ve calculated the intersection depth, there are two ways to solve this collision: move 
"###### 


.w 


#### 


w. 

.w 

###### 


}); 


A lowercase r means the rocket should fly from left to right, and an uppercase R means it should fly 
from right to left (see also Table 24-1). 


Creating and Resetting the Rocket 

Let’s create a Rocket class that represents this particular kind of enemy. You inherit from the 
AnimatedGameObject class, because the rocket is animated. In the constructor, you initialize the 
Rocket object. You need to load the rocket animation and play it, and then you need to check 
whether the animation should be mirrored. Because the animation has the rocket moving to the right, 
you need to mirror it if the rocket moves to the left. You also store the starting position of the rocket 
so you can place it back at that position when it moves out of the screen. Finally, you need a variable 
spawnTime to keep track of when the rocket should appear. This is the complete constructor: 

function Rocket(moveToLeft, startPosition, layer, id) { 
powerupjs. AnimatedGameObject. call(this, layer, id); 
this. spawnTime = 0; 
this. startPosition = startPosition; 
this. mirror = moveToLeft; 

this. loadAnimation(sprites. rocket, default", true
function UnpredictableEnemy(layer, id) { 
function PlayerFollowingEnemy(layer, id) { 
Yet another enemy you can add to the game is a sneezing turtle (see Figure 27-3). Why a turtle, you 
states (see Figure 27-4). Sparky is a very dangerous, electricity-loving enemy. He hangs quietly in the 
Level. prototype. loadTurtleTile = function (x, y) { 
provide for a nice visual effect (see Figure 28-1). Finally, you play the die animation. The complete 
alpha and beta testing. Alpha testing is done internally by a group of people, often the developers 
intersection depth, 351 
Dog function, 104 
Boolean type, 76 
boolean value, 73 
event handler function, 47 
sort function, 198 
mainLoop function, 22 
start function, 22 
update and draw functions, 22 
functions, 24 
update and draw functions, 26 
Methods and functions, 85 
mathematical function, 86 
handleMouseMove function, 177 
reset function, 178 
tangent function, 65 
event-handler function, 58 
handleMouseMove function, 59 
move function, 58 
methods and functions, 85 
mathematical function, 86 
anonymous function, 35 
event-handler functions, 181 
handleTouchEnd function, 182 
handleTouchMove function, 183 
handleTouchStart function, 181 
This work is subject to copyright. All rights are reserved by the Publisher, whether the whole or part of the material is 
introduces and integrates core game engine functional components including game loop, keyboard input
Chapters 5 to 7 present basic functionality of a game engine: drawing system, behavior and interactions
inheritance and functions as first-class objects, and is easy to learn with well-established user and developer 
audio cue and background music functionalities are based on the HTML5 AudioContext interface, and yet 
• As shown in Figure 1-4, enter the name and location of the project
instructed by the code in the index . html file. As illustrated in Figure 2-3, this project looks identical as the 
6. Define the initializeGLQ function to retrieve GLCanvas, bind the drawing area 
Note All public function names begin with a lowercase letter, as in initializeGLQ. 
With all the JavaScript functionality defined in the WebGL . j s file, you now need to load this file and invoke 
the doGLDrawQ function from your web page, the index.html file. 
4. Execute the doGLDrawQ function after WebGL. js is loaded, 
With the functionality of loading vertex positions defined, you are now ready to define and load the 
implement the functionality to compile, link
function loadAndCompileShader(id, shaderType) { 
function initSimpleShader(vertexShaderID, fragmentShaderlD) { 
With the vertex data and shaders functionality defined, you can now execute the following steps to draw with 
modules as files containing global functions and variables. In software engineering, this solution process is 
referred to as functional decomposition, and the implementation is referred to as procedural programming. 
manageability and expandability for subsequent projects. As illustrated in Figure 2-7, when running
// Contains the functions and variables that will be accessible, 
function immediately, and thus only a single instance of gEngine . Core will 
Core. initializeWebGLQ function. In this way, after the InitialzeWebGLQ function
functionality, the global variables and functions do not lend themselves well to modification and code reuse. 
function SimpleShader(vertexShaderID, fragmentShaderlD) { 
Notice that this constructor is similar to the initSimpleShader ( ) function from the previous project, 
SimpleShader. prototype. _loadAndCompileShader = functioned, shaderType) { 
Note Functions that are meant to be private will have names that begin with an underscore (_), as in 
simply a library that provides functionality for creating games. For now, your game engine consists of three 
you will continue to add source files and functionality to, which eventually will become a complete and 
implement core functionality of the engine, and gained experience with abstracting the SimpleShader object 
This project demonstrates howto separate the GLSL shaders into separate files. As illustrated in Figure 2-9, 
SimpleShader. prototype. JLoadAndCompileShader = function(filePath, shaderType) 
The gl . uniform4f v( ) function copies four floating-point values from pixelColor to the mPixelColor, 
Although the ability to draw is one of the most fundamental functionality of a game engine, the details of 
functions of the white and red squares. Although both of the squares are drawn, 
Figure 3-2. Translating a square by T(tx,ty) 
Figure 3-3. Scaling a square by S(sx,sy) 
• New functions for each type, based on request. 
2. In the mainQ function, apply the uModelTransform to each vertex position in the 
Edit Renderable. js to modify the draw() function to receive a transform operator as a parameter, and after 
activating the proper GLSL shader with the mShader .activateShaderQ function, send this operator into the 
Transform. prototype. setPosition = function(xPos,yPos) { this.setXPos(xPos); 
Transform. prototype. setSize = function(width, height) { this.setWidth(width); 
4. Add a function to compute and return the concatenated transform operator, TRS. 
Figure 3-8, all projects in this book follow the Cartesian coordinate system where positions are defined 
illustrated in Figure 3-9, in that case
As illustrated in Figure 3-10, with a WC instead of the fixed NDC space
function are signed quantities; in other words, the distance to the right/up is positive
Recall that shaders are activated in the Renderable object’s draw( ) function; as such, Renderable must also 
Renderable. prototype. draw = function (pixelColor, vpMatrix) { 
As illustrated in Figure 3-13, for testing purposes
As illustrated in Figure 3-14, the WC will be drawn into a viewport with the lower-left corner located 
function Camera (wcCenter, wcWidth
Camera. prototype. setWCCenter = function(xPos, yPos) { 
while continuing to expand the game engine functionality. In this chapter, the two important mechanisms
which to skip. Since correct input and updates are required for a game to function as designed, it is often 
implemented with the requestAnimationFrameQ function call at step A, where the _run Loop () function is 
b. The syntax ofthe function passed to requestAnimationFrameQ, 
This function initializes the game loop internal state by setting mMyGame, initializing the frame time
// The update function, updates the application state. Make sure to _N0T_ draw 
Recall that the updateQ function is called at about 60 FPS, and each time the following happens: 
// This is the draw function, make sure to setup proper drawing environment
parameters to these functions are the rate of change; or, the speed
function will be called multiples times without any update ( ) function calls. This way, the game loop can end 
function. In MyGame . j s, within the MyGame constructor
this project running in Figure 4-3. This project appears to be identical to the previous project, with the 
var asyncLoadCompleted = function(rName, loadedAsset) { 
var loadTextFile= function(fileName, fileType
function, the contents to these files can simply be retrieved via the ResourceMap. 
SimpleShader. prototype. _compileShader = -function(filePath, shaderType) { 
functions, as follows: 
function SimpleShader(vertexShaderPath, fragmentShaderPath) { 
var initializeEngineCore = function(htmlCanvasID, myGame) { 
2. Define the startSceneQ function to initialize myGame and start the game loop, 
startScene( ) function after the SimpleShader object is created. In this way, MyGame initialization will be 
of function calls to create a playable game level. With a game level defined in a scene file, the game engine 
Instead of hard-coding the creation of all objects to a game in the initializeQ function, the information 
The loadScene () function initiates the asynchronous XML text file loading, while the unloadScene () 
3. Change the initialize() function to create objects based on the scene parser, 
With the load and unload functionality defined in MyGame, the important task for the game engine is to 
MyGame-loading operations before calling the game initializeQ function, and then it begins the game 
to the game engine must define these functions: constructor, initialize ()
var inheritPrototype = function(subClass, superclass) { 
be called. With the previous stopQ function, the unloading can be implemented 
d. At the end of the unloadScene () function, the next scene
and passed to the EngineCore. startScene () function, which will load
7. Add the functionality to start, stop
function before the actual asynchronous load command is issued. This way, if a client issues more than one 
calling this function when it detects a target resource has already been loaded. For example, earlier you saw 
Notice that by checking the return value of the unloadAsset ( ) function, a client can verify how many 
5. In the update ( ) function, cue the players when the left and right arrow keys are 
facilitate this mapping process. As depicted in Figure 5-1, the Texture Coordinate System is a normalized 
Figure 5-1 the horizontal axis is labeled as the u-axis, and the vertical axis is labeled as the v-axis. Oftentimes 
positions. As illustrated in Figure 5-2, in addition to defining the value of the xy position for each of the 
settings shown in Figure 5-2, you know that the midpoint along the top edge of the square maps to a uv of 
game engine clients. As illustrated in Figure 5-4, the horizontal dotted line separates the game engine from 
Although not depicted explicitly in Figure 5-4, there is only one instance of the Shader object created in the 
illustrated in Figure 5-5, both the GLSL TextureVS/FS shaders and TextureShader/TextureRenderable 
to the fragment shader. As explained earlier and illustrated in Figure 5-2, 
As illustrated in Figure 5-2, the textureCoordinates variable defines the uv values for the 
function TextureShader(vertexShaderPath, fragmentShaderPath) { 
TextureShader. prototype. activateShader = function(pixelColor, vpMatrix) { 
function TextureInfo(name, w
var _processLoadedImage = function(textureName, image) { 
texImage2D() function stores the image into the WebGL texture buffer, and generateMipmapQ computes a 
tinting effect can be observed in the right image of Figure 5-3. In addition, notice that both images specified 
objects by calling their corresponding draw( ) functions, while the modification 
When running the example for this project in the Chapter5/5.1. Texture Shaders folder, once again 
The left column of Figure 5-6 identifies the main game engine states, from WebGL initialization to 
13 elements of Figure 5-7 were stored as separate images, 13 slow file system accesses would be required to 
As depicted in Figure 5-5, one of the main advantages and shortcomings of the texture support defined 
allow the support for working with sprite sheet elements. As illustrated in Figure 5-10, the example from 
subregions of an image. To support this functionality, you will implement the SpriteShader to define its own 
texture coordinates. Since this new shader extends the functionality of TextureShader, it is convenient to 
function SpriteShader(vertexShaderPath, fragmentShaderPath) { 
function, the DYNAMIC_DRAW option is specified. This is compared with the STATIC_DRAW option used in 
SpriteShader. prototype. activateShader = function(pixelColor, vpMatrix) { 
SpriteRenderable. prototype. setElementUVCoordinate = function(left, right
SpriteRenderable. prototype. setElementPixelPositions = function(left, right
SpriteRenderable. prototype. draw = function(pixelColor, vpMatrix) { 
changing and controlling of uv coordinate on an object. For proper testing of the added functionality, you 
2. In the initializeQ function, do the following: 
Figure 5-12 shows that to achieve the animated effect of an object retracting its spikes toward the right, 
as depicted by the top row of Figure 5-11, you map the elements from the left to the right in the sequence 1
8. Implement functions to change animation speed, either directly or by an offset. 
Each time the updateAnimationQ function is called, the mCurrentTick counter is incremented
2. In the initializeQ function, add code to create and initialize the 
setSpriteSequence ( ) function to identify the elements involved in the animation including the location, 
Segment7-96 . png, system-default-font . fnt
var getCharlnfo = function(fontName, aChar) { 
uv coordinate and appearance information. With this functionality, the drawing of a text string can be 
function SimpleShader(vertexShaderPath, fragmentShaderPath) { 
3. In the initializeQ function, define a convenient WC and initialize the 
5. In the update () function, stop the Came Loop to trigger the call to the 
6. In the unloadSceneQ function, callgEngine_Core to clean up all system default 
4. Define a private _initText() function to set the color, location
MyGame. prototype. _InitText = function(font, posX
SimpleShader. prototype. activateShader = function (pixelColor, aCamera) { 
The goals are to ensure proper functioning of the new GameObject class, to demonstrate customization of 
in the initializeQ function of the MyGame level. In this way, the DyePack object hides specific geometric 
function Minion(spriteTexture, atY) { 
2. Add a function to update the sprite animation, support the simple right-to-left 
own updateQ function, the logic in the MyGame level’s update () function can focus on object-level controls 
Note JavaScript trigonometric functions, including the Math. sin () and Math. cos () functions
You can see this concept reinforced in Figure 6-7. Moreover, it is also important to recognize that if 
Figure 6-7. The angle between two vectors, which can be found through the dot product 
vec2. rotate = function(out, a
3. Implement a function to rotate the front direction toward a position, p. 
GameObject. prototype. rotateObjPointTo = function (p, rate) { 
Notice that if the mCurrentFrontDir is modified by the rotateObjPointToQ function, then this 
update ( ) function will move the object toward the target position p, and the object will behave as though it 
In the update( ) function, the switch statement uses mMode to determine how to update the Brain 
rotateObjPointToQ function call. While in the H mode, the Brain object update () function is called for 
function BoundingBox(centerPos, w
BoundingBox. prototype. setBounds = function (centerPos, w
4. Define a function to determine whether a given position, (x
BoundingBox. prototype. containsPoint = function (x, y) { 
Camera.prototype.collideWCBound = function (aXform, zone) { 
object-object and object-camera intersections. Once again, with the exception of the update ( ) function
function TextureInfo(name, w
object. By separating complex implementations of related functionality into separate files, the readability of 
2. Define a function to return the alpha value, or the transparency
TextureRenderable. prototype. _pixelAlphaValue = function (x, y) { 
3. Define a function to compute the WC position (returnWCPos) of a given pixel (i, j). 
TextureRenderable. prototype. _indexToWCPosition = function (returnWCPos, i
TextureRenderable. prototype. _wcPositionToIndex = function (returnlndex, wcPos) { 
TextureRenderable. prototype. pixelTouches = function(other, wcTouchPos) { 
GameObject. prototype. pixelTouches = function (otherObj, wcTouchPos) { 
As illustrated in Figure 6-15, the testing of per-pixel collision is rather straightforward
fragment is the collision testing in the update( ) function, as shown here: 
You cannot rely on this function to compute the actual collision position. Lastly, try switching to calling the 
TextureRenderable. prototype. _indexToWCPosition = function (returnWCPos, i
TextureRenderable. prototype. _wcPositionToIndex = function (returnlndex, wcPos
TextureRenderable. prototype. pixelTouches = function(other, wcTouchPos) { 
actually invokes the much more expensive per-pixel collision computation. As illustrated in Figure 6-14, 
GameObject. prototype. pixelTouches = function (otherObj, wcTouchPos) { 
SpriteRenderable. prototype. setElementUVCoordinate = function (left, right
SpriteRenderable. prototype. setElementPixelPositions = function (left, right
TextureRenderable. prototype. _pixelAlphaValue = function (x, y) { 
Chapters 1-5 introduced foundation techniques for drawing, moving
game using only the elements from Chapters 1-5, things get much more interesting when you can integrate 
To accommodate the increase in functionality and the complexity of the Camera object, you will create a 
Camera. prototype. clampAtBoundary = function (aXform, zone) { 
2. Edit this file to define functions to pan, or move
Camera. prototype. panBy = function (dx, dy) { 
Camera. prototype. panTo = function (cx, cy) { 
Camera. prototype. panWith = function (aXform, zone) { 
The panWidth () function is complementary to the clampAt Boundary () function, where instead of 
As in the case of the clampAtBoundary ( ) function, the camera will not be changed if the aXform bounds are 
Camera. prototype. zoomTowards = function (pos, zoom) { 
The zoomBy () function zooms with respect to the center of the camera, and the zoomTowards () function 
There are two important functionality to be tested: panning and zooming. Once again, with the exception of 
the update () function, the majority of the code in the MyGame. js file is similar to the previous projects and 
object; notice that because of the clampAtBoundaryQ function call, the Portal object will in turn be pushed 
It is now possible to manipulate the camera based on high-level functions such as pan or zoom. However, 
Figure 7-4 shows that there is more than one way to interpolate values over time. For example, linear 
on the given exponential function would move the camera position rapidly at the beginning, with the motion 
function Interpolate(value, cycles
Interpolate. prototype. configlnterpolation = function (stiffness, duration) { 
function InterpolateVec2(value, cycle
The vec2.1erp() function, defined in the gl-matrix. js file
function CameraState(center, width) { 
CameraState. prototype. configlnterpolation = function (stiffness, duration) { 
function Camera (wcCenter, wcWidth
Camera. prototype. configlnterpolation = function (stiffness, duration) { 
Camera. prototype. panBy = function (dx, dy) { 
Similar to the panBy() function, the rest of the changes in the Camera_Manipulation. js file are trivial 
illustrated in Figure 7-6, damped simple harmonic motions
of trigonometric functions, can be used to describe these types of displacements. However
function ShakePosition(xDelta, yDelta
period of a cosine function. The shakeDuration parameter defines how long to shake, in units of game 
function CameraShake(state, xDelta
function Camera (wcCenter, wcl/ddth
Camera. prototype. shake = function (xDelta, yDelta
function Camera (wcCenter, wcl/ddth
Camera. prototype. setViewport = function (viewportArray, bound) { 
area to be cleared and the gl . viewport ( ) function to identify the target area for drawing. Previously, the 
MyGame object draw( ) function, the mBrainCam is drawn last. The last drawn always appears on the top. You 
The drawing on the left of Figure 7-10 shows an example of a mouse position located at (mouseX, 
var initializeEngineCore = function (htmlCanvasID, myGame) { 
4. Define the functions to transform the mouse position into the WC space, as 
Figure 7-13. The image represents a single game screen divided into three areas, a playable area on the left 
Figure 7-15. As the player moves the hero character around the game screen," the shapes “activate"" with a "
just from looking at Figures 7-15 and 7-16? If you’re feeling stuck, Figure 7-17 should provide enough 
of the lock to glow. Figure 7-16, however
function, as shown in the following code: 
3. In the activateShader ( ) function, pass the ambient color and intensity values 
SimpleShader. prototype. activateShader = function(pixelColor, aCamera) { 
// This is the draw function, make sure to setup proper drawing environment
// The update function, updates the application state. Make sure to _N0T_ draw 
function LightShader(vertexShaderPath, fragmentShaderPath) { 
the new functionality of turning the light on and off, as shown here. Notice that 
LightShader. prototype. activateShader = function (pixelColor, aCamera) { 
2. Now instantiate a new light shader in the_createShaders() function, as shown 
3. In the initializeQ function, add the following code to properly load the file: 
4. In the cleanup ( ) function, add the following line of code to unload the file when 
The Camera utility functions, such as wcPosToPixel ( ) 
function Camera (wcCenter, wcWidth
Camera. prototype. wcPosToPixel = function(p) { // p is a vec3, fake Z 
Figure 8-2, this is the illuminated circle of the point light on the z = 0 plane where your objects are located. 
(smaller intersection area) and increases in size. Alternatively, you can press the C or V key to increase 
with the modification of replacing the single light source with an array of lights. As illustrated in Figure 8-5, 
function ShaderLightAtIndex(shader, index) { 
ShaderLightAtlndex. prototype. _setShaderReferences = function(aLightShader, index) 
ShaderLightAtlndex. prototype. loadToShader = function (aCamera, aLight) { 
function LightShader(vertexShaderPath, fragmentShaderPath) { 
LightShader. prototype. activateShader = function (pixelColor, aCamera) { 
As illustrated by the left drawing in Figure 8-7, a surface normal vector
surfaces. Figure 8-8 shows a light source illuminating three diffuse surface element positions, A
left image of Figure 8-10 is a typical color texture image, and the two right images are zoomed images of the 
image of Figure 8-10) and a corresponding normal texture image where the RGB channels record the x, y
Figure 8-10 (the positions n , n 2 
3. Modify the Light Effect () function to receive a normal vector parameter, N. This 
advantage of the functionality related to light sources and define a variable, 
function IllumShader(vertexShaderPath, fragmentShaderPath) { 
IllumShader. prototype. activateShader = function(pixelColor, aCamera) { 
function TextureShader(vertexShaderPath, fragmentShaderPath) { 
2. AddalinetotheactivateShaderQ function to bind the texture to unit 0, as 
TextureShader. prototype. activateShader = function(pixelColor, aCamera) { 
function IllumRenderable(myTexture, myNormalMap) { 
function Hero(spriteTexture, normalMap) { 
function Minion(spriteTexture, normalMap
direction is not perfectly aligned with the reflection direction of the light source. As illustrated in Figure 8-14, 
the cosine function when the separation between V and It increases to 90° or when a=90°. The power n, 
faster the cosine function decreases as a increases, the faster the specular highlight drops off
vector for every shaded pixel can be significant. As illustrated in Figure 8-16, H is the halfway vector
As illustrated in Figure 8-17, the variation of the Phong illumination model that you will implement 
C L in Figure 8-17, are factored out and multiplied to the sum of diffuse and 
property in Figure 8-17. Notice that ambient, diffuse
function IllumShader(vertexShaderPath, fragmentShaderPath) { 
IllumShader. prototype. activateShader = function (pixelColor, aCamera) { 
IllumShader. prototype. setMaterialAndCameraPos = function(m, p) { 
function IllumRenderable(myTexture, myNormalMap) { 
3. In step B4 of the setupViewProjectionQ function, call the wcPosToPixelQ 
A new function, _selectCharacter ( )
A spotlight models a desk lamp with a cone-shape lampshade. As illustrated in Figure 8-20, a spotlight 
function to obtain and save the references to the newly added light properties, as 
ShaderLightAtlndex. prototype. _setShaderReferences = function (aLightShader, index) { 
ShaderLightAtlndex. prototype. loadToShader = function (aCamera, aLight) { 
To properly simulate and render the shadow in Figure 8-23, as illustrated in Figure 8-24
• Shadow caster. This is the object that causes the shadow. In the Figure 8-23 example, 
the shadow receiver because of the occlusion of light. In the Figure 8-23 example, the 
Figure 8-24. The three participating elements of shadow simulation: the caster, the caster geometry
caster) is rendered as usual. As illustrated in Figure 8-25, the challenging problem of this simple simulation 
pixels that are switched on. Figure 8-26 uses an example to illustrate this functionality. In this example, the 
In the Figure 8-23 example, the Hero object is grouped as the shadow caster of the minion shadow receiver. 
correspond to the shadow receiver; this is similar to switching on the white triangle in Figure 8-26, enabling 
function ShadowCasterShader(vertexShaderPath, fragmentShaderPath) { 
ShadowCasterShader. prototype. activateShader = function (pixelColor, aCamera) { 
1. Edit the Engine_Core. js file. In the_initializeWebGL() function, add the 
2. Modify the clearCanvasQ function. In addition to clearing the canvas, the 
function ShadowCaster (shadowCaster, shadowReceiver) { 
The draw( ) function first saves the current transform, shader
Figure 8-28, there are two cases to consider: parallel projection for a directional 
SpriteShader. prototype. setMaterialAndCameraPos = function(m, p) { }; 
this. The _setupShadow() function is called at the end ofthe MyGame initialize() function, when all 
Figure 8-29. Playdead and Double Eleven’s Limbo, a 2D side-scrolling game making clever use of background 
Figure 8-30. The simple game mechanic project, without lighting. Recall that the player controls the circle 
Figure 8-32. The player is able to directly activate the objects as in the first iteration of the mechanic, but the 
Figure 8-34. With the flashlight revealing the hidden symbol, the player can now activate the object (#2)
Figure 8-35. The player activates the second of the three top sections in the correct order (#4), and the progress 
functionality of the component, you increase the game engine’s ability to create a diverse set of 2D games. 
once for each update ( ) function call, and the dt quantity can simply be the fixed time step. This means that the 
Figure 9-2 shows two objects colliding after a time step. Before the time step, the objects are not touching. 
within one update( ) function call, after the movement integration approximation
functionality that is common to the two bounding shapes. Note that a new class, RigidRectangle
RigidShape. prototype. setPosition = function(x, y ) { 
function RigidRectangle(xform, w
function RigidCircle(xform, r) { 
functionality to detect collisions between two rectangles, between two circles
rectangle and a circle. As illustrated in Figure 9-4, there are three distinct cases 
beginning of the function. For the third and more general case, Figure 9-5 uses two circles with centers 
RigidShape. prototype. collidedRectCirc = function(rectlShape, circ2Shape) { 
RigidShape. prototype. clamp = function (value, min
RigidRectangle. prototype. collidedRectRect = functional, r2) { 
avoid the expensive square root function when computing a vector magnitude, 
RigidCircle. prototype. collidedCircCirc = functional, c2) { 
function Hero(spriteTexture, atX
function Minion(spriteTexture, atX
MyGame . j s file and implement the usual necessary functions of the constructor: initialize ( ), update ( )
With a functioning collision detection system, you can now begin implementing collision resolution and 
and circle collide. Figure 9-5 illustrates the general strategy of computing the collision normal, normal
side of the rectangle. As illustrated in Figure 9-7, the only slight complication is when the circle center is 
in the case of Figure 9-7, the norma 1 vector must be reversed to represent collision normal. 
RigidShape. prototype. collidedRectCirc = function (rectlShape, circ2Shape
RigidRectangle. prototype. collidedRectRect = functional, r2
RigidRectangle. prototype. collided = function(otherShape, collisionlnfo) { 
RigidCircle. prototype. collidedCircCirc = functional, c2
RigidCircle. prototype. collided = function(otherShape, collisionlnfo) { 
var positionalCorrection = function (si, s2
Figure 9-8, fiction is simulated by applying a deceleration in the tangent 
var _applyFriction = function(n, v
Figure 9-9 depicts the details of step F. Si and S2 are the two colliding RigidShapes, where the normal 
var resolveCollision = function (si, s2
var processObjObj = function(objl, obj2) { 
function is 0(1V), where AT is the size of the RigidShape set. It is important to be 
var processObjSet = function(obj, set) { 
function is 0{NM), where TV and M are the sizes of the respective GameObjectSet. 
var processSetSet = function(setl, set2) { 
3. Implement the main function to accumulate colors aggressively, 
2. Now instantiate a new particle shader in the_createShaders() function, as 
3. In the initialize() function, add the following code to properly load the file: 
4. In the cleanup ( ) function, add the following line of code to unload the file when 
function ParticleGameObject(texture, atX
var resolveCirclePos = function (circShape, particle) { 
var resolveRectPos = function (rectShape, particle) { 
var processObjSet = function(obj, pSet) { 
var processSetSet = function(objSet, pSet) { 
MyGame. prototype. _createParticle = function(atX, atY) { 
function ParticleEmitter(pos, num
mParticleCreator ( ) callback function. With this design, there would be no 
ParticleGameObjectSet. prototype. addEmitterAt = function (p, n
var func = function(x, y) { this.createParticle.call(this
Figure 9-14. The game screen now shows just one instance of each part of the lock (top, middle
Figure 9-14 is the beginning of an interesting (although still basic) platformer puzzle, but you’ve now 
Figure 10-2 shows an example of the parallax of a shaded circle. When viewed from the middle eye position, 
the camera WC bounds need to be drawn. This is illustrated in Figure 10-3. In this example, the background 
implementing parallax scrolling. Figure 10-7 illustrates, with a top view
the inverse of the camera movement. For example, the stationary Hero object is displaced from the center 
function ParallaxGameObject(renderableObj, scale
2. Define the getter and setter functions for mParallaxScale, and notice that 
• Actor layer: The default distance layer in Figure 10-5, where all game objects reside 
7. Define functions to add to, remove from
var addToLayer = function(layerEnum, obj) { 
var removeFromLayer = function(layerEnum, obj) { 
8. Define functions to draw a specific layer or all the layers, from the furthest to the 
var drawLayer = function(layerEnum, aCamera) { 
var moveToLayerFront = function (layerEnum, obj) { 
var initializeEngineCore = function (htmlCanvasID, myGame) { 
Define update functions for objects that may appear as members in the LayerManager layers: Renderable, 
being crowded with mundane game object updateQ function calls, the MyGame updateQ function can now 
manipulation functionality that is smoothly interpolated. Keyboard/mouse input is supported, and now 
from earliest conception through functional prototype, bringing together and extending the work done in 
setting. Figure 11-2 shows a futuristic industrial environment design, a hero character wearing a space suit
with some of the concept elements. Figure 11-3 introduces a humanoid hero character, platforms that feel a 
By implementing the design as described in Figure 11-3, you’ve already accomplished some impressive 
Figure 1 1 -5. Expanding the layout to use the additional screen real estate, the diagram represents the entire 
tune. The scale of the hero character in Figure 11-5 has been slightly reduced, for example
blocking out the game flow. Figure 11-5 adds one additional design element, a platform that moves left to 
same numbering methodology shown in Figure 11-1. When you’ re finished mapping out the sequence, 
Did your sequence match Figure 11-6, or did you have extra steps? There are many potential paths 
Returning to the current design as represented in Figure 11-8, you now have all the elements required to 
mechanics they design function and how the controls work, and it’s easy (and common) to lose awareness 
Game UI design is important not just from a functionality perspective (in-game menus, tutorials
It’s a bit of a shortcut to begin the mechanic exploration with the diagram in Figure 11-10, but 
addAsShadowCaster() function, 435 
functionality, 279 
mPublic() function list, 278 
update function, 280 
initializeQ function, 123 
isAssetLoaded() function, 121 
isKeyClicked() function, 125 
isKeyPressed() function, 125 
loadAudio() function, 119
loadScene() function, 122 
playACue() function, 120 
unloadAsset() function, 122 
update() function, 123 
clampAtBoundaryO function, 236
convenient functions, 234 
functionality, 240 
panTo() function, 239 
panWidth() function, 237 
function, 233 
update() function, 238 
utility functions, 266 
zoomByO function, 238 
zoom functions, 234 
zoomTowardsO function, 238 
setUpViewProjection() function, 291 
utility functions, 290 
Math.randomO function, 250 
mCamera.shake() function, 253 
nextDampedHarmonic() function, 250 
setting functions, 251 
setUpViewProjection() function, 252 
trigonometric functions, 247 
update() function, 253 
clampO function, 376 
collide() function, 378 
collided() function, 377
collidedCircCirc() function, 378
collidedRectCirc() function, 375 
collidedRectRect() function, 377
containsPos() function, 377-378 
activateShader() function, 309 
activateTexture() function, 313 
cleanUpO function, 312 
createShaders() function, 312 
initialize() function, 312 
LightEffectQ function, 307 
public function, 312 
draw() function, 373-374
initSquareBuffer() function, 25 
initializeEngineCore() function, 102 
clearCanvas() function, 346 
initializeWebGL() function, 345 
cleanUpO function, 178 
draw() function, 175 
getCharInfo() function, 176 
initialize() function, 177 
initText() function, 182 
loadScene() function, 181 
function, 176 
setFont() function, 183 
setTextHeight() function, 177 
storeLoadedFont() function, 173 
unloadScene() function, 181 
"blockout-plus” stage, 449 
bonus content, 454-455 
challenge, 447 
chiaroscuro techniques, 357 
contextual images, 444 
dark environment, 358 
development teams, 362 
early-level prototype, 449 
elevator” platform", 442 
draw() functions, 83 
incSizeBy() functions, 85 
initialize() function, 83 
requestAnimationFrame() function, 82 
runLoop() function, 82
start() function, 83 
update() function, 79
initialize() and update() functions, 188 
activateShader() function, 137 
texture2D() function, 135 
initialize() function, 437 
initializeEngineCore() function, 436 
interpolateValue() function, 243 
linear and exponential functions, 240 
MyGame update() function, 246 
panBy() function, 246 
vec2.1erp() function, 244 
clearCanvas() function, 22 
doGLDraw() function, 22 
initializeGL() function, 21 
functionality, 86 
initializeWebGL() function, 91 
MyGame.prototype.update() function, 92 
runLoop() function, 91 
update() function, 90 
accessor function, 289 
activateShader() function, 287 
cleanUpQ function, 290 
createShaders() function, 289 
initialize() function, 289 
main() function, 285 
space functionality, 288 
Math.ceil() function, 424 
initialize() function, 263 
intializeEngineCore() function, 262 
main functionality, 265 
update() function, 264-265 
draw() function, 258-259 
getViewport() function, 256 
gl.scissor() function, 256 
gl.viewport() function, 256 
initialize() function, 257 
mBrainCam.conflglnterpolationO function, 259 
setUpViewProjection() function, 256 
setViewport() function, 255 
update() functions, 257 
activateShader() function, 300 
initialize function, 301 
loadToShader() function, 299 
quadratic functions, 293 
setLight() function, 300 
MyGame initialize() function, 425 
MyGame._physicsSimulation() function, 396 
processObjSet() function, 394 
processSetSet() function, 394 
resolveCollision() function, 391 
resolveRectPos() function, 405
asyncLoadCompletedO function, 96 
callbackFunction, 99 
createShaders() function, 100 
function, 102 
initialize() function, 100 
startScene() function, 102 
RigidShape. setMess() function, 396 
rigidType() function, 373-374 
EngineCore.startScene() function, 114 
GameLoop.stopQ function, 110
inheritPrototype() function, 112-113 
initialize() function, 115 
loadScene() function, 114 
runLoop() function, 112 
unloadScene() function, 112 
update() function, 114 
setMass() function, 384 
activateTexture() function, 140 
blendFunc() function, 141 
createTexture() function, 143 
draw() function, 140 
initialize() function, 136 
loadScene() function, 150 
pixelStorei() function, 141 
processLoadedImage() function, 142 
retrieveAsset() function, 144 
texImage2D() function, 143 
texParameteri() function, 144 
unloadTexture() function, 142 
function, 348 
draw() function, 347 
activateShader() function, 344 
cloneTo() function, 353 
DistanceDropOff() functions, 342 
drawCamera() function, 355 
functionality, 338 
functional modules, 273 
initialize() function, 354 
LightStrength() function, 342 
main() function, 342 
setupShadow() function, 354 
setUpViewProjectionO function, 353 
ShadedResult() function, 342 
swapShader() function, 352 
draw() function, 351 
initSquareBuffer() function, 35 
activateShader() function, 324 
DiffuseResults() functions, 321 
draw() function, 325 
initialize() function, 326 
LightAttenuation() function, 320 
main() function, 322 
PerRenderCache function, 325 
setMaterialAndCameraPos() function, 324 
setUpViewProjection() function, 326 
ShadedResultO function, 321 
wcPosToPixel() function, 326 
AngularDropOff() function, 331 
loadToShaderO function, 335 
setShaderReferences() function, 334 
ShadedResults() function, 333 
smoothstepO function, 332 
wcDirToPixel() function, 336 
GameLoop runLoopQ function, 168 
initAnimationO function, 165 
initialize() function, 168 
setSpriteSequence() function, 167
updateAnimation() function, 168 
activateShader() function, 155 
draw() function, 157 
getGLTexCoordRef() function, 153 
initialize() function, 159 
setElementPixelPositions() functions, 159 
draw() function, 149 
initialize() functions, 146
unloadScene() function, 147 
update() function, 147
_positionalCorrection() function, 390 
refPosUpdateQ function, 430 
unloadScene() function, 437 
update() function, 402 
vec2.scaleAndAdd() function, 430 
clearCanvas() function, 29 
initializeGL() function, 29 
functional interface, 103 
initialize() function, 105 
MyGame.unloadScene() function, 110 
Number() function, 107 
startLoop() function, 110 
startScene() function, 109 
unloadScene() function, 108 
Function, Call a Function! 105 
The Monty Hall Paradox, or What’s Behind the Door? 351 
Monty Hall paradox, among other puzzles. 
using math functions such as sqrt (square root), you’ll need to switch on 
pensable to beginners — are treated just like user-defined functions, which 
C++ (the main exception being calls to void functions) produce a value, 
Programmers use Boolean algebra, named for the nineteenth-century 
operators are intrinsic to the language itself. But to use math functions, you 
This #include directive brings in declarations for all the math functions, so 
function prototypes in Chapter 5, “Functions: Many Are Called.”) C++ supports 
many math functions, such as the trig and exponential functions
most math functions, this function accepts and returns a floating-point result. 
I You can use the C++ logical (Boolean) operators “and” (&&), “or” (||)
contained 1-2-3 or 9-9-9. Randomness, we reason
tion functions. The second line, including <ctime>
You should be able to see what’s going on here. A Boolean variable, do_more
tions for functions you’ll be calling. The call to srand, setting a random seed
must be made from within a function, such as main
continues or exits depending on the value of a Boolean variable, do_more: 
mers sometimes fail to understand. When testing a Boolean variable, it isn’t 
false precisely because it’s a Boolean value! Therefore, this test has the effect of 
converting a Boolean value into the same Boolean value, which is pointless. 
expression 49.0 / 10.0), the answer would be 4.9
Boolean (bool type), which is then set to true or false as appropriate. Remem- 
supports the srand and rand functions, and <ctime>
able i becomes local — not just to the function, but to the loop itself — so changes 
expression) doesn’t even have to be a logical expression such as i < n, although 
you write the function just once, and then execute it whenever you want to per- 
Once a function is written, you can call it any number of times. By calling 
a function, you transfer execution of the program to the function-definition 
execution to avg. (The values of a and b are passed to x and y, respectively.) 
The function runs until 3) it encounters return, which causes execution to 
returns (what it passes back). If the function does not return a value, use void. 
Once a function is defined, it can be used — or rather
A function call is an expression: as long as it returns a value other than void, 
When the function is called, the values specified in the function call 
function, as arguments. When the function returns
Another call to the function might pass different values — in this case, 6 and 26. 
It demonstrates all three steps: declare a function, define it
// Function must be declared before being used, 
3 Call the function from within another function (in this case, main) . 
rule is that functions must be declared before being called. (They do not, how- 
The function definition for the avg function is extremely simple, contain- 
Function, Call a Function! 
A program can have any number of functions. For example, you could have two 
functions in addition to main, as in the following version of the program. Lines 
ters 2 and 3 but places the relevant C++ statements into their own function, 
// Function must be declared before being used, 
information at the beginning of the program ( prototyping the function), 2) 
defining the function somewhere in the program, and 3) calling the function. 
Another difference is that instead of setting a Boolean variable, is_prime
prime-number test. Note that this function returns a true/false value, and so 
two functions mind their own data, as it were
have no effect outside the function; they are input-only data. The return value, 
that for infinite loops: if a function calls itself, when does it ever stop? The prob- 
There is a literal stack of calls made to the function, each with a different 
recursion. A recursive function, that is
Rerun the function onn / i, and 
// This function prints all the divisors of n, 
sive function. A triangle number is the sum of all whole numbers from 1 to n, 
All that main does in this case is to prompt for two input variables a and b, call 
the greatest-common-factor function (gcf), and print results: 
As for the gcf function, it implements the algorithm discussed earlier: 
> If a number is a factor of both A and B, it is also a factor of A%B. 
This demonstrates that if n is a factor of both A and B, it is also a factor of 
The core of the move_ring function is the following code, which implements 
the move_ring function call yet another function, to which you give the name 
stack number as its two arguments. Because this is a separate function, you can 
ing a function, rand_0toNl
Now that we know how to write functions and generate random numbers, it’s 
I You also need to define the function somewhere in the program, to tell what the 
declared outside all function definitions, preferably before main. If a variable is 
I Global variables enable functions to share common data, but such sharing pro- 
The rand_0toNl function outputs an integer from 0 to N — 1, where N is the 
from 0 to 9. Because this array is global (declared outside of any function), all its 
The main function begins by defining two integer variables, n and r
of the function, declare it inside the loop that uses it. With this approach
The real initialization of the deck array is done in the main function, which 
passed to a function, it gets its own copy of that value
exact power of 2 (2 * 2 * 2 * 2 = 16), each hexadecimal digit corresponds to 
1 The caller of a function passes the address of a variable to be changed. For example, 
2 The function has a pointer argument, such as p
The problem is that when an argument is passed to a function, the function 
gets its own copy of the argument. As soon as the function returns, that copy is 
function to change the value of a variable, use pointers. 
address of a is passed to the function, which then uses it to change the value of a. 
The program then calls the function again, this time passing the address of b. 
function is called, contain the equivalent Fahrenheit temperature. Test the func- 
This has the obvious advantage of enabling a function to, in effect
the program) is to have the function manipulate global variables, but it’s best to 
two variables A and B, and you wanted to exchange their values
The following statement calls the swap function, passing the addresses of these 
first is the call to the swap function, which passes the addresses of a [ i] and a [low] : 
As for the sort function, the key to understanding it is to note what each part 
The function definition then just manipulates the arguments normally, not 
gram at runtime). Here’s another version of the function, using code that may 
fust as it provides math functions to crunch numbers, C++ provides functions 
to manipulate strings. These functions take pointer arguments; that is, they get 
You incur a risk with these string functions, as you can see: How do you 
of these functions avoids copying more than n characters, including the termi- 
getline function, described later)
The object is what the function applies to — in this case, cin. The function in 
luOvl ^ If you use the getline function at all, you may find that further operations 
information for string functions and math functions; also, <cstdlib> brings in 
the declaration of the atof function used in this example. In addition, the pro- 
ual characters of a string. To pass a string to a function, pass its address. To do 
The function uses the argument passed — which, after all
This example introduces a new function, toupper. The two functions
string class is that it is not compatible with the strtok function, which requires 
function than that described earlier in this chapter. Remember: for C-strings, 
provides the stof function. If your compiler is too old to support stoi and stof, 
use one of these functions, you need to use the c_str function to convert to 
function, which is a global function
There’s only one function, main. The first thing it does is to prompt for a 
The next thing that the main function does is create a file object, file_out. 
The first argument is a data address in memory: In the case of the read function, 
this is a destination to read the file data into. In the case of the write function, this is 
The get_int function uses a technique for getting an integer, described in the 
ber functions to read and write data directly. To open a file stream in binary, 
I With the read function, the address argument specifies a destination; the func- 
tion reads data from the file into this location. With the write function, the 
of function members, or methods) as well as data fields. 
whereas a function definition should not be followed by a semicolon. (At best, 
of a class is usually to add function members. Moreover, class members are 
This class declaration declares three public member functions — set, get_x
as strings and cin. The dot (.) syntax says that a certain function (in this case, 
These function definitions give you, the author of the class
These next statements call Point functions through the p2, thereby accessing 
get_y functions, but each will have its own data values for x and y. 
Exercise 10.1.2. Write two new functions for the Point class, set_x and set_y
In the fraction 1/3, for example
With these functions declared, you can use the class for simple operations such 
// The remaining functions are syntactically correct, 
When a function is inlined, the program does not transfer control to a sep- 
body of the function. For example, suppose that the set function is inlined as 
Because the three private functions are not inlined, their function defini- 
If a function definition is short, you can improve efficiency by writing it as an 
inline function. Remember, this is done just by simply including the function’s 
(absolute value) function to ensure only positive values are returned. Here, the 
Because we already have the GCF function, LCM should be easy. 
is the converse of the greatest common factor (GCF). So, for example
multiply by this factor only once. In multiplying A and B, you implicitly include 
When the gcf function calls itself in the recursive function call, 
I If no declaration is found at the function or class level, the compiler looks for a 
so the fraction is changed to 0/1. In addition, all values with numerators equal 
the call to the “set” function assigns values, but it also calls the normalize func- 
2/2, 4/8
The next step in creating a Fraction class is to add some arithmetic functions, 
We now have a convenient utility function, LCM
Because the Fraction::add function returns an object of type Fraction, it 
function should add the x values to get the new value of x, and it should add the 
Exercise 10.4.4. Write sub and div functions for the Fraction class, along with code 
in main to test these functions. (The algorithm for sub is similar to that for add, 
I To place a member-function definition outside its class’s declaration, use this 
I If you place a member-function definition inside the class declaration, the func- 
tion is inline. When the function is called, machine instructions that imple- 
I When you inline a function, no semicolon is needed after the closing brace. 
I If a function has a class for its return type, it must return an object of that type. 
that this is a member function of the specified class — that is, it has class scope. 
functions inline, you can have the function definitions span multiple lines if 
erence arguments. Remember the swap function from Chapter 6, which required 
The const keyword ensures that the argument cannot be altered by the function, 
Because this function definition was not inlined, the definition has to be 
an argument is passed to a function, a copy of that object must be placed 
"Fraction a = ""1/2"," b = ""1/3""; "
"Fraction arr_of_f ract [4] = {""1/2"," ""1/3"
C-string functions, so that mandates an include directive. 
functions, like the root variable
operations needed to support the public functions. These helper functions, 
The second of the two function definitions, print_sub
The other function, insert_at_sub
Like all recursive functions, insert_at_sub needs a terminating condition. 
time in a tree grows logarithmically, meaning that it doesn’t take much longer to 
Exercise 12.1.2. Write and test a Btree function named size_of_subtree, which cal- 
Exercise 12.1.4. Write and test a find function as in Exercise 12.1.3, but this time 
sive function, to which you give the root address. (Hint: to release an object 
Exercise 12.1.7. Write an iterative insert function, replacing the one shown in the 
holding arguments and local variables. The functions then return, popping 
Much of the time this function, move_stacks
are functions that use each object’s top-of-stack indicator, tos
clear member functions, to allocate a series of integers. Can you use the delete 
as with functions, classes
and related functions and did a global search-and-replace operation, 
template functions. For example, you can use the template keyword to 
You can also use the push_front member function, which adds elements 
Conversely, if we haven’t reached LS.end()
with a built-in sort function, among other things. 
^ To support the sort function as well as other member functions of list, 
Conversely, a condition of i ter ! = LS . end () means the list has not been 
plate’s size function, which has the syntax list. size(). 
along with the strtok function from the standard C++ library, does most of the 
parentheses from logical expressions, thus making those expressions more 
it down. The strtok function, as explained in Chapter 8
as the first argument. Calling the function this way says, “Give me the next 
The program carries out this function call near the bottom of the main loop, 
the two member functions, top and pop
I The start_new_game function determines which of three doors — 0, 1
The PrizeManager contains only two public functions, get_good_prize and 
Because this class consists of only two functions and their local variables, 
functions be provided as global functions that are called directly, rather than 
Now the two functions can be revised as follows. With this approach, strings 
value of badDoor and altDoor by calling the function members. Finally, use 
class functions to store the door changes internally as 1, 2
function is included so that you can query the user to input the number 1, 2
to use the atoi function instead of stoi, which is supported by compilers that 
The Monty Hall Paradox, or What’s Behind the Door? 
The Monty Hall Paradox, or What’s Behind the Door? 
your chances of winning the game are only 1/3. But if you switch, your chances 
increase to 2/3, well above 50% ! 
Door No. 3 is the right choice. Its probability goes from 1/3 to 2/3, while the 
the user’s first choice being right is only 1/3, and it remains so. In that case
door (a condition that has a probability of 2/3). In that case, the program exe- 
2/3), the program sets the alternative door to be the same as the winning door. 
numbers. The shuffle function randomizes the arrays of indexes, which are then 
features: how to return an object from a function, how to enable an object to 
if these are arranged as 9-7-8-10-J, it’s still a straight. Valued just below a flush
are a subset of straight flushes, but of the highest rank. 
two. The display function, although it could be made a global function
and then call its functions through that object. For example, the first statement 
almost all the work of the function, saving even more lines of code. This algo- 
With C+- 1- 14 -compliant compilers, you can initialize most STL containers
// For each number (0-4) in selVec, redraw 
The draw function has two major things to do, each accomplished with a 
Consider the hand A-A-A-5-5, in any order (a full house). After the program 
// For each number (0-4) in selVec, redraw 
member function, even though it’s relatively simple. All this function does is 
With this function in place, the rest of the Eval class is straightforward
just below 2-3-4-5-6. (Again, remember that order does not matter.) 
I To return an object from a function, it’s often helpful to call a class constructor. 
function into a member function is only a beginning. Ideally, objects bring with 
a member function, the compiler has to make a definite decision about what 
physical address in memory to bind to. Now there’s not one deal_a_card function, 
with one extra function, you could do it this way: 
keyword need only be applied once per function, in the base class. There’s an 
To declare a function virtual, just precede the function declaration with the 
itance relationship and make deal_a_card into a virtual function, so that the 
function. These implementations, it must be remembered
that a certain function will never be overridden, there is no point in mak- 
When a C++ program executes a standard function call, it does what 
for FloatFraction. If a class has no virtual functions at all, by the way
To call a virtual function, the program uses the vtable pointer (vptr) to 
make an indirect function call. This process, in effect
"Pure Virtual” and Other Abstract Matters 


So, virtual functions matter. The issue is that of always getting the right implemen- 
tation of a member function to execute even when that function is overridden in 
a derived class. 

The implications of this ability go a long way. Inheritance hierarchies are 
deeply ingrained in development systems such as Microsoft Foundation Classes, 
Java, and Visual Basic. 

With these systems, you subclass a general Form, Window, or Document class 
to create your own implementation. The operating system calls on your object 
(through your class declaration and implementation) to perform certain tasks — 
Repaint, Resize, Move, and so on. These actions are all virtual functions, which is 
what ensures that your functions are called using your implementation of your code. 



My_Form 



Interfaces, or abstract classes, use pure virtual functions. A pure virtual func- 
tion is neither required nor expected to have an implementation. You indicate 
a pure virtual function by using the notation =0. For example, a class might 
define normalize as follows: 

class Number { 
protected : 

virtual void normal ize() =0; 

}; 

Here, the normalize function is pure virtual. The declaration has no function 
definition. 







402 


Chapter 16 Polymorphic Poker 


Note 


► It’s possible, though not recommended, to give a definition for a function that 
is pure virtual. . . that is, to define it in the class in which the prototype includes 
“=0”! This may seem like a contradiction. The purpose of doing this would be to 
create a default implementation for the function but still have the effect of creating an 
abstract class, as explained in the next section. Usually, though, programmers will 
not provide a function definition in the base class if that function is pure virtual (= 0) . 


Abstract Classes and Interfaces 

An abstract class is a class that has one or more pure virtual functions, that is, a 
function that includes “=0” in its prototype. An important rule is that abstract 
classes cannot be instantiated. This means you can’t use the class to declare objects. 

For example, if Number is an abstract class, trying to instantiate it produces 
an error. 

Number a, b, c; // ERROR: Number is abstract class 
// because it has a pure virtual 
// func. a, b, c cannot be created. 

But an abstract class can be useful as a general pattern for its subclasses. Sim- 
ply put, you use an abstract by deriving subclasses, implementing any virtual 
functions that need to be implemented, and then finally using the subclass to 
instantiate objects. 

Suppose you have an inheritance hierarchy for Windows development and 
that this hierarchy includes an abstract Form class. You can subclass this to cre- 
ate individual, concrete forms. 


Y 


Repaint 


Resize 

Move 




Repaint = 0 
Resize = 0 


Move = 0 


Form \ 

I 


\ 




* 


Repaint 


Resize 

Move 




Pure virtual 
functions 


! 

Y 

Repaint 

Resize 


Move 


Forml 


Form2 


Form3 
















Object Orientation and I/O 


403 


Before you can use a subclass to instantiate (that is, create) objects, it must 
provide function definitions for all the pure virtual functions. A class that leaves 
even one of these functions unimplemented is abstract and therefore cannot be 
used to instantiate objects. 

All this is useful in turn, because it gives you a way of specifying and enforc- 
ing a general set of services, or interface, according to the following rules: 


I Each subclass is free to implement all these services (i.e., pure-virtual func- 
tions) in any way it wants. 

I Every service needs to be implemented, or the class cannot be instantiated. 

I Every class must strictly observe type information — return type and the type 
of each argument. This gives the inheritance hierarchy discipline so that really 
stupid actions (passing the wrong kind of data, for example) are flagged by the 
compiler. 


The author of a subclass knows that he or she must implement the services 
defined in the interface — such as Repaint, Move, and Load in this case — but 
within that mandate, he or she is free. And because all these functions are vir- 
tual, the correct implementation is always executed, no matter how an object 
is accessed. 

I’m about to show, I hope, an example of how all of this is useful. 


Object Orientation and !/ 0 



One of the best demonstrations of the power of object orientation (OOP) is the 
way it extends input/output through the use of the stream classes. 

Once upon a time, there was the C language, which required the use of a 
library function called printf if you wanted print to the console. This function 
had cousins named fprintf (print to a text file) and sprintf (print to a string) . 

pri ntf (Here ' s an int: %d", i); // Print an integer 
substitute your own function, and then call printf yourself through a function 
writing an operator« function. For example, you can write such a function 
This operator function makes Fraction objects printable in many contexts, 
that the correct function code is called, even if the object has a new type that the 
function named print_me. In the next example, I show that any class that sub- 
without knowing its type or its function code because you (that is, the client 
I The main function, which puts these classes to the test 
The IPrintable class also declares a global friend function. Chapter 18, 
“Operator Functions: Doing It with Class,” explains more about how to write 
such functions. For now, just accept that this function is valid. 
If print_me were not a virtual function, this code would not work. In that 
Implement the print_me function so that it displays output in the format “(x, y)”. 
I To make a function virtual, precede its declaration in the class with the virtual 
> Once a function is declared virtual, it is virtual in all subclasses. You don’t need 
tion into a virtual function, but the compiler cannot expand it as an inline function 
function is made virtual, but the advantages of making it a virtual function 
I A pure virtual function usually has no implementation (that is, no function defi- 
provides many useful member functions, and enables you to write convenient 
the strcat function, which is much less elegant. 
string type. Suppose you return a string from a function, but the function 
piler has to deduce what the type of the function is. In that case, use of the “s” 
that support long long also provide a useful support function, atoll
To support the atoll function used here, you’ll need to include <cstdlib>. 
The main function gets a number from the console and passes it to a function, 
string function, which produces a nicely formatted string result. This string is 
iterative version of the Fibo function, which — although not as elegant as the 
Instead of using the Fibo(0) function from Example 17.2, set F(0) and F(l) 
The auto keyword is also useful in declaring the return type of a function, 
STT class that supports a begin and end function, such as the list template. 
“3/4”? Well, you can make C++ do just that. And you can make such code even 
"Fraction a = ""1/2"," b = ""1/6""; "
The ability to write such functions is an appealing feature of C++, but it’s 
I If you declare an operator function as a member function, then the object 
I If you declare an operator function as a global function, then each operand cor- 
The operator function is declared with Point return type, which means it returns 
can declare an operator function that interacts with the int type, another oper- 
ator function that interacts with the float type, and so on. 
Given this function definition, the following code would correctly print out 
all the relevant functions centered in the class declaration, but it’s sometimes 
function. Here’s the declaration (the prototype), which should appear before 
cannot access them. One solution is to use function calls, if available
declare a function as a friend function, which means that the function is global
In a member function, the left operand is interpreted as “this object” in the 
Here’s a Point-class add function, along with an addition-operator (+) func- 
This is an obvious way to write these functions, but look how much an 
> The add function creates a new object, new_pt. This calls the default construc- 
tor. When that function returns, the program makes a copy of new_pt and 
I The operator+ function returns the object to its caller, requiring yet another 
mentation of the function calls changes, but no other change is required in the 
argument being passed. When the function got its own copy of the argument, 
one of these functions returns, it makes a copy of an object. You can cut down 
function, which does nothing more than call the add function
When the operator-1- function is inlined, operations such as “ptl + pt2” are 
The add function, in turn
and get_y functions. In this context, the const keyword says
it allows the functions to be called by other const functions, and it allows 
tion of a Point object by an integer. Use global functions, aided by friend decla- 
functions uses reference arguments, providing a more efficient implementation. 
When the declarations of these functions change, the function definitions must 
operator+ and operator* functions are written. For example, when the compiler 
declared as a const member function. In many programs this won’t matter, but 
tions.) Such member functions, in turn
So which member functions should be const? The answer is, most of them. 
the operator functions in this particular case should ideally be const, because 
To declare a member function const, place the keyword right after its decla- 
To write your own assignment-operator function, use the following syntax: 
This function is similar to the copy constructor, but it should return a ref- 
the way the function is declared, what gets returned is a reference
Thanks to the normalize function we’ve written for the Fraction class, com- 
member function “print,” because it is not a reserved word in C++. 
ator and use 1 for the denominator. 1 is converted to 1/1, 2 is converted to 2/1
is converted to 5/1, and so on. 
Exercise 18.3.2. Write greater-than (>) and less-than (<) functions, and revise the 
main function of the example to test these functions. For example, test whether 
Exercise 18.3.4. Revise the class to declare all member functions const, except for 
an operator function is also called operator overloading, which means redefin- 
I An operator function for a class has the following declaration, in which @ 
If it is a member function, then (for a binary operator) there is one argument. For 
I When an operator function is used this way, the left operand becomes the 
object through which the function is called, and the right operand is passed as 
I If you don’t write an assignment-operator function (=), the compiler automat- 
I The compiler does not supply a test-for-equality function (==), so you need to 
I To write a “print” function for a class, write a global operator« function; the 
I In the function definition, the statements should write data from the right 
All literals are constants, but not all constants are literals. For example
When within functions that are not void, the return statement must return a 
tialized through “function-style” syntax, which passes arguments along to the 
Pointers to functions are used as callback functions (for example, passed to 
definitions permitted by C+- 1-14, in which the auto keyword is used in place of 
Before a function can be called by another function, it must first be declared 
cating that the function has no arguments. (Unlike C, C++ does not permit the 
A more complete syntax for a function prototype is therefore as follows, in 
other function. The virtual keyword needs to be applied only once, when the 
Unlike a function definition, a class declaration is always terminated by a 
a union share the same address in memory. (Basically, a union can be used to 
The third version is used to define macro functions, which take one or more 
like inline functions, which are expanded into the body of the caller. Macro 
functions, however
used in conjunction with the defined function. For example, although this is 
functions, data- conversion functions
an overview. Note that I do not cover I/O functions such as printf or fprintf, 
To use these functions, include the file <cstring>. The functions apply to tradi- 
To use the functions in Table F.2, include <cstdlib>. 
To use any of the functions in Table F.3 or Table F.4, include <cctype>. Each of 
To use any of the functions in Table F.5, include <cmath>. Each of the func- 
except where noted. Each of these functions returns the result of the operation, 
In using these functions, keep in mind that an integer can be given where 
To use the functions in Table F.6, include both <cstdlib> and <ctime>. See 
To support the library functions in Table F.7, include <ctime>. The general 
ber function (in addition to the ones listed here), str
To enable the member functions in this section, include <fstream>. 
objects support the member functions in Table G.5, as well as the ones shown in 
this function separately to open the indicated/i/e, a char* string 
With most of the functions listed in Table H.l, str may be either a STL string 
In all these functions, position numbers use zero -based indexing. 
Returns value of the bit indexed by n (this function, unlike 
if created in another function, because C++ can always determine the begin- 
templates. A few functions — merge, splice
even if it was created in another function, because C++ can always determine 
begin and end functions for iteration, a stack class is not a full container class; 
Boolean: A true/false value or true/false operation. In ANSI C++ and later, the 
bool type is fully supported. Where a Boolean value is expected (for example, 
in Boolean operations. When any nonzero value is assigned to a Boolean type, it 
help clarify: To call the C++ standard library function qsort, you need to pass a 
qsort address of a comparison function you supply, qsort then calls this func- 
largely obsolete through the use of virtual functions, which provide a safer and 
constant: A value that is not allowed to change. All literals are constants, but 
not all constants are literals. In C and C++, an array name is a symbol (that is
or a definition (which tells what the function does). In C++, every variable and 
function except for main must be declared before being used; note, however
When a function is called, program control is transferred to these statements. 
Many ratios — such as 1/3 — cannot be stored precisely in floating-point format, 
function. In a multiple-module program, you can even share a global variable 
prototypes for library functions. Remember that classes, variables
function that calls it. In a normal function call, program control jumps to a new 
with an inline function. Instead, the inline function call is expanded by being 
All literals are constants, but not all constants are literal. 
logical expressions use short-circuit logic, so that if the first expression in opl 
main function: The main function is the starting point of a C++ program, and 
of the same class support the same member functions, as well as data members. 
“data record” but is much more flexible. By writing member functions, you can 
(functions), all function code is shared by objects of the same class and
dozens of isolated functions and isolated data structures, but rather modules 
ber of times to define different functions, as long as each function has a dif- 
a function call is built into the object itself, not the code that uses the object. 
pure virtual function: A function that has no implementation — that is, no 
under which the function no longer calls itself. At that point, the function calls
have no effect on code outside the function; therefore, every function can have 
functions. Scope can also be defined by namespaces and classes, in which case 
the computer places the addresses of functions to return to, as well as the values 
is usually regard as a token. So in the input string “amt = 3 + 15”, “amt”
virtual function: A function whose address is not determined until runtime, 
you can safely override a virtual function in a subclass, knowing that no matter 
like such a function call. It is virtual because to the caller, it is just as good as a 
“real” function call, even though the actual address is not fixed until runtime. 
+ (addition- operator function), 452-454 
zero-out-array function and, 179 
281-282, 287 
abs (absolute value) function, 254 
pure virtual functions in, 402
add function, 262-266
Addition-operator (+) function, 452-454 
atof function, 195 
atol 1 function, 425 
mai n function and, 105 
begi n function, 317-318 
prime-number functions and, 107-108 
prime-number functions and, 108-109 
Callback functions, defined
multiple functions, 105-106 
as global functions, 450-452 
inline functions in, 251-253 
support for functions in, 255-258 
cl ear function, 372
returning objects from functions with, 
class assignment function and, 464 
Data-conversion functions, defined
Data flow in functions, 165 
deal_a_card function for, 392-393 
Boolean logic in, example of
Boolean logic in, generally
of functions, 101
class assignment function and, 463 
def i ned function, 507 
Definition of functions, 102-104
Doubl e_i t function, 162-164 
end function, 317-318 
Boolean logical operators and, 51-53 
File I/O functions, 529-530 
arithmetic functions in, 262-267 
class operator functions and, 457-462 
inline functions in, 251-253 
print function and, 466-467 
support for functions in, 255-258 
Friend functions, 451-452 
get_di vi sors function, 114-117 
get_number function, 190-195 
Global functions, 450-452 
paradox in, 351-353 
mai n function and, 119-122 
file I/O functions, 529-530 
input stream functions, 528 
output stream functions, 528 
"stdafx.h, 5-7", 12
Input stream functions, 528 
i nsert function, 319-322 
class operator functions and, 463 
in calling functions, 113 
linking to C++ functions, 27 
avg function and, 105 
functions in, generally
get_di visors function and, 115 
rand_0toNl function and, 140-143 
functions for, defined
Member functions, 268
Monty Hall Paradox, 351-353 
mul t (multiplication) function, 19
virtual function calls and, 399-401 
Not (! ) operator, 51
print function and, 466-467 
class operator functions and, 454-457 
data flow in functions and, 165 
doubi e_i t function and, 162-164 
swap function and, generally
swap function for sorting arrays and, 
pure virtual functions in, 401-402 
Prime number functions, 106-109 
with class operator functions, 466-467 
Prototyping functions, 101 
push function, 309-310 
push_back function, 371
push_back member function, 315
push_f ront member function, 315
query_door function, 339 
rand function, 71-75 
rand_0toNl function, 139-143 
Randomization functions, defined
read function, 190
functions for, generally
class operator functions and, 452-454 
functions and, generally
get_di vi sors function and, 116 
prime-number functions and, 108 
Returning objects from functions, 362-365
Seekp member function, 211
Select door functions, 339-346 
function prototypes and, 135 
set_seJ_door function, 343 
Single-character functions, 519 
si ze function, 371
sort functions, 319-322 
sq rt (square root) function, 11
Squirt function, 55 
start_new_game function, 339 
strf ti me functions, 523-524 
String-manipulation functions, 184-190 
string-manipulation functions and, 
of function declarations, 500-501 
Time functions, defined
functions in, 122-126 
as absolute value function, 254 
in Boolean logic, 51-54
Boolean variables and, 75-76
class operator functions and, 463 
absolute value function, 254 
zero-out-array function and, 178 
zero-out-array function, 177-179 
">>> print(""2+3=", 2+3) 
defined the function, but we haven't told 
■ Programs are usually composed of functions, 
"3 


Cancel 


Python Programming, 3/e 


109 


Introduction 

to 

Programming in Java 

An Interdisciplinary Approach 


Robert Sedgewick 
and 

Kevin Wayne 


Princeton University 



Boston San Francisco New York 
London Toronto Sydney Tokyo Singapore Madrid 
Mexico City Munich Paris Cape Town Hong Kong Montreal 




Publisher 
Executive Editor 
Associate Editor 
Associate Managing Editor 
Senior Designer 
Digital Assets Manager 
Senior Media Producer 
Senior Marketing Manager 
Marketing Assistant 
Senior Author Support/ 
Technology Specialist 
Senior Manufacturing Buyer 
Copyeditor 

Composition and Illustrations 


Greg Tobin 
Michael Hirsch 
Lindsey Triebei 
Jeffrey Holcomb 
Joyce Cosentino Wells 
Marianne Groth 
Bethany Tidd 
Michelle Brown 
Sarah Milmore 

Joe Vetere 

Carol Melville 

Genevieve d’Entremont 

Robert Sedgewick and Kevin Wayne 


Cover Image: © Robert Sedgewick and Kevin Wayne 


Page 353 © 2006 C. Herscovici, Brussels / Artists Rights Society (ARS), New York Banque d’ Images, ADAGP / Art 
Resource, NY 


Many of the designations used by manufacturers and sellers to distinguish their products are claimed as trade- 
marks. Where those designations appear in this book, and Addison-Wesley was aware of a trademark claim, the 
designations have been printed in initial caps or all caps. 

The interior of this book was composed in Adobe InDesign. 

Library of Congress Cataloging-in-Publication Data 

Sedgewick, Robert, 1946- 

Introduction to programming in Java : an interdisciplinary approach / by Robert Sedgewick and Kevin Wayne. 
p. cm. 

Includes index. 

ISBN 978-0-321-49805-2 (alk. paper) 

1. Java (Computer program language) 2. Computer programming. I. Wayne, Kevin Daniel, 1971- II. Title. 
QA76.73.J38S413 2007 
005.13’3—dc22 

2007020235 


Copyright © 2008 Pearson Education, Inc. All rights reserved. No part of this publication may be reproduced, 
stored in a retrieval System, or transmitted, in any form or by any means, electronic, mechanical, photocopying, 
recording, or otherwise, without the prior written permission of the publisher. Printed in the United States of 
America. For information on obtaining permission for use of material in this work, please submit a written request 
to Pearson Education, Inc., Rights and Contracts Department, 501 Boylston Street, Suite 900, Boston, MA 02116, 
fax (617) 671-3447, or online at http: //www. pearsoned. com/1 egal /permi ssi ons. htm. 


ISBN-13: 978-0-321-49805-2 
ISBN-10: 0-321-49805-4 


123456789 10—CRW—11 10 09 08 07 




[ he basis for education in the last millennium was “reading, writing, and arith- 


X metic;” now it is reading, writing, and computing. Learning to program is an 
essential part of the education of every Student in the Sciences and engineering. 
Beyond direct applications, it is the first Step in understanding the nature of Com¬ 
puter science’s undeniable impact on the modern world. This book aims to teach 
programming to those who need or want to learn it, in a scientific context. 

Our primary goal is to empower students by supplying the experience and 
basic tools necessary to use computation effectively. Our approach is to teach stu¬ 
dents that writing a program is a natural, satisfying, and Creative experience (not 
an onerous task reserved for experts). We progressively introduce essential con- 
cepts, embrace classic applications from applied mathematics and the Sciences to 
illustrate the concepts, and provide opportunities for students to write programs 
to solve engaging problems. 

We use the Java programming language for all of the programs in this book— 
we refer to Java after programming in the title to emphasize the idea that the book 
is about fundamental concepts in programming, not Java per se. This book teaches 
basic skills for computational problem-solving that are applicable in many modern 
computing environments, and is a self-contained treatment intended for people 
with no previous experience in programming. 

This book is an interdisciplinary approach to the traditional CS1 curriculum, 
where we highlight the role of computing in other disciplines, from materials Sci¬ 
ence to genomics to astrophysics to network Systems. This approach emphasizes 
for students the essential idea that mathematics, Science, engineering, and com¬ 
puting are intertwined in the modern world. While it is a CS1 textbook designed 
for any first-year College Student interested in mathematics, Science, or engineer¬ 
ing (including Computer Science), the book also can be used for self-study or as a 
Supplement in a course that integrates programming with another field. 


v 


introJava.indb 5 


3/27/09 2:05 PM 




Coverage The book is organized around four stages of learning to program: ba- 
sic elements, functions, object-oriented programming, and algorithms (with data 
structures). We provide the basic Information readers need to build confidence in 
writing programs at each level before moving to the next level. An essential feature 
of our approach is to use example programs that solve intriguing problems, sup- 
ported with exercises ranging from self-study drills to challenging problems that 
call for Creative Solutions. 

Basic elements include variables, assignment Statements, bnilt-in types of 
data, flow of control (conditionals and loops), arrays, and input/output, including 
graphics and sound. 

Functions and modules are the student’s first exposure to modular program¬ 
ming. We build upon familiarity with mathematical functions to introduce Java 
static methods, and then consider the implications of programming with func¬ 
tions, including libraries of functions and recursion. We stress the fundamental 
idea of dividing a program into components that can be independently debugged, 
maintained, and reused. 

Object-Oriented programming is our introduction to data abstraction. We em- 
phasize the concepts of a data type (a set of values and a set of operations on them) 
and an object (an entity that holds a data-type value) and their implementation 
using Java’s dass mechanism. We teach students how to use, create, and design data 
types. Modularity, encapsulation, and other modern programming paradigms are 
the central concepts of this stage. 

Algorithms and data structures combine these modern programming para¬ 
digms with classic methods of organizing and processing data that remain effec- 
tive for modern applications. We provide an introduction to classical algorithms 
for sorting and searching as well as fundamental data structures (including Stacks, 
queues, and symbol tables) and their application, emphasizing the use of the scien¬ 
tific method to understand performance characteristics of implementations. 

Applications in Science and engineering are a key feature of the text. We moti- 
vate each programming concept that we address by examining its impact on spe¬ 
cific applications. We draw examples from applied mathematics, the physical and 
biological Sciences, and Computer science itself, and include Simulation of physical 
Systems, numerical methods, data visualization, sound synthesis, image process¬ 
ing, financial Simulation, and information technology. Specific examples include a 
treatment in the first chapter of Markov chains for web page ranks and case stud- 
ies that address the percolation problem, N-body Simulation, and the small-world 


vi 


introJava.indb 6 


3/27/09 2:05 PM 


phenomenon. These applications are an integral part of the text. They engage stu- 
dents in the material, illustrate the importance of the programming concepts, and 
provide persuasive evidence of the critical role played by computation in modern 
Science and engineering. 

Our primary goal is to teach the specific mechanisms and skills that are need- 
ed to develop effective Solutions to any programming problem. We work with com- 
plete Java programs and encourage readers to use them. We focus on programming 
by individuals, not library programming or programming in the large (which we 
treat briefly in an appendix). 

Use in the Curriculum This book is intended for a first-year College course 
aimed at teaching novices to program in the context of scientific applications. 
Taught from this book, prospective majors in any area of Science and engineering 
will learn to program in a familiär context. Students completing a course based on 
this book will be well-prepared to apply their skills in later courses in Science and 
engineering and to recognize when further education in Computer Science might 
be beneficial. 

Prospective Computer Science majors, in particular, can benefit from learning 
to program in the context of scientific applications. A Computer scientist needs the 
same basic background in the scientific method and the same exposure to the role 
of computation in Science as does a biologist, an engineer, or a physicist. 

Indeed, our interdisciplinary approach enables Colleges and universities to 
teach prospective Computer Science majors and prospective majors in other fields 
of Science and engineering in the same course. We cover the material prescribed by 
CS1, but our focus on applications brings life to the concepts and motivates stu¬ 
dents to learn them. Our interdisciplinary approach exposes students to problems 
in many different disciplines, helping them to more wisely choose a major. 

Whatever the specific mechanism, the use of this book is best positioned early 
in the curriculum. First, this positioning allows us to leverage familiär material 
in high school mathematics and Science. Second, students who learn to program 
early in their College curriculum will then be able to use Computers more effectively 
when moving on to courses in their specialty. Like reading and writing, program¬ 
ming is certain to be an essential skill for any scientist or engineer. Students who 
have grasped the concepts in this book will continually develop that skill through a 
lifetime, reaping the benefits of exploiting computation to solve or to better under- 
stand the problems and projects that arise in their chosen field. 


vii 


introJava.indb 7 


3/27/09 2:05 PM 


Prerequisites This book is meant to be suitable for typical Science and engi- 
neering students in their first year of College. That is, we do not expect preparation 
beyond what is typically required for other entry-level Science and mathematics 
courses. 

Mathematical maturity is important. While we do not dwell on mathematical ma¬ 
terial, we do refer to the mathematics curriculum that students have taken in high 
school, including algebra, geometry, and trigonometry. Most students in our target 
audience (those inten ding to major in the Sciences and engineering) automatically 
meet these requirements. Indeed, we take advantage of their familiarity with the 
basic curriculum to introduce basic programming concepts. 

Scientific curiosity is also an essential ingredient. Science and engineering students 
bring with them a sense of fascination in the ability of scientific inquiry to help ex- 
plain what goes on in nature. We leverage this predilection with examples of simple 
programs that speak volumes about the natural world. We do not assume any spe¬ 
cific knowledge beyond that provided by typical high school courses in mathemat¬ 
ics, physics, biology, or chemistry. 

Programming experience is not necessary, but also is not harmful. Teaching pro¬ 
gramming is our primary goal, so we assume no prior programming experience. 
But writing a program to solve a new problem is a challenging intellectual task, so 
students who have written numerous programs in high school can benefit from 
taking an introductory programming course based on this book (just as students 
who have written numerous essays in high school can benefit from an introductory 
writing course in College). The book can support teaching students with varying 
backgrounds because the applications appeal to both novices and experts alike. 

Experience using a Computer is also not necessary, but also is not at all a problem. 
College students use Computers regularly, to communicate with friends and rela¬ 
tives, listen to music, process photos, and many other activities. The realization that 
they can harness the power of their own Computer in interesting and important 
ways is an exciting and lasting lesson. 

In summary, virtually all students in Science and engineering are prepared to take a 
course based on this book as a part of their first-semester curriculum. 


Goals What can instructors of upper-level courses in Science and engineering 
expect of students who have completed a course based on this book? 

We cover the CS1 curriculum, but anyone who has taught an introductory 
programming course knows that expectations of instructors in later courses are 
typically high: each instructor expects all students to be familiär with the computing 
environment and approach that he or she wants to use. A physics professor might 
expect some students to design a program over the weekend to run a Simulation; an 
engineering professor might expect other students to be using a particular package 
to numerically solve differential equations; or a Computer Science professor might 
expect knowledge of the details of a particular programming environment. Is it 
realistic to meet such diverse expectations? Should there be a different introductory 
course for each set of students? Colleges and universities have been wrestling with 
such questions since Computers came into widespread use in the latter part of the 
20th Century. Our answer to them is found in this common introductory treatment 
of programming, which is analogous to commonly accepted introductory courses 
in mathematics, physics, biology, and chemistry. An Introduction to Programming 
strives to provide the basic preparation needed by all students in Science and en¬ 
gineering, while sending the clear message that there is much more to understand 
about Computer Science than programming. Instructors teaching students who 
have studied from this book can expect that they have the knowledge and experi- 
ence necessary to enable them to adapt to new computational environments and to 
effectively exploit Computers in diverse applications. 

What can students who have completed a course based on this book expect to ac- 
complish in later courses? 

Our message is that programming is not difficult to learn and that harness- 
ing the power of the Computer is rewarding. Students who master the material in 
this book are prepared to address computational challenges wherever they might 
appear later in their careers. They learn that modern programming environments, 
such as the one provided by Java, help open the door to any computational prob- 
lem they might encounter later, and they gain the confidence to learn, evaluate, 
and use other computational tools. Students interested in Computer Science will be 
well-prepared to pursue that interest; students in Science and engineering will be 
ready to integrate computation into their studies. 


ix 


introJava.indb 9 


3/27/09 2:05 PM 


Booksite An extensive amount of information that Supplements this text may 
be found on the web at 

http://www.es .princeton.edu/IntroProgramming 

For economy, we refer to this site as the booksite throughout. It contains material 
for instructors, students, and casual readers of the book. We briefly describe this 
material here, though, as all web users know, it is best surveyed by browsing. With a 
few exceptions to support testing, the material is all publicly available. 

One of the most important implications of the booksite is that it empow- 
ers instructors and students to use their own Computers to teach and learn the 
material. Anyone with a Computer and a browser can begin learning to program 
by following a few instructions on the booksite. The process is no more difficult 
than downloading a media player or a song. As with any website, our booksite is 
continually evolving. It is an essential resource for everyone who owns this book. In 
particular, the supplemental materials are critical to our goal of making Computer 
Science an integral component of the education of all scientists and engineers. 

For instructors, the booksite contains information about teaching. This in¬ 
formation is primarily organized around a teaching style that we have developed 
over the past decade, where we offer two lectures per week to a large audience, 
supplemented by two dass sessions per week where students meet in small groups 
with instructors or teaching assistants. The booksite has presentation slides for the 
lectures, which set the tone. 

For teaching assistants, the booksite contains detailed problem sets and pro- 
gramming projects, which are based on exercises from the book but contain much 
more detail. Each programming assignment is intended to teach a relevant concept 
in the context of an interesting application while presenting an inviting and engag- 
ing challenge to each Student. The progression of assignments embodies our ap- 
proach to teaching programming. The booksite fully specifies all the assignments 
and provides detailed, structured information to help students complete them in 
the allotted time, including descriptions of suggested approaches and outlines for 
what should be taught in dass sessions. 

For students, the booksite contains quick access to much of the material in the 
book, including source code, plus extra material to encourage self-learning. Solu¬ 
tions are provided for many of the book’s exercises, including complete program 
code and test data. There is a wealth of information associated with programming 
assignments, including suggested approaches, checklists, FAQs, and test data. 


x 


introJava.indb 10 


3/27/09 2:05 PM 


For casual readers (including instructors, teaching assistants, and students!), 
the booksite is a resource for accessing all manner of extra Information associated 
with the book’s content. All of the booksite content provides web links and other 
routes to pursue more information about the topic under consideration. There is 
far more information accessible than any individual could fully digest, but our goal 
is to provide enough to whet any reader’s appetite for more information about the 
book’s content. 

Acknowledgements This project has been under development since 1992, so 
far too many people have contributed to its success for us to acknowledge them 
all here. Special thanks are due to Anne Rogers for helping to Start the ball rolling; 
to Dave Hanson, Andrew Appel, and Chris van Wyk, for their patience in explain- 
ing data abstraction; and to Lisa Worthington, for being the first to truly relish 
the challenge of teaching this material to first-year students. We also gratefully ac¬ 
knowledge the efforts of /dev/126 (the summer students who have contributed 
so much of the content); the faculty, graduate students, and teaching staff who 
have dedicated themselves to teaching this material over the past 15 years here at 
Princeton; and the thousands of undergraduates who have dedicated themselves to 
learning it. 


Robert Sedgewick 
Madeira, Portugal 

Kevin Wayne 

San Francisco, California 

July, 2007 


xi 


introJava.indb 11 


3/27/09 2:05 PM 



introJava.indb 12 


3/27/09 2:05 PM 




Preface .1/ 

Elements of Programming . 3 

1.1 Your First Program 4 

1.2 Built-in Types of Data 14 

1.3 Conditionals and Loops 46 

1.4 Arrays 86 

1.5 Input and Output 120 

1.6 Case Study: Random Web Surfer 162 

Functions and Modules . 183 

2.1 Static Methods 184 

2.2 Libraries and Clients 218 

2.3 Recursion 254 

2.4 Case Study: Percolation 286 

Object-Oriented Programming . 315 

3.1 Data Types 316 

3.2 Creating Data Types 370 

3.3 Designing Data Types 416 

3.4 Case Study: N-body Simulation 456 

Algorithms and Data Structures . 471 

4.1 Performance 472 

4.2 Sorting and Searching 510 

4.3 Stacks and Queues 550 

4.4 Symbol Tables 608 

4.5 Case Study: Small World 650 

Context . 695 

Index . 699 


xiii 


introJava.indb 13 


3/27/09 2:05 PM 













introJava.indb 2 


3/27/09 2:05 PM 




















Elements of Programming 


1.1 Your First Program.4 

1.2 Built-in Types of Data.14 

1.3 Conditionals and Loops.46 

1.4 Arrays.86 

1.5 Input and Output.120 


1.6 Case Study: Random Web Surfer. . . 162 


O ur goal in this chapter is to convince you that writing a program is easier than 
writing a piece of text, such as a paragraph or essay. Writing prose is difficult: 
we spend many years in school to learn how to do it. By contrast, just a few building 
blocks suffice to enable us to write programs that can help solve all sorts of fascinat- 
ing, but otherwise unapproachable, problems. In this chapter, we take you through 
these building blocks, get you started on programming in Java, and study a variety 
of interesting programs. You will be able to express yourself (by writing programs) 
within just a few weeks. Like the ability to write prose, the ability to program is a 
lifetime skill that you can continually refine well into the future. 

In this book, you will learn the Java programming language. This task will be 
much easier for you than, for example, learning a foreign language. Indeed, pro¬ 
gramming languages are characterized by no more than a few dozen vocabulary 
words and rules of grammar. Much of the material that we cover in this book could 
be expressed in the C or C++ languages, or any of several other modern program¬ 
ming languages. But we describe everything specifically in Java so that you can get 
started creating and running programs right away. On the one hand, we will focus 
on learning to program, as opposed to learning details about Java. On the other 
hand, part of the challenge of programming is knowing which details are relevant 
in a given Situation. Java is widely used, so learning to program in this language will 
enable you to write programs on many Computers (your own, for example). Also, 
learning to program in Java will make it easy for you learn other languages, includ- 
ing lower-level languages such as C and specialized languages such as Matlab. 


3 


introJava.indb 3 


3/27/09 2:05 PM 









Elements of Programming 



1.1 Your First Program 

In this section, our plan is to lead you into the world of Java programming by tak- 
ing you through the basic Steps required to get a simple program running. The Java 
System is a collection of applications, not unlike many of the other applications 
that you are accustomed to using (such 
as your word processor, email program, 
and internet browser). As with any ap- 
plication, you need to be sure that Java 
is properly installed on your Computer. It 
comes preloaded on many Computers, or 
you can download it easily. You also need a text editor and a terminal application. 
Your first task is to find the instructions for installing such a Java programming 
environment on your Computer by visiting 

http://www.es .pri nceton.edu/IntroProgrammi ng 

We refer to this site as the booksite. It contains an extensive amount of supplemen- 
tary information about the material in this book for your reference and use. You 
will find it useful to have your browser open to this site while programming. 


1.1.1 Hello, World.6 

1.1.2 Using a command-line argument . . 8 

Programs in this section 


Programming in Java To introduce you to developing Java programs, we 
break the process down into three Steps. To program in Java, you need to: 

• Create a program by typing it into a file named, say, MyCode. j ava. 

• Compile it by typing j avac MyCode. j ava in a terminal window. 

• Run (or execute) it by typing java MyCode in the terminal window. 

In the first step, you Start with a blank screen and end with a sequence of typed 
characters on the screen, just as when you write an email message or a paper. Pro- 
grammers use the term code to refer to program text and the term coding to refer 
to the act of creating and editing the code. In the second step, you use a System ap¬ 
plication that compiles your program (translates it into a form more suitable for the 
Computer) and puts the result in a file named MyCode . cl ass. In the third step, you 
transfer control of the Computer from the System to your program (which returns 
control back to the System when finished). Many Systems have several different 
ways to create, compile, and execute programs. We choose the sequence described 
here because it is the simplest to describe and use for simple programs. 


introJava.indb 4 


3/27/09 2:05 PM 





/. / Your First Program 


5 


Creating a program. A Java program is nothing more than a sequence of charac- 
ters, like a paragraph or a poem, stored in a file with a . java extension. To create 
one, therefore, you need only dehne that sequence of characters, in the same way 
as you do for email or any other Computer application. You can use any text editor 
for this task, or you can use one of the more sophisticated program development 
environments described on the booksite. Such environments are overkill for the 
sorts of programs we consider in this book, but they are not difhcult to use, have 
many useful features, and are widely used by Professionals. 

Compiling a program. At ürst, it might seem that Java is designed to be best un- 
derstood by the Computer. To the contrary, the language is designed to be best un- 
derstood by the programmer (that’s you). The Computer’s language is far more 
primitive than Java. A Compiler is an application that translates a program from the 
Java language to a language more suitable for executing on the Computer. The Com¬ 
piler takes a hie with a . j ava extension as input (your program) and produces a 
hie with the same name but with a . cl ass extension (the computer-language Ver¬ 
sion). To use your Java Compiler, type in a terminal window the javac command 
followed by the hie name of the program you want to compile. 

Executing a program. Once you compile the program, you can run it. This is the 
exciting part, where your program takes control of your Computer (within the con- 
straints of what the Java System allows). It is perhaps more accurate to say that your 
Computer follows your instructions. It is even more accurate to say that a part of 
the Java System known as the Java Virtual Machine (the JVM, for short) directs your 
Computer to follow your instructions. To use the JVM to execute your program, 
type the j ava command followed by the program name in a terminal window. 


use any text editor to type javac Hel loWorld. java type java HelloWorld 

create your program to compile your program to execute your program 


I 



your program computer-language 

(a text file) Version of your program 


Hello"," World"" "
be integers): given two i nt values a and b, the value 
functions, logarithm/exponential functions
name of the function followed by its argument in parentheses. For example, you 
and not (!), which have familiär definitions: 
same function appears in different guises. For example, the expressions (a && b) 
and higher precedence than boolean operators, so you do not need the parentheses 
with boolean logic, provide the basis for 
computation for this code is likely (i nt) (11 * 0.3), which has the value 3
Q. Are there functions in Java’s Math library for other trigonometric functions, like 
to be doubl e literals. If you write 10/3.0 or 10.0/3, Java does implicit conversion 
mand line and prints the value of x 0 + v 0 t + gt 2 / 2, where g is the constant 9.78033. 
and prints true if day d of month m is between 3/20 and 6/20, fal se otherwise. 
y = 1/2 ln ((1 + sin cp) / (1 — sin cp)), where \ 0 is the longitude of the point in the 
expression that has a boolean value, such as one involving a comparison Operation
on whether the boolean expression is true or fal se, as in the following template: 
illustrates one technique. To compute the square root function, it 
tons method. Under generous conditions on a given function/(x), 
which the function is 0). Start with an initial estimate, t 0 . Given the 
= f(x) at the point (£, 
positive root of the function f(x) = x 2 - c. For this special case, Newton’s method 
tive for finding the roots of a broad dass of functions, 
evaluates to the truth value of y. For example, instead of writing i f (i sPri me = 
boolean expression, the increment Statement
prints equal if all three are equal, and not equal otherwise. 
1 . 3.11 Write a program FunctionGrowth that prints a table of the values loglV, 
ing formulas: F 0 = 0, F 1 = 1
1 . 3.37 Trigonometrie functions. Write two programs, Si n and Cos
way to go at each intersection, but knows by scent to avoid visiting any 
boolean values, using the or Operation instead of + and the and Operation instead 
one from that point to the third point at (1/2, 
V3/2), and one from that point back to (0
mental data or the values of a mathematical function. For example, suppose that 
we want to plot values of the function y = sin(4x) + sin(20x) in the interval [0, tt] . 
want to plot the function, compute function 
the function sin(2TTf X440), we get a curve that oscillates 440 times per second. 
samples the function sin(2TTf X440) at t = 0/44100, 
1/40 second, 1
1/200 second, 220 samples 
1/1000 second, 44 samples 
1/44100, 2/44100
function, simNGames
quotes around A and B, the String is 
■ Since there are no new functions, there are 
■ There’s just one tricky function left, 
Figure 1-22 illustrates an efficient way to organize an HTML5 project. There’s a project folder, with four sub- 
Figure 2-1. Arrange your text editor, the web browser
work into a function to keep it separated from the rest of your program. Whenever you need that work done, 
Use the keyword function, then write the function’s name. Its name can be anything you like
Whenever you want the function to do its work, you call it. Just write the name of the function
Note: Because the variable called total is declared inside the function, it can be used in 
It tells the add function to start working. If this line wasn’t in our program, the function definition wouldn’t run 
By assigning specific jobs to functions, you make your programs easier to manage by modularizing them. 
If you know that a particular function does a specific job, you’ll know where to look to make changes or fix 
As far as the function is concerned, the code it’s running looks like this: 
“Hello” is being transferred to the function definition to be processed. Or, if you like the giant mouth analogy
Figure 2-6. “Hello” is sent to the function, which displays it in the console 
function add(firstNumber, secondNumber) 
function add(firstNumber, secondNumber) 
function add(firstNumber, secondNumber) 
As far as the function is concerned, the code it’s running looks like this: 
The console will now display 42. You didn’t need to change the function definition at all, only the information 
You now know enough about JavaScript to create your own little calculator. Try to create four functions that add, 
function add(firstNumber, secondNumber) 
function subtract(firstNumber, secondNumber) 
function multiply(firstNumber, secondNumber) 
function divide(firstNumber, secondNumber) 
function add(firstNumber, secondNumber) 
function add(firstNumber, secondNumber) 
Figure 2-8. A function can return the value of a function back to the main program. In this example, it sends the number 
ous section. Create functions that return the result of the calculations back to the main program, like this 
All three styles of functions we’ve just looked at can produce the same result, and often it won’t be clear which 
You call the function in the same way, like this: 
the same way as a normal function, except now you can use the function like a variable as well. Apart from this
var add = function(firstNumber, secondNumber) 
It’s up to you whether you want to use this style of writing functions or not, but we’ll see some specific uses for 
"the name of this function is clickHandler. ""click"" is the event", and by adding the word “Handler” you know 
that this is a function that deals with button clicks. You can give these functions any name you like, but by fol- 
0 + 1 is 1 , so 1 is copied back into the score variable. That means the score will now be 1 . 
pressed. The function needs somewhere to store that information, so it uses a variable called event to store it. 
Figure 2-11. Enter some text, click the button
program inside the function’s curly braces, like this: 
a variable inside a function, it’s local to that function. It’s called a local variable. That 
that function’s curly braces. When you create a variable outside of a function, it’s global to 
You may have misspelled a function name. For example, maybe you spelt console.log as console. lg. 
that calls the playGame function. In later steps I’ll show you how to do this, and you’ll see how useful adding this 
The game uses another new variable called gameState. Each time the playGame function runs, it tells the player 
use an equality operator (a triple equal sign) to compare any Boolean value with a true or false value, like this: 
Because the value of gameWon can be only true or false, it provides exactly the same information as the first 
Figure 3-8. Combine strings, variables
Using functions to modularize your code might take you a bit of practice, and you might find it a bit of a brain- 
of being either true or false. All you need to do is use the Hath, round (Math. random()) 
Figure 3-14. A button’s up, hover
calls the playGame function. The code is exactly the same as the code in previous examples, but with one small 
"<p id=""output"">Enter the X and Y position (0-300)", then click fire.</p> 
"<p id=""output"">Enter the X and Y position (0-300)", then click fire.</p> 
■ In the render function, add an if statement that checks whether the game has been won. If it has
than 300. You’ll need to do this in the validatelnput function, which might look like this: 
Figure 3-27 shows what your finished game might look like, and you’ll find a working example with all these 
"<p id=""output"">Enter the X and Y position (0-300)", then click fire.</p> 
The gameMessage will be displayed by the render function, and the result is as you see it in the game. 
Figure 4-11. Take, drop
You can see that each action calls a function: takeltem, dropltem
into two parts simplifies some of the logic. Here’s the entire useltem function, and I’ll walk you through how 
The rest of the changes are in the useltem function. If the player uses the stone at the well, mapLocation 1 
different image. Figure 5-7 shows the array, the image number codes
in the keydownHandler rather than creating a special playGame function, like I did for the games in the previous 
The ship has been moved up one row. When the render function reads this new updated array, it displays the 
I’ll show you how these functions work soon, but first we need some game variables. I want the player to be 
Figure 5-12. The monster moves around randomly, but on only water 
function is long, but
It’s initialized as empty when the function starts, but you’ll soon see how we’ll add valid directions to it. When 
the function is finished running, it will contain directions that contain only WATER cells. 
Figure 5-13 illustrates how the game knows which cells are above, below
window. setTimeout (any Function, timelnMilliseconds) 
If you want to call a function continuously every second, you can use window
something you haven’t seen before: a variable that holds a reference to a function. But it’s important, because 
tickQ” in a function, like this: 
window. set Interval(function(){self.tick()j}, 1000); 
updateAnimation calls the render function every 300 milliseconds, and each time it runs it displays a new 
Figure 6-19. The main program updates the animation object, and the render function uses the object’s updated 
Figure 6-24. The explosion is displayed for one second, and then the animation loop starts over 
The buildMap function loops through all the rows and columns. It creates a monster object, a canvas element
There’s a lot going on in the buildMap function. The loop uses Object, create to make 12 new monster objects
This same function is shared by all 12 canvas tags. Here is the whole function, and I’ll explain how it works. 
this. interval = setInterval(function(){self.tick();}, 1000); 
this. interval = setInterval(function(){self.tick();}, 1000 ); 
The loadHandler calls the update function. The update function runs as a loop, approximately 60 times per 
This calls the update function in a loop, at approximately 60 times per second. This is the same technique 
requestAnimationFrame requires two arguments: the function you want to call each frame, and the canvas
window. requestAnimat ionFrame (theFunctionToLoop, theCanvas); 
The render function loops through all the objects in the sprites array. (There’s only one, the cat
This render function will work, unchanged
function, with only tiny modifications
two arguments: the function that should loop, and the canvas element that will be updated. That second argu- 
window. requestAnimationFrame = function(callback, element) { 
var id = window. setTimeout(function() {callback(currTime + timeToCall); }, timeToCall); 
issue you have to deal with. The update function, which is your game animation loop
ing example of what you can do with them. Figure 7-4 shows what you’ll see. Click the up, down
The visible property is used by the render function. If it’s set to true, drawlmage will display the sprite: otherwise 
rotate a sprite. Here’s what the new render function looks like. You won’t understand it yet, but I’ll explain it all 
The render function adds an extra if statement to check whether this shadow property is true. If it is, it uses four 
cates the functionality of the examples we’ve just looked at, but without using canvas. You can adapt this sys- 
This will display “Hello World!” if a key is pressed. If the function contains a lot of code, it’s more readable to 
We now have four direction variables that will be either true or false: moveUp, moveDown
this array in the update function to figure out which keys are being pressed, and run 
function to the cat’s X position, like this: 
Figure 7-18. The cat is free to move within the inner boundary. When it reaches one of the edges, the camera starts 
function, like this: 
function, just before the render function is called
hedgehog in Figure 8-2? You would want to use the circle, because the square shape includes empty areas in 
function hitTestPoint(pointX, pointY
functionhitTestPoint(pointX, pointY
The job of the hitTestPoint function is to return either true or false, depending on whether or not the point and 
function hitTestPoint(pointX, pointY
In Figure 8-4, the vx and vy variables have the values 5 and 5. If you substitute these in the formula above
Take a look at Figure 8-6 and you’ll notice that both the circles are 3 units wide. Half that width is 1 .5, which is 
In Figure 8-6 the vector’s magnitude is 5.9, which is much more than the total radii. That means there’s no 
Figure 8-7 shows two circles that are clearly touching. The vector’s magnitude is 1.14, which is much less than 
Figure 8-7. If the vector’s magnitude is less than the circles’ total radii, then the circles must be touching 
function hitTestCircle(cl, c2) 
The example program uses this bit of code inside the update function. It checks whether the two sprites, 
function blockCircle(cl, c2) 
The first step is to draw a vector between the rectangles. In Figure 8-1 0, the rectangular sprites are 5 units apart 
function hitTestRectangle(rl, r2) 
The example program uses this bit of code inside the update function. It checks whether the two sprites, cat 
function hitTestRectangle(rl, r2) 
Figure 8-20. The health meter is made from two sprites, each with separate images in the tilesheet 
Another if statement in the update function checks to see if the innerMeter’s width is less than 1. If it is, it 
The update function checks for a collision using hitTestRectangle. When it detects a collision, it updates the 
function blockRectangle(rl, r2) 
You learned how to make five very important collision functions in this chapter: hitTestPoint, hitTestCircle
shown in Figure 9-1. In this game, you will try to shoot down the invading aliens before they reach the bottom 
function. The entire alienArmadal.js program is enclosed within the braces of an immediate function, like this: 
setTimeout and call the render function. That’s what it does in this game too, except it also has a new job. It 
The playGame function checks to see if shoot is true and, if it is
Here’s the fireMissile function that does the work of creating a missile sprite. It sets its height and width, its 
function removeObject(objectToRemove, array) 
Remember that playGame is being called by the update function 60 times per second. Each time it runs, it adds 
fireMissile function. It creates an alien sprite, gives it a random X position
the switch statement in the update function runs the OVER case, highlighted below. 
setTimeout and calling a function called removeAlien after 1,000 milliseconds. 
function removeObject(objectToRemove, array) 
sion functions are in the collision, js file. You’ll find its tilesheet
numbers follow sequentially. Figure 10-5 illustrates this. If your tilesheet has more than one row, just continue 
When those three functions have finished running, all the game sprites will have been created and plotted in 
to be added to their own arrays so we can use them for collision detection. Before the buildMap function runs, 
Here’s the complete buildMap function, and I’ll explain how it works ahead. 
The buildMap function has one parameter: levelMap. That’s the 2D array that you want to use, which will be 
displays the words “You Lost!” in Figure 10-6, and timerMessage is the countdown timer that starts at 20 and 
the playGame function will be very familiar to you by now, but let’s take a quick tour of how it all fits together as 
all the other collision functions, in the collision.js file.) 
If all bombs are defused, it sets the gameState to OVER to end the game. 
this. interval = setInterval(function(){self.tick();}, 1000 ); 
this. interval = setInterval(function(){self.tick();}, 1000); 
This sets the gameState to OVER. It means the endGame function will be called, so let’s find out what that does. 
this. It’s been added to the playGame function, just after the existing game code. It moves the camera if the alien 
direction if the monster reaches the edge of the screen. Here’s the entire playGame function, and I’ll walk you 
Figure 10-13. If the monster’s position divides evenly into the size of the grid cell, then you know the monster is at a cell corner 
The changeDirection function chooses a random number between 1 and 7. If the number is less than 5, the 
the player around a small maze. The monsters change direction only when they’re at a passage intersection, 
function, let’s take a quick tour of how the game is put together to review some maze game basics. 
need to start at these intersections so that they can properly choose their initial direction, 
The playGame function loops through all the monster sprites in the monsters array. It moves each monster, and 
Figure 10-17 illustrates the cul-de-sacs in the maze. If the monster finds itself in one of those, it should also 
Take a good look at Figure 10-17: in each cul-de-sac, there’s only one way out. 
function isn’t called, any random valid direction will be chosen by the next if statement. It runs if the alien 
We can see from Figure 1 0-1 8 that the monster should move along the X axis, and it’s now clear that this is also 
easy thing to implement. It happens in the playGame function, within the same loop that moves the monster and 
Figure 10-19 illustrates how the game plays. When you’ve collected all the stars in the level, the game displays 
Here’s how the LEVEL_COMPLETE state is selected by the update function. When this state is set, it calls 
The levelComplete function will now be called, which does the job of displaying a message and loading the 
Because this code is being run 60 times per second by the game’s update function, the levelChangeTimer will 
function blockRectangle(rl, r2
The function first checks to see whether bounce has been given a value with the help of the typeof operator, 
If bounce hasn’t been given a true or false value," it will be an “undefined"" variable. If that’s the case"
This is done with the help of a new version of the blockCircle function. It adds a new optional third argument, 
bounceOffSurface functions do it all for you. You never need to know how they work, just how to use them in 
function blockCircle(cl, c2
function bounceOffSurface(o, s) 
You’ll find these new versions of the collision function, blockCircle and blockRectangle
in Figure 11-15. I drew them all with Adobe Illustrator, and I then laid them out as a single image in a 64-by- 
level sprites in the game program’s createOtherSprites function. Again, you’ll see how this works ahead. 
Figure 11-25. If the cat hits the hedgehog from the sides or from below, the player loses 
Figure 11-25 illustrates what happens. But if the cat is dropping on the hedgehog from above, three things hap- 
pen. The blockCircle function is used to bounce the cat away, hedgehogsSquashed is increased by one
all the new collision functions that we’ve used in this chapter. The main game code is hedgehogApocalypse. js, 
intensive math functions you can use. If you can avoid using it, you’ll save a great deal of processing power. 
functions take one argument, which is the angle value in radians. Their job is to return the ratio of two sides of 
function removeObject(objectToRemove, array) 
Figure 12-10. Use your finger to rotate the rocket, press the Go! button to make it move
in Figure 12-11. Run the carMouse.html file to try it out. The car follows the mouse, and the car rolls to a stop 
This code runs in the playGame function, so the wand’s position is updated in each frame. 
The playGame function updates the bulletTimer by 1. If bulletTimer reaches the value of timeToFire, the 
functionality with the collision detection and scrolling system. Moreover, the HTML5 drag-and-drop API is more 
function hitTestPoint(pointX, pointY
Note: How can a function work like an ordinary object? That’s because, in JavaScript
playGame function, 614-615 
section code-playGame function, 614 
playGame function, 205 
render function, 208 
dropltem function, 222 
render function, 221 
takeltem function, 219-221 
useltem function, 224-227 
buildMap function, 541 
functions, 485-486 
hitTestPoint function, 446-449 
findClosestDirection function, 588 
Functions, JavaScript 
takeltem and dropltem functions, 
createOtherSprites function, 643-644 
playGame function, 650-651 
squashHedgehog function, 655 
render function, 260 
endGame function, 277-278 
fight function, 276 
trade function, 275 
moveMonster function, 288-294 
immediate function, 107 
boolean values, 70-71 
functions, 80-89 
constructor function, 715-716 
fire bullet function, 702 
level map-buildMap function, 541-545 
changeDirection function, 574-545
playGame function, 573-574 
levelComplete function, 596-599 
endGame function, 363-365 
buildMap function, 355-358 
functions, 115-116 
playGame function, 155 
Boolean variable, 126-127 
endGame function, 124-125 
playGame function, 123-124 
render function, 319 
Boolean variable, 447 
function, 446-447 
blockRectangle function, 481 
update function, 480 
update function, 470 
built-in Math.atan2 function, 685 
playGame function, 693 
update function, 411 
anonymous functions, 407 
inline function, 406 
final render function, 397 
render function, 391 
playGame function, 677 
constructor function, 715-716 
built- in Math.atan2 function, 685 
fireMissile function, 501 
playGame function, 501-502 
removeObject function, 504 
makeAlien function, 507-508 
move-playGame function, 508-510 
endGame function, 516 
render function, 515 
set up function, 514 
immediate function, 491 
destroyAlien function, 511
removeAlien function, 513 
removeObject function, 512 
only a few functions from its design. For such a System, C++ or any successor would seem too large as all the languages at the time demanded a larger footprint than what was 
Lambda (Java's implementation of lambda functions), Jigsaw (Java's implementation of modules)
function does not need to be mangled with error checking codes, thus making the code more readable. This new way of error 
The primitive types are used to represent boolean, character
Java's primitive types are boolean, byte
Program flow can be affected using function/method calls, loops and iterations. Of various types of branching constructs
Here the condition is an expression. An expression as discussed earlier is any Statement that returns a value. while condition Statements evaluate to a boolean value, that is
true or false. As long as the condition is true, the loop will iterate the block of code over and over and again. Once the condition evaluates to false
The do-while loop is functionally similar to the while loop, except the condition is evaluated AFTER the Statement executes 
The do-while loop is functionally similar to the while loop, except the condition is evaluated AFTER the Statement executes It is useful when we try to find a data that does the job 
} while (boolean expressionjf, 
9 boolean found = true; , 
9 boolean found = true; , 
9 boolean found = true; , 
Boolean values are values that evaluate to either true or faise, and are represented by the boolean data type. Boolean expressions are very similar to mathematical expressions
Comparative operators can be used on any primitive types (except boolean)," but only the ""equals"" and ""does not equal"" operators work on objects. This is because the "
Java offers both object types and primitive types. Primitive types are used for boolean, character
Primitive types are the most basic data types available within the Java language; these include boolean, byte
Besides these logical bitwise functions, there are also operators to assign numbers to variables (x = - 5 ): 
Java Literais are syntactic representations of boolean, character
The code section 3.62 contains two number literals followed by two boolean literals at line 1, one string literal followed by one number literal at line 2
There are no other boolean literals, because there are no other boolean values! 
practice to use the suffix l instead of l to avoid confusion with the digit l (one) which looks like l in many fonts: 2001 ^ 2001 . If you want a short integer literal, you have to cast 
Unboxing uses the same process in reverse. Study the following code for a moment. The if Statement requires a boolean primitive value, yet it was given a Boolean wrapper object. 
expressioni is a boolean that will throw the assertion if it is faise. When it is thrown, the assertion error exception is created with the parameter expression2 (if applicable). 
The following is a declaration of a private boolean field named initiaiized, and its use in a method named synchronizeConnect ion. 
It Starts a do-while looping block. The do-while loop is functionally similar to the while loop, except the condition is evaluated öfter the Statements execute 
function) if the method is small enough. Sometimes it is required to use it. For instance, a nested dass can only access the members of the top-level dass if they are final. 
Java also provides special cases of the pow function for square roots and cube roots of doubles, double Math. sqrt (double) and double Math. cbrt (double). 
double Math. log (double) returns the natural logarithm of the parameter (not the common logarithm, as its name suggests!). 
Java provides inverse counterparts to the trigonometric functions: Math. asin (x) , and Math. acos (x)
These methods are very simple comparing functions. Instead of using if ...eise Statements, one can use the Math. max (xi
Note that a Unicode escape sequence functions just like any other character in the source Code. E.g., \u0022 (double quote
An example for a simple type is the byte type. An example for a complex type is a dass. A subset of the complex types are classes that cannot be modified after creation, like a 
SortedSet subSet(E fromElement, E 
■boolean addAll (int index, Collection c) 
the threads were put to sleep using the Thread. sieep (...) function, the execution intervals and order can be predicted quite capably. The thread with the least amount of sleeping time 
"source: Object 


+EventObject(source: Object) 
+getSource(): Object 
+toStringO: String 


«interface>> 

EventListener 


o 


EventListenerProxy 


■+EventListenerProxy(listener: EventListener) 
+getEventListener(): EventListener 


TooManyListenersException 


+T ooManyListenersException 0 
+TooManyListenersExceptjon(message: String) 


The basic Event Model framework 


40 sur 77 


30/01/2016 20:10 



























































































Java Programming/Print version2 - Wikibooks, open books for an open... https://en.wikibooks.org/w/index.php?title=Java_Programming/Print_ve... 


Degrees of freedom in the Model 

There's one more thing to notice about the Event Model and that is what is not in the Model. The Event Model is designed to allow implementations a large degree of freedom in the 
implementation choices made, which means that the Event Model can serve as the basis for a very wide ränge of specific, purpose-built event handling Systems. 

Aside from naming conventions and some base classes and interfaces, the Event Model specifies the following: 

■ It must be possible to register and deregister listeners. 

■ An event source must publish events by calling the correct notification method on all registered listeners. 

■ A call to an event notification method is a normal, synchronous Java call and the method must be executed by the same thread that called it. 

But the Event Model doesn't specify how any of this must be done. There are no rules regarding which classes exactly must be event sources, nor about how they must keep track of 
registered event listeners. So one dass might publish its own events, or be responsible for Publishing the events that relate to an entire collection of objects (like an entire component). And 
an event source might allow listeners to be deregistered at any time (even in the middle of handling an event) or might limit this to certain times (which is relevant to multithreading). 

Also, the Event Model doesn't specify how it must be embedded within any program. So, while the model specifies that a call to an event handling method is a synchronous call, the Model 
does not prescribe that the event handling method cannot hand off tasks to another thread or that the entire event model implementation must run in the main thread of the application. In 
fact, the Java Platform's Standard user interface framework (Swing) includes an event handling implementation that runs as a complete Subsystem of a desktop application, in its own thread. 

Event notification methods, unicast event handling and event adaptors 

In the previous section we mentioned that an event notification method usually takes a single argument. This is the preferred Convention, but the specification does allow for exceptions to 
this rule if the application really needs that exception. A typical case for an exception is when the event notification must be sent across the network to a remote System though non-Java 
means, like the CORBA Standard. In this case it is required to have multiple arguments and the Event Model allows for that. However, as a general rule the correct format for a notification 
method is 

Code section 1.1: Simple notification method 

I-1 

i i 

«public void specificEventDescription (Event_type evt)i 

i i 



Another thing we mentioned earlier is that, as a general rule, the Event Model allows many event listeners to register with a single event source for the same event. In this case the event 
source must broadcast any relevant events to all the registered listeners. However, once again the Event Model specification allows for an exception to the rule. If it is necessary from a 
design point of view you may limit an event source to registering a single listener; this is called unicast event listener registration. When unicast registration is used, the registration method 
must be declared to throw the java .utn . TooManyListenersException exception if too many listeners are registered: 



Code section 1.2: Listener registration 



'public void add<Event_type>Listener(<Event_type>Listener listener) throws java. uti1 . TooManyListenersExcept iom 




Finally, the specification allows for one more extension: the event adaptor. An event adaptor is an implementation of an event listener interface that can be inserted between an event source 
and an actual event listener dass. This is done by registering the adaptor with the event source object using the regulär registration method. Adaptors are used to add additional functionality 
to the event handling mechanism, such as routing of event objects, event filtering or enriching of the event object before processing by an actual event handler dass. 

A simple example 

In the previous section we've explored the depths (such as there are) of the Java platform Event Model framework. If you're like most people, you've found the theoretical text more 
confusing than the actual use of the model. Certainly more confusing than should be necessary to explain what is, really, quite a simple framework. 

In order to clear everything up a bit, let's examine a simple example based on the Event Model framework. Let's assume that we want to write a program that reads a stream of numbers 
input by the user at the command line and processes this stream somehow. Say, by keeping track of the running sum of numbers and producing that sum once the stream has been completely 
read. 

Of course we could implement this program quite simply with a loop in a main() method. But instead let's be a little more Creative. Let’s say that we want to divide our program neatly into 
classes, each with a responsibility of its own (like we should in a proper, object-oriented design). And let’s imagine that we want it to be possible not only to calculate the sum of all the 
numbers read, but to perform any number of calculations on the same number stream. In fact, it should be possible to add new calculations with relative ease and without having to affect 
any previously existing code. 

If we analyze these requirements, we come to the conclusion that we have a number of different responsibilities in the program: 


■ Reading the number stream from the command line 

■ Processing the number stream (possibly multiple of these) 

■ Starting the entire program 


Using the Event Model framework allows us to separate the two main responsibilities cleanly and affords us the flexibility we are looking for. If we implement the logic for reading the 
number stream in a single dass and treat the reading of a single number as an event, the Event Model allows us to broadcast that event (and the number) to as many stream processors as we 
like. The dass for reading the number stream will act as the event source of the program and each stream processor will be a listener. Since each listener is a dass of its own and can be 
registered with the stream reader (or not) this means our model allows us to have multiple, independent stream processing that we can add on to without affecting the code to read the stream 
or any pre-existing stream processor. 

The Event Model says that any state associated with an event should be included in a dass that represents the event. That’s perfect for us; we can implement a simple event dass that will 
record the number read from the command line. Each listener can then process this number as it sees fit. 


41 sur 77 


30/01/2016 20:10 

















































Java Programming/Print version2 - Wikibooks, open books for an open... https://en.wikibooks.org/w/index.php?title=Java_Programming/Print_ve... 


For our interesting event set let's keep things simple: let's limit ourselves to having read a new number and having reached the end of the stream. With this choice we come to the following 
design for our example application: 



In the following sections we look at the implementation of this example. 

Example basics 

Let's Start with the basics. According to the Event Model rules, we must define an event dass to encapsulate our interesting event. We should call this dass something-somethingEvent. Let’s 
go for NumberReadEvent, since that's what will interest us. According to the Model rules, this dass should encapsulate any state that belongs with an event occurrence. In our case, that's 
the number read from the stream. And our event dass must inherit from java. util. Eventobject. So all in all, the following dass is all we need: 

Code listing 1.1: NumberReadEvent. 


package org.wikibooks.en.javaprogramming.example; 

Import java.util.EventObject; 

public dass NumberReadEvent extends EventObject { 
private Double number; 

public NumberReadEvent (Object source, Double number) { 
super (source); 
this. number — number; 

} 

public Double getNumber () { 

return number; 

} 

} 


Next, we must define a listener interface. This interface must define methods for interesting events and must extend java. util. EventListener. We said earlier our interesting events were 
number read"" and ""end of stream reached", so here we go: 
derivative or a sub-class of the component dass and when placed over a Frame, displays as a blank area. 
Allowing buttons to carry out tasks or utilize a user's input is a bit more complicated. These functions require an ActionListener, and will be discussed in ActionListener section. 
Although Java comes with the Java 3D library other libraries have been developed over time with similar functionality. Thus, unlike many other areas of Java development explored in this 
Java detect the operating System and load the correct one at runtime. Many of the Standard library classes depend on JNI to provide functionality to the developer and the user (file I/O, 
and treat the UTF-8 strings returned or passed into the functions as Standard UTF-8 strings instead of modified UTF-8 strings. Programs should use the Newstring, GetstringLength
A JNI environment pointer (jNiEnv*) is passed as an argument for each native function mapped to a Java method, allowing for interaction with the JNI environment within the native 
As you can see the javac Compiler doesn't Strip any (public) variable name from the .dass file. As a result the names of the functions, their parameters and types of return are exposed. (This 
<0-3 bytes padding>, defaultbytel
[0-3 bytes padding], defaultbytel
A Compilation of the Document or its derivatives with other separate and independent documents or works, in or on a volume of a storage or distribution medium
the functionality of a web browser, servlets dynamically extend the functionality of a web 
Fifty keywords are currently defined in the Java language (see Table 1-1). These keywords, 
much of the functionality that comes with Java. Indeed, part of becoming a Java programmer 
#16/1, 8th Main Road
Program defensively. Functions should be simple and do a distinct, defined task. 
Create reusable functions and Keep the functions as simple, immutable and manageable 
When naming your variables and functions, choose names that are meaningful and 
4. Functions: Functions allow programmers to break their programs down into smaller, more 
would contain lines 1-12, the xx01 file would contain lines 13-61
lines 62-100, the xx03 file would contain lines 101-123 
7 =4+4+ 2 +41 (read, write and execute) 
"printf(""The sum of a and b = %d", sum); 
SI=(p*r*t)/100; Boolean logic, on the other hand
Robots can be classified based on their functionality, such 
"char ‘name’ [8]|/=4""E: 5 «1-5. «Ne", 
used to extend its functionality, and developers can also create 
is focused on writing programs using pure functions, which 
based on the principles of mathematical functions, and 
In functional programming, the emphasis is on writing 
functional programming languages include Haskell, Lisp
data and behavior, but shares the same structure and behavior 
including functional testing, regression testing
testing that focuses on verifying the functionality, reliability
performance and functionality of the API. To sum up, API testing is a 
variables and mathematical functions, rather than 
neti 2 = 4 Call, ey als as
if not (isinstance(x, int) and isinstance(y
"print(""The value of a and b are: ", a
"Albert Einstein': '@3/14/1879', 
Benjamin Franklin’: '@1/17/17@6'", 
"Ada Lovelace': '12/10/1815', 
Donald Trump': '@6/14/1946'", 
"Rowan Atkinson’: '@1/6/1955'} 


print('Welcome to the birthday dictionary. We know the birthdays of:') 
for name in birthdays: 


print(name) 


print('Who\'s birthday do you want to look up?') 
name = input() 
if name in birthdays: 
print('{}\'s birthday is {}.'.format(name, birthdays[name])) 
else: 


print('Sadly, we don\'t have {}\'s birthday. '.format(name) ) 


829 


Question 171 


Question: 


Write a program to find the name and location of the file that is currently running. 


Solution: 


import os 


print(Current File Name : ", os.path.realpath(__file_)) 
used functionality, such as input/output
int main() — This line defines the main() function, which is the entry point of the 
return @; — This line returns a value of @ from the main() function, indicating that 
problematic function call. Once the testing is complete, the comment can be removed and the 
variable can be accessed. Variables declared inside a function have local scope, which means 
function is used to scan input from the user, and the printf function is used to print output to 
manipulated using various string functions, such as strlen()
strcat() functions are used to concatenate two strings, and the strcmp() function is used to 
function is used to input strings from the standard input, while the printf() function is used to 
terminated by a null character '\O'. String functions can be used to manipulate strings, and various 
C language does not have a built-in Boolean data type. However, C99 introduced a new data 
type called _Bool (or bool) which can be used to represent Boolean values. Additionally, the 
if statement to create a Boolean expression. Since a is nonzero and b is 0, the expression 
main function, we declare two integer variables a and b and assign them the values 100 and 200
respectively. We then call the max function and pass it a and b as arguments, storing the result in 
Functions can also have multiple return statements, which allows for early termination of the 
returns the result. In the main function, we prompt the user to enter a positive integer and store it 
Functions can also have default arguments and variable-length arguments, but these are more 
to a file. We then open a file named example.txt for writing using the fopen function, which 
fgets function to read up to 100 characters from the file into the buffer. Finally, we print out the 
many useful functions, such as input/output
functional, and generic programming. C++ is widely used for developing applications
e int main() {: This line declares the main function, which is the entry point of the 
program. int is the return type of the function, which indicates that it will return an 
function, it specifies the entry point of the program. 
they can be accessed in a program. A variable declared inside a function, for example
be accessed within that function. A variable declared outside of any function, on the other hand
the main function, but only the global variable can be accessed outside of the function. Overall
Note that the math library also provides many more functions than what is covered here, such 
as hyperbolic functions, inverse trigonometric functions
Note that boolean values are commonly used in conditional statements, loops
using a different name. References can be useful for passing arguments to functions, as they 
References can be useful for passing arguments to functions by reference, which allows the 
This declares a function named doubleValue, which takes an integer reference as an argument 
Pointers can be useful for passing arguments to functions, as they allow the function to access 
This declares a function named doubleValue, which takes a pointer to an integer variable as an 
This declares a function named add, which takes two integer arguments and returns their sum
and height to the console. In the main() function, we create an object r of the Rectangle 
message to the console when the object is destroyed. In the main() function, we create two 
data and behavior, and to create objects that represent real-world entities or concepts. They can 
function," we throw a MyException object with the message ''Custom exception""'"
world and providing a public interface to access its functionality. In C++, encapsulation is 
from the outside world. The calling code can only interact with the public member functions, 
Triangle add their own implementation of the area() function, which overrides the 
main() function, we create objects of type Rectangle and Triangle
polymorphism is achieved through the use of virtual functions, which are functions that can be 
makeSound() function on the Animal* pointer, the actual function that gets called depends on 
call the makeSound() function on the Animal* pointer, the actual function that gets called 
wide range of functionality, including input/output
a boolean expression that is evaluated before each iteration of the loop, and update is an 
which are functions that can be called on an object of the class. For example, we can add a 
e Boolean Variables: Boolean variables are used to store boolean values, which are either 
value (True or False). Examples include ==, !=
defined using the def keyword followed by the function name, input parameters (if any)
function is called. Here is a simple example of a function that takes two input parameters, 
function. To call this function, you simply provide values for x and y in the parentheses: 
This will call the add_numbers function with x = 5 andy = 3, and assign the result (8) to 
other functions. For example, you can use a lambda function to define the key parameter for 
OOP provides a way to encapsulate data and behavior into reusable and modular components, 
functionality, such as virtualenv and conda. These tools allow you to create isolated Python 
This opens the file filename.txt in read mode. The open() function returns a file object, 
JavaScript Allongé: A strong cup of functions, objects
new table. This table contains two functions defined by keys, push and pop. Both operations 
After you call the push function, the element is appended at the end of the out table. 
insert and table . remove functions. However, this will add unnecessary overhead because 
functions: a push, a pop
local tr2 = function (t, v) 
local function addKV(k, v) 
newindex = function (t, k
lorem = local_functionl , 
ipsum = local_function2 , 
var2 = 1 sit ' , 
var2 = 1 sit 1 , 
local function fl(a, b) 
function try(fn, catch_fn) 
local function xpcall2 (fn, . ..) 
function calls, but also handles getting the trace back with the debug . traceback 
lua . h header file or lua . hpp for C++ source code. You can rely on this set of functions, but 
"{ ""myfunction"" ", lua_example_myfunction} 
"stack . setField<bool> ( ""boolean"" ", false) ; 
lua_pushboolean (L, (int)true); 
lua_pushboolean (L, (int) false); 
API function lua_to*, for example
function SDL_assert (condition, msg) 
It's more efficient to use the table of event functions than the usual approach with the if, 
can be achieved with the sdl . SDL_init function, where the only parameter is a bitmask 
you call this function only once for each event loop iteration. If there are no events pending, 
event functions stored in a table, which is explained in the previous recipe in detail: 
Mouse cursor centering can be achieved with the sdl . SDL_WarpMouse function, where 
By putting the sdl . SDL_WarpMouse function inside the mouse movement event handler, 
AddTimer function, where it accepts two parameters instead of three. The first parameter is 
specified in the second function argument into the event queue. Fortunately, event handling in 
handler will always try to query the timer function from the timers table, as shown in 
local function createTimer ( interval , fn) 
The remove function will stop the timer and destroy the timer object. Without this step, you’d 
be relying on the automatic cleanup functions of the operating system, which is never a good 
function. However, there's a catch to call this function properly mainly due to Lua++ binding. 
You can create a new empty surface with the SDL . SDL_CreateRGBSurf ace function, 
ConvertSurf ace function, which creates a new surface. The existing pixel data will be 
local surface = function (width, height
obj.blit = function (destination, srcRect
function returns a 32-bit value of the selected color. Of course, you can store these values 
function hsl2rgb(h, s
function rgb2hsl(r, g
function cmyk2rgb(c, m
function rgb2cmyk(r, g
functions, you'll need the OpenGL wrapper library that provides an interface to those 
functions. Fortunately, there’s one available on GitHub repository for free. You can 
standard set of functions while other functions may be marked as deprecated. What's more, 
glGet function, which you can find on the web page http : //www. opengl . org/sdk/ 
The Gl . Get function offers a powerful querying capability. It unifies the glGetBoolean, 
dynamic bindings to OpenGL extension-specific functions. Without GLEW, this was usually 
Load function, where the only parameter is the image filename. If there is such a 
first function will always try to detect the image format, the second one accepts an image 
Even if you choose to load the image file with the sdl . SDL_iMG_Load function, it uses 
function, which will return a Lua table with texture identifiers. This function has only one 
this function. The first one is called gl . TexParameteri, which only accepts integer values. 
With these functions, you can also set the offsets for each dimension. Notice that these 
There are four versions of the function you can use to load the sdl . TTF_OpenFont, sdl . 
This recipe will contain the whole text drawing function, which you can reuse and modify to 
function ttf_print(x, y
for 1=1, #text do 
local function allocBlock (width, height) 
The function for the first phase will consist of two input parameters, the name of the tileset 
function getTile (tileset_name, tile_name) 
function transf ormCoordinates ( tileset_width, tileset_height 
function drawTile ( tileset_name , tile_name
With this function, you can place tiles anywhere on screen. The polygon position is defined 
This function accepts one of these parameters, gl_cw and gl_ccw. The first one renders 
you can use the OpenGL utility functions (GLUT) to draw more complex objects such as curves, 
To get access to the OpenGL functions from the Lua language, you'll need to use the LuaGL 
The vertex position can be defined by these two functions— gl .Vertex2f (x, y) and 
coordinates for the next vertex. These can be set with the functions: gl .TexCoord2f (u, v) 
function that calculates the final color value. For example, the gl_func_add blending function 
Space objects will be drawn with the drawObject function, which will accept one 
parameter— object color. This function will draw an object at position (0,0
resets into identity matrix. The next operation is to scale with the gl . Scalef function, but 
matrix into stack memory with the gl . PushMatrix function. After scaling, you can draw the 
function, which will set up the projection matrix. The following code shows you how to use 
The OpenGL function, gl . Frustum
the gl . Frustum function. As you can see, the gl . Perspective function is actually 
function computeFrustum ( f ov, screen_aspect_ratio 
Notice that the gl . Materialfv function accepts the Lua table, whereas gl .Materialf 
the gl . FrontFace function. By default, OpenGL uses gl . FrontFace (gl_enum . GL_CCW) 
the gl . Vertex function for each vertex, you can load vertices into the memory in a batch. 
or matrices. This means functions such as gl .Vertex, gl . Rotate
You can set the uniform variable by one of these three functions: gl .Uniformi, 
There are four versions of this function. One for each type of value: integer, unsigned integer
OpenGL offers a very powerful function, gl . CopylmageSubData. It allows you to copy data 
local function setUniform (var_type, name
local function pro j ectionMatr ix ( f ov, aspect
The whole light reflection algorithm is packed into one function, processLighting. 
for the current texel. It means that all values are now in the range (0,1)
use the setuniform function from the previous chapter, which will make setting uniform 
local function handleEvent (name , ...) 
local function addHandler (name , fn) 
local function pro j ectMouseCursorToWindow (mouse_x, mouse_y) 
local function isMouseOverWindow (mouse_x, mouse_y) 
the inverse of this transformation matrix will produce a reverse transformation. In this case, 
Notice that window rendering relies on two functions, update and draw. The update function 
three functions, namely
obj .propagateSignal = function (name , ...) 
obj . callSignal = function (name , ...) 
ob j . addSignal = function (name , fn) 
obj .projectMouseCursorToWindow = function (mouse_x, mouse_y) 
ob j . isMouseOverWindow = function (mouse_x, mouse_y) 
function (self , x
local function handleEvent (name , ...) 
buffer. This is set by the gl . stencilFunc function, where the first parameter presents a 
comparator function, the second is a reference value
behavior of the stencil test is set by the gl . stencilop function, where this first parameter 
Now that you've got the basic functionality to draw and manipulate windows, you can design 
function (self , x
function (self , x
function (self , x
function (self , x
local function isPrintable (key, mod) 
local function processKeyboard (key, mod) 
function (self , x
function ( self , key
local function handleKeystroke (key, mod) 
function, resulting in the following code: 
local function processKeyboard (key , mod) 
libSDL Lua binding called LuaSDL2. There are three clipboard functions: hasClipboardText, 
The LuaSDL2 library obeys function specifications used in the plain libSDL2 library, so using 
function, you can use the FixtureDef object as well. This way you can set all the important 
local function createBullet (position, radius) 
local function createWall (position, size) 
in the createBullet function near the end. With this, bullet objects can run really fast and 
This function accepts three parameters: the size of a time step, number of iterations for the 
contact_listener . preSolve = function (contact , oldManifold) 
contact_listener . postSolve = function (contact , contactlmpulse) 
the callback functions are defined in the Lua environment, it’s fairly easy to postpone such 
This function is used when two objects cease to collide. Similarly, as with the beginContact 
callback function, you've got only one parameter— the Contact object. 
local makeBox = function (position, size
function, which is defined for two input coordinates: 
illustrate the usage of the Cantor pairing function for more dimensions, its primitive form will be 
defined as a function cantor (ki , k 2 ) 
local function cantor3D(kl, k2 
local function cantorPair (kl , k2) 
index = function (_, k) 
newindex = function (_, k
local cellTestFn = function (cell , position) 
local function neighbours (positionO , fn) 
The most important is the neighbours function, which determines where to go from 
local tr2 = function (t, v) 
local function addKV(k, v) 
newindex = function (t, k
function solver (mapCells , startPoint
local function cantorPair (kl , k2) 
local function reconstructPath (cameFrom, goal) 
local function heuristicCostEstimate (pO , pi) 
local function cost(pO, pi) 
function solver (mapCells , startPoint
neighbor cell is determined by the cost function, which will return step cost 1 if you can pass 
function, the shape of a frontier ring is formed differently. The ring expands more in the 
of a truth value, whereas Boolean logic uses a binary set of true or false values; fuzzy logic 
local function min (a, b) 
return function (x, y) 
local function max (a, b) 
return function (x, y) 
local function crop (rangeMin, rangeMax) 
local function mergeSets(a, b) 
Truth values usually take one of these three shapes: triangle, trapezoid
local function triangle (a, b
local function trapezoid (a, b
local function gauss (deviation, mean) 
local function solve (_, inputs) 
add = function (a, b) 
mul = function (a, b) 
index = function (_, name) 
newindex = function (_, name
premise = false, 
The third step is the implementation of three functions computelmplication, 
local solve = function (_, inputs) 
audio callback function, which isn't very usable in the Lua language environment. 
to work. This function accepts four parameters: sampling frequency, audio format
function accepts one or two channels, so you can have mono or stereo output. 
functions to sound channels, such as volume control
with the sdl. Mix_LoadWAV function. Regardless of its name, it can load sound 
function. It accepts three arguments, namely
Channel can be stopped with the SDL.Mix_HaltChannel function, which accepts 
All functions in this recipe are channel oriented, which means you can control the sound 
can use the channel number -1 in the SDL . Mix_PlayChannel function, so LuaSDL will pick 
You can query specific channels for their status with the functions sdl . Mix_Playing, sdl . 
1. To load a sound file into memory with the sdl . Mix_LoadMUS function. In this case, 
function, and for the fade out effect
by a separate set of functions, so it's guaranteed that sound samples won’t disturb the 
The sdl . Mix_LoadMUS function can decode other kinds of sound formats, such as MP3 and 
7. Now you can assign a function to the poll, which will be used after you receive 
instead of using the bind function to listen for connection, you'll be using the connect function: 
There are a few more notable differences. A function to start polling, poll . start ( ) 
By using the socket . bind function, you'll create a listening part of the socket and it'll accept 
Do note that the bind and connect functions are non-blocking. Therefore, code execution will 
There are two functions used to send and receive messages. To send a message, just call a 
function socket . send, which accepts at least one argument as a string value. This string will 
socket . recv will receive only one message. The other function, socket . recvAll
can be done with the socket . send function, while adding a second argument with the zmq . 
socket . sendMultipart function, where you can place all parts into a single table 
Polling must be started with the poll . start function, otherwise it will have no effect. 
a new thread with the context . thread function, which expects at least one 
Threads are created with the context . thread function, where the first argument is always 
functions 128, 129 
functions, text rendering 94 
moving 130-137, 255 
ipairs function, extending 14 
3-6158181.html). This is a cutting-edge trend that will continue, and game 
capitalized. Class “methods” are often referred to as functions, for this word 
threaded functions, then they would run in parallel with the main loop
The square root function, sqrtO
worker thread that runs in a function called thread_functi on, both of which 
C++ language a huge boost in functionality, covering a diversity of subjects
Windows API GetTickCount! ) function, which was used previously. 
3. “AMD Phenom-II X6-1090T Black Edition Processor Review”; June 5, 
function. Previously, variable testDi visor was incremented until the root of a 
is just a subset of code from the previously larger f i ndPri mes ( ) function, which 
though. The testPrime( ) function, in particular
to call any additional function to get it started, it just takes off. 
with optional thread function parameters, as we have seen in the threaded prime 
wish in the function. However, if you need to return a value by way of a 
function or block of code is “locked” until that thread “releases” it, and no other 
cases (4-5, 8-9). The point is
threading function like POSIX threads. Fortunately, the two are already similar. 
loop inside your thread function, it will run once and terminate with the 
function method, if only because it allows for smaller
thread function, you have programmed it to update all of the sprites in the entity 
The thread function runs in a tight loop with no timing whatsoever, so it runs 
call to the update function in your game’s source code, and a pointer to the 
entity is passed to this function each time. Now, if your tightly written thread 
bit of overhead with all of the function calls, but the advantage is that now we 
Returning to the subject of single-run thread functions, there is another draw- 
thread function call theory would utilize multiple cores, since the operating 
will find a folder called Alibraries\pthreads-w32-2-8-0-release that includes ready-to-use headers, 
processing. This function should contain its own loop, but should have exit logic 
This brings us to the pthread_exit function, which terminates the thread. 
create and a thread function, knowing how to create the function and use it. 
require a function; rather, it requires a struct variable. In our simplistic approach 
the thread functions, will prevent data read/write conflicts. You must destroy the 
In the main function of our program, we can then wait for the thread counter to 
inside that thread function is very tight and fast, meaning there are a lot of 
running (when the thread function returns). I always like to see a quick, simple 
bad memory location specified for the thread function, thread parameter
The thread function starts executing when the thread is created. Normally, a 
thread function will have some distinct process to run, such as sorting data in a 
have to open up a function and modify it, that’s a good sign that it was poorly 
The core system makes calls to the following functions, which are declared as 
rendering functions defined yet. Though, technically
30-60 seconds for each build, you will welcome the speed boost that this 
helper functions to actually get the mouse position on the screen— or, more 
and ScreenToClientO functions, which you will see in the code listing. 
the block of code bounded by these function calls, and no rendering can occur 
the operator<() function, as the current crop of overloads support only a 
To illustrate the functionality of the initial version of this new engine, well write 
theory behind any of these math functions, nor does this text attempt to derive 
is 1 + 3 = 4, for a target point of (6
functions to make it easy to copy, multiply
classes and related functions treat vectors interchangeably with points, we will 
function that calculates the arctangent of two deltas— first the Y delta, then the 
The atan2() function requires the del taY first, then the deltaX parameter. Here 
includes the angular velocity and angle-to-target functions, which I will explain 
in a more convenient way (as opposed to writing examples with C++ functions, 
[ 10*2, 18*2
The same premise for matrix multiplication holds true for addition, subtraction
the functionality in D3DXMATRIX immediately, because that could lead to bugs in 
functions with our own eventually. What we do want is to learn, and as long as 
and functions without reinventing the wheel all at once. Later on, perhaps this 
added functionality beyond its parent, D3DXMATRIX. I have included rudimentary 
use of any intrinsic helper functions inside D3DXMATRIX, as well as the grand- 
multiply the radian value by 180 / tt. Conversely, to convert from degrees to 
then filled by the function D3DXMatrixLookAtLH, which creates a view based on 
function, but it also needs to provide basic camera positioning and orientation 
functions. At minimum, you will want to move the camera to track an object 
handled for us in the Engine::Update() function, all we need to do on the “front 
mesh rendering function. (More on this in Chapter 9, “Mesh Loading and 
parameters in this function definition, we need concern ourselves with only 
of techniques and vertex/pixel shader functions within, but since that combined 
VertexShaderFunction and Pixel ShaderFuncti on. Normally, a technique will 
function, like a diffuse light shader or a normal mapping shader. 
setProjecti onMatrix( ) functions, respectively. Below is the header file for a new 
The parameters for each function are self-explanatory. In some cases, we are 
Calculating the inverse of a matrix is rather complex, involving some derivation 
D3DXMATRIX inverse, wit; 
D3DXMatrixInverse( &inverse, 0
carried on to a calling function. If you wish, you may combine the function calls 
function, declared with a #define). In addition to providing a conversion to a 
functions that previously supported only D3DC0L0R. For instance, in Engine
D3DXMATRIX inverse, wit; 
D3DXMatrixInverse( &inverse, 0
function looks for blocks without expecting them in any particular order, since 
functions when calling Mesh::Draw() since they are already being called. (Again, 
functions in the class that will not be used immediately — namely, the render 
Normalize function on an existing vector with length, which results in a vector 
D3DXMATRIX inverse, wit; 
D3DXMatrixInverse( &inverse, 0
Now we come to the vertex shader function, which accepts the input struct as a 
and inverse/transform matrices, and the light source and specular highlight 
D3DXMATRIX inverse, wit; 
D3DXMatrixInverse( &inverse, 0
D3DXMatrixInverse( &wit, 0
While game engines were once designed to function in a limited gameplay area, 
getHeightO function retrieves the height value at a given X,Z position in the 
data inside a .X file can be loaded by either function, but transforming
The function for loading animation data, skin info
book. We do cover the most important functions and structures, but not any of the minutia. 
The functions implemented in the MeshLoaderCall back function are required, and their 
for each frame in the tree. This could be done in the render function, but we will 
update function that’s guaranteed to run as fast as possible. To render the tree, we 
call a recursive function, drawFrame! )
DrawMeshContai ner is similar to our old static mesh rendering function, in that it 
function transitions animation from one set to another, performing a slight 
renders rectangular shapes using orthogonal projection. This new functionality, 
engine core calls game_render2D( ) inside these two function calls, so our game 
function alone, and we can even get animation by manipulating the source 
no functionality on its own, we well build our own Rect class with all of the 
properties and functions— and as such, it is similar to just a simple struct. I did 
functions, while enforcing good OOP structure
variable or function naming, or accessor/mutator usage. Let us keep it simple for the sake of learning. 
ment. The Sprite class has some functionality that we’re not using yet, but 
functionality at a lower level, you can tell the sprite Tenderer (ID3DXSpri te) 
contained function. This function creates a matrix with scaling, rotation
function called unzLocateFileO; if found, then this function will return UNZ_0K. 
Be sure to add the three zip asset functions (LoadAsset, LoadTextureFromZi p
manner. By adding this functionality to the engine, we gain some impressive 
usual function calls: ClearO, Begi nScene( )
line-drawing functions we’ll develop. For example, you could use the Bresenham 
don’t need a profiler to prove that these two function calls are the bottleneck, 
to Distance! ) and Angl eToTarget! ) could be moved into the update function, 
will function at a high level, taking care of most of the lower-level details like 
scrolling game out of it. Note the two update functions, updateBounded( ) and 
function, as they will refresh the scroll buffer based on the current scroll 
function, and vice versa
functions used internally by the engine to update, draw
That odd-sounding bury Enti ti es ( ) function is actually quite descriptive, 
functionality to the entity manager, this is where you will want to do that 
functions, while the code in the loop is pipelined and probably would not even show up in profiling. 
Like the enti ti esRender2D( ) function, enti ti esRender2D( ) also iterates through 
Now for the timer events. The game_event function receives all events, and the 
pure virtual functions required by the base class. As you’ll recall, Enti ty : : Update! ) 
works out fine for the existing Sprite: :Update function, which was declared with 
Our Entity class requires a Render!) function with no parameters, but the 
in this new function. When creating a new managed sprite, we must be careful to 
parameter Render!) function will be retained, it is not possible to use it from 
D3DXMATRIX inverse, wit; 
D3DXMatrixInverse( inverse, 0
D3DXMatrixInverse( &m, NULL
D3DXMatrixInverse(&matInverse, NULL
method just covered checks the mesh faces for an intersection, which can be 
D3DXMatrixInverse( &m, NULL
D3DXMatri xln verse (&mat Inverse , NULL
intersection, where we test to see if a point falls within the boundary of a 
This program also tests point-rectangle intersection testing, which is a form of 
These new functions are added to the Eng i ne . h file to handle it. Or, if you prefer
just use the ShowCursor function directly, but I prefer to abstract both the 
spri te->setPi vot( Vector2(128*0.75,128*0.75) ); 
“picking” function developed earlier, called intersectsCoordsToMeshO. But that 
leads to a problem: this function requires the projection and view matrices, and 
D3DXMatrixInverse( &m, NULL
D3DXMatrixInverse(&mat Inverse, NULL
spri te->setPi vot( Vector2 ( 128*0 . 75 , 128*0 . 75 ) ); 
Direct3D function D3DXComputeBoundi ngBox, and for a bounding sphere
function D3DXComputeBoundi ngSphere. Using a bounding cube, we can use simple 
function called Attract!), which simulates attraction between two objects of 
D3DXMatrixInverse( &objects[n]->wit, 0
improvements. You may recall the Engine: : Update ( ) function, which was first 
Since there are nested for loops in the testForCollisionsO function, each 
Attract! ) function shortly. Only the relevant code is provided, while functions 
D3DXMatrixInverse( &wit, 0
still functioning entirely in 2D. Now, at last
inverse/transpose matrices, 225 
D3DXMatrixInverse , 224 
helper functions, Camera class
inverse matrices, 224
inverse, 224
thread function, 98-101 
point-rectangle intersections, 
crunching functions, 46 
mesh intersections, 511-513 
point-rectangle intersections, 
renaming functions, 111 
functions, 143 
functions, 5
Function, rewrite thyself! 
Chapter 3 . Functions, covers functions that JavaScript uses
Function, Boolean
Appendix B . Built-in Functions, is a reference of built-in JavaScript functions together with 
function sum(a, b) { 
declare your intention using (once per function, or once for the whole program) the following 
generator functions, to also enforce strict mode
some work. The Programmer object only needs to implement more specific functionality, such as 
from A and B extends A. Also, the object that inherits can pick one or more methods and redefine 
v4 = 4, 
parselnt() function as a string with a radix of 2, as follows: 
use a function called parselnt(),as you'll see in the next chapter): 
function sum(x,y){ 
function multi(x,y){ 
The tag function, 'transform'
function transform( strings, . . . substitutes){ 
When template strings (Name is) are passed to the tag function, there are two forms of each 
function rawTag ( strings, . . . substitutes){ 
If you quote true or false, they become strings
If you use a logical operator on a non-Boolean value, the value is converted to Boolean behind 
• All values become true when converted to a Boolean, with the exception of the following 
The condition (the part in parentheses) always returns a Boolean value, and may also contain the 
Mastering functions is an important skill when you learn any programming language, and even 
more so when it comes to JavaScript. This is because JavaScript has many uses for functions, and 
• The concept that functions are just data, albeit a special type of data 
Functions allow you to group together a code, give it a name
function sum(a, b) { 
• The name of the function; in this case, sum. 
• The function parameters; in this case, a and b. A function can take any number of parameters
Note that a function can only return a single value. If you need to return more values, you can 
In order to make use of a function, you will need to call it. You can call a function simply using its 
Let's call the sum ( ) function, passing two arguments and assigning the value that the function 
When defining a function, you can specify what parameters the function expects to receive when 
it's called. A function may not require any parameters, but if it does
are often used interchangeably. Parameters are defined together with the function, while 
> function sum(a, b) { 
function expects, the extra ones will be silendy ignored
If you test this function by calling it with a different number of arguments, or even none at all
Function parameters can be assigned default values. While calling the function, if a parameter is 
function render (fog_level=0, spar k_level=100) { 
function t(fog_level=l, spar k_level=fog_level) { 
function s(fog_level=10, spark_level = fog_level*10) { 
function sayThings( tone, ...quotes){ 
The first parameter passed to the function is received in tone, while the rest of the parameters are 
function sumAll(a, b
function. In the preceding example, we have an array we need to pass to a function where the 
apply ( ) function, where the second argument allows an array to be passed to the function being 
function call. The array is then split into individual variables-a, b
functions, their arguments and return values
internally. You can think of a function as a black box, give it some values (as input arguments)
The function accepts an optional second parameter, which is the radix
The parseFloat( ) function is similar to the parselnt ( ) function, but it also looks for decimals 
when trying to figure out a number horn your input. This function takes only one parameter, which 
arithmetic operations. This functionis also a convenient way to check whether parselnt( ), 
The isNaN ( ) functionis useful because the special value NaN is not equal to anything, including 
encodeURI( ) or encodeURIComponent ( ) functions. The first one will return a usable URL, 
The eval( ) function takes a string input and executes it as a JavaScript code, as follows: 
The e val ( ) function can be useful sometimes, but it should be avoided if there are other options. 
Before using this function, bear in mind that it blocks the browser thread
if a variable is defined inside a function, it's not visible outside of the function. However
describes variables you define outside of any function (in the global program code), as opposed 
• Outside the f ( ) function, the local variable doesn't exist 
What happened? The f ( ) function contains the local variable. Before calling the function, the 
variable doesn't exist. When you call the function for the first time, the local variable is created 
working on two different functions in the same script, and they both decide to use the same name 
When your JavaScript program execution enters a new function, all the variables declared 
anywhere in the function are moved, elevated
Variables declared with var are function scoped, as we saw earlier. The following example 
function swap(a,b){ // <--function scope starts here 
This means that you can create a function and assign it to a variable, as follows: 
When you use the typeof operator on a variable that holds a function value, it returns the string 
> var sum = function (a, b) { 
As functions are data assigned to variables, the same rules for naming functions apply as for 
This is also often called an anonymous function (as it doesn't have a name), especially when 
such a function expression is used even without assigning it to a variable. In this case, there can 
be two elegant uses for such anonymous functions, which are as follows: 
As a function is just like any other data assigned to a variable, it can be defined
Here's an example of a function that accepts two functions as parameters, executes them
function invokeAdd(a, b) { 
Now you can pass those functions to the original function, invokeAdd ( )
> invokeAdd(function () {return 1; }, function () {return 2; }); 
function () { return 1; }, 
When you pass a function, A
a callback function. If A doesn't have a name, then you can say that it's an anonymous callback 
callback functions, namely: 
• They let you pass functions without the need to name them, which means there are fewer 
• You can delegate the responsibility of calling a function to another function, which means 
Take a look at this common scenario-you have a function that returns a value, which you then pass 
to another function. In our example, the first function
The second function, addOne( )
function multiplyByTwo(a, b
elements is to be passed through both functions. First, let's start with a call to multiplyByTwo ( ) : 
function multiplyByTwo(a, b
Using the modified function, all the work is done with just one function call
start values and the callback function, as follows: 
is also the place to put any arguments that your anonymous function might accept, for example: 
parentheses that invoke the function. So, the following piece of code also works: 
Bearing in mind that a function is just like any other value, there's nothing that stops you from 
defining a function inside another function, here's the example: 
Using a function expression, this can also be written as follows: 
When you call the global outer ( ) function, it will internally call the local inner ( ) function. As 
• Privacy-you can expose only those functions to the outside world that you decide, and keep 
and this value can just as easily be another function, for example: 
as a normal function, as follows: 
If you want to execute the returned function immediately without assigning it to a new variable, 
Function, rewrite thyself! 
As a function can return a function, you can use the new function to replace the old one. 
assigned back to the function. But, the function can actually rewrite itself from the inside
If you call this function for the first time, it will do the following: 
Every subsequent time that the function is called, it will alert B ! . 
• The function executes for the first time, calls someSetup ( )
return statement because you're returning a function reference, not the result of invoking 
features won't change between function calls, you can have a function determine the best way to 
variable defined in a function is not visible outside the function, but a variable defined in a code 
If you define an inner ( ) function nested inside outer ( ), it will have access to variables in its 
Functions have their own private space and can use it to store other variables, such as b
inner functions, such as N (for inner). At some point
the F function, then you have access to the global space and to the F space. If you're at point c
which is inside the N function, then you can access the global space
Take a look at the following function, which is the same as before
The F function contains the b variable, which is local
The N function has access to its private space, to the F( ) function's space
achieve it is a little different. F ( ) doesn't return a function, but instead it creates a new global 
function, inner ( )
Let's start by declaring a placeholder for the global function-to-be. This is optional, but it's 
Anew function, N( )
function will keep its access to the F ( ) function's scope, even though it's part of the global space
parameters behave like local variables to this function, but they are implicidy created; you don't 
need to use var for them You can create a function that returns another function, which in turn 
Notice how param++ was incremented after the function was defined and yet, when called
Let's run the function, assigning the result to the ar r array: 
variable: i. Why? The functions don't remember values, they only keep a link (reference) to the 
environment where the three functions were defined. So, all functions
another immediate function. In this function, i becomes the local value x
same result. The key is to use the middle function to localize the value of i at every iteration, as 
and getValue ( ) as global functions, while the secret variable remains local and inaccessible 
can wrap the complicated who's next logic into an easy-to-use next ( ) function. Then, you can 
initialization function that takes an input array and also defines a secret pointer, i
Calling the setup ( ) function with a data array will create the next ( ) function for you, as 
immediately invoked function expressions (IIFE), for example: 
1. Write a function that converts a hexadecimal color, for example blue (#0000FF)
• Built-in functions-parselnt ( ), parseFloat( )
A property of an object can point to a function, because functions are just data. Properties that 
point to functions are also called methods. In the following example, talk is a method: 
You know a method is just a property that happens to be a function, so you access methods in the 
In order to create an object using this function, you can use the new operator as follows: 
A benefit of using constructor functions is that they accept parameters, which can be used when 
If you call a function that is designed to be a constructor but you omit the new operator, it is not an 
was called like any other function, so the variable h contains the value that the function returns. 
The function does not return anything (there's no return function), so it actually returns 
outside a constructor function, for example in the global program code outside any function. 
As you had this keyword inside the function Hero, a global variable (a property of the global 
If you call the same constructor function using new, then a new object is returned
The built-in global functions you have seen in Chapter 3 . Functions, can also be invoked as 
As the constructor property contains a reference to a function, you might as well call this 
function to produce a new object. The following code is like saying," ""I don't care how object h2 "
He r o ( ) ). This is because you're not invoking this function, but just referring to it by name
In addition to using constructor functions and the new operator to create objects, you can also 
If you think about how objects are created inside constructor functions, you can imagine that a 
When you assign an object to a different variable or pass it to a function, you only pass a 
• Configurable(boolean): If this attribute is false, the property cannot be deleted or edited 
As the de structuring expression evaluates to the right-hand side of the expression, it's possible to 
function. This variable is an array-like object. Before ES6, the only way we could convert the 
You already know that functions are a special data type. However, it turns out that there's more to 
> function sum(a, b) { // function declaration 
> var sum = function (a, b) { // function expression 
> var sum = new Function (' a ' , ' b ' 
When using the Function ( ) constructor, you pass the parameter names first (as strings) and then 
evaluation suffers horn the same drawbacks as the eval( ) function, so defining functions using 
If you use the Function ( ) constructor to create functions that have lots of parameters, bear in 
Functions also have a length property, which contains the number of formal parameters the 
> function myfunc(a, b
When you create a function (even one without a body), you can verify that it automatically has a 
Function objects, being a descendant of the top parent object
tost ring () . When invoked on a function, the tost ring ( ) method returns the source code of the 
> function myfunc(a, b
If you try to peek into the source code of the built-in functions, you'll get the [native code ] 
The behavior of the function's tost ring ( ) is environment dependent, and it differs among 
We discussed ES6 arrow functions and the syntax in detail in the last chapter. However, an 
invoked. As the value of this is dynamically given based on the function invocation, it is 
lexical scope is a scope that surrounds the function scope, and the dynamic scope is the scope that 
subroutines or functions), methods (part of an object)
straightforward. They are Boolean, number
You already know a lot about Booleans from Chapter 2 . Primitive Data Types, Arrays
The Boolean ( ) function, when called as a normal function without new
also means that all Boolean objects created with new Boolean ( ) are also true, as they are 
Similar to Boolean ( ), the Number ( ) function can be used as: 
As functions are objects, they can also have properties. The Number ( ) function has constant built- 
Similar to Number ( ) and Boolean ( ), if you use the St ring ( ) function without new
function, and
The r andom ( ) function returns a number between 0 and l, so if you want a number between
accept a string parameter. The test ( ) method returns a Boolean (true when there's a match, 
4. Imagine the string ( ) constructor didn't exist. Create a constructor function, MyString ( )
• Functions are also objects, and they have properties (such as length and prototype) and 
corresponding constructor functions-Number ( ), String( )
Other built-in constructor functions you're now familiar with include Object(),Array()
Function( ), Date( )
write a function, you also instinctively understand its behavior-the function starts execution
generator function chooses to pause itself, it cannot be paused by any external code. During 
functions, a popular pattern is to write infinite loops and pause and resume them when needed. 
sent out of the generator function, and when the function is resumed
This is a very simple generator function. However, there are several interesting aspects that need 
Inside the function, the real magic is around the yield keyword. When the yield keyword is 
When we invoke the generator function, it is not executed like a normal function
function again, it will resume the execution to the next line from the point the execution was 
Once the entire function body is executed, any calls to next ( ) on the generator object have no 
value is received by yield when the function execution is resumed, and we can see the value 
generator function-it takes us to the first yield keyword and hence, any value passed to the first 
a bit of time to sink in. Like closures (see Chapter 3 . Functions), the prototype is one of those 
The functions in JavaScript are objects, and they contain methods and properties. Some of the 
If you define a simple function, f oo ( )
> function foo(a, b) { 
Let's take a look at the constructor function, Gadget ( ) 
function Gadget ( name, color) { 
way to add functionality to the objects this constructor produces. Let's add two more properties, 
function Gadget ( name, color) { 
The objects created by the built-in constructor functions, such as Array
Object and Function, can be augmented (or enhanced) through the use of prototypes. This means 
• All functions have a property called prototype. Initially, it contains an empty object-an 
• When you create an object using a function as a constructor (with new), the object gets a 
• You can augment the prototypes of built-in constructor functions, and all objects will see 
a function is invoked using the new operator, an object is created and returned. This new object 
function Triangle(side, height){ 
When you create objects using a constructor function, own properties are added using this. This 
function Triangle(side, height) { 
function Triangle(side, height) { 
function Triangle(side, height) { 
function Triangle(side, height) { 
this . constructor is the function itself, and this . constructor . uber points to the parent's 
function extend(Child, Parent) { 
function extend(Child, Parent) { 
function Triangle(side, height) { 
Keeping the same interface as the preceding extend ( ) function, you can create a 
ex t end 2 ( ) function, which takes two constructor functions and copies all the properties from the 
function extend2(Child, Parent) { 
(including functions and arrays) are not duplicated, because these are passed by reference only. 
Let's see an example of using two constructor functions, Shape ( ) and TwoDShape ( ) . The 
Shape ( ) function's prototype object contains a primitive property, name
Changing the wee function's owns property, however
functions, and you want objects created with one constructor to inherit properties that come from 
function, just using the object literal
functions, because constructors are the closest to what they are used to. In addition
prototypes and constructor functions, you can simply take an object and copy all of its properties 
function, which returns a new object. Then
function deepCopy(p, c) { 
Using this function is the same as using extendCopy( ), you take an object such as twoDee
function objectPlus(o, stuff) { 
the functionality from another object into a new one, augmenting the new object
function triangle(s, h) { 
Because triangle ( ) is a normal function, not a constructor
with constructor functions and not the objects directly. In this pattern, the constructor of the child 
function Point(x, y) { 
function Line(pl, p2) { 
getArea: function () {}, 
function Triangle(a, b
function Rectangle(p, side_a
function Square(p, side){ 
Now that all constructors are done, let's take care of inheritance. Any pseudo-classical pattern 
functionality where the parents can keep track of who their children are, perhaps using 
function extend(Child, 
function extend2(Child, 
function objectPlus(o, 
var Employee = function(firstname, lastname
var Engineer = function(firstname, lastname
To establish the fact that classes are a special function, if we get the typeof the Car class
are available only after they are declared. For a normal function, you can say: 
functions as part of class, and they are called generator methods. A generator method is useful 
We also want to inherit functions from two utility classes, BackgroundCheck-this class does 
You may have a bunch of functions in a module, and you want to export only a few of them You 
The first way is to use the export keyword. You can export any top-level function, class
The following example shows a module inside server . j s where we export a function, a 
Instead of tagging each exported function or class from your module with the export keyword, 
v as functionV(), 
v2 as functionV2( ) , 
When we call function a ( ), the first frame in the stack is created with arguments to the function 
and all local variables in the a ( ) function. When function a( ) calls function b ( ), a second frame 
c ( ) function returns, the top frame from the stack is popped out
function cps(val, callback) { 
asyncFunction(arg, result => { 
The asynchronous function now returns a promise, which is the placeholder for an eventual result. 
function (error, text) { 
function (resolve, reject) { // (1) 
function (resolve, reject) { 
Inside the executor function, we will call the actual function-the readFile( ) method; if this 
function is successful, we will return the result using the resolve ( ) method and if there is an 
get: function ( target, name){ 
set: function(obj , prop
To intercept function calls, you will need to trap the get and apply operations. First get the 
function and then apply to call the function. So, you get the function and return the function. 
get: function ( target, propKey
is a function, we will use apply to invoke that function. If you see the output
This chapter discusses only cross-browser subsets of BOM and DOM Level 1, unless noted 
otherwise in the text. Even these safe subsets constitute a large topic, and a full reference is 
The aler t ( ) function is not an ECMAScript function but a BOM method. In addition to it, two 
do this with a simple function. Let's call it toggle ( ) . Every time you call the function, it checks 
Instead of calling the function manually, let's set an interval and call it every second: 
does this and accepts a Boolean parameter (true = deep copy with all the children, false = 
This method has the drawback that you can attach only one function to the event, as if the radio 
program has only one listener. It's true that you can have a lot happening inside the same function, 
Let's define a function that handles clicks on the paragraph, as follows: 
is a new function, not the same you passed when adding the event listener
different browsers provide different events. There is a subset of cross-browser events, and some 
callback function, myCallback
XHR/ Ajax functionality. Now that you know the basics, you can move on to building the next 
function request(url, callback) { 
Let's call the function three times, once for each file
window around as if there's an earthquake. All you'll need is one of the move* ( ) functions, 
purpose function that deletes DOM nodes, but removes any event listeners first. You 
can loop through the attributes of a node and check if the value is a function. If it is, it's 
addListener: function (el, type
removeListener : function (el, type
MYAPP . dom . Element = function (type, properties) { 
implementations for the same or similar functionalities. In such cases, you will need to branch 
you can branch and define the same function with a different body, depending on the browser. 
MYAPP . event . addListener = function (el, type
MYAPP . event . removeListener = function (el, type
MYAPP . event . addListener = function (el, type
MYAPP . event . removeListener = function (el, type
MYAPP . event . addListener = function (el, type
MYAPP . event . removeListener = function (el, type) { 
attaching is performed. The next time you call the same function, it will be defined with its new 
addListener: function (el, type
MYAPP . myevent . addListener = function (el, type
MYAPP . myevent . addListener = function (el, type
MYAPP . myevent . addListener = function (el, type
MYAPP . dom . FancyButton = function (text, type) { 
function (text, type
MYAPP . dom . FancyButton = function (text, conf) { 
"all possible combinations inside your function (""oh", A is set
this is a recipe for a large function body, which quickly becomes confusing and difficult
in Chapter 3 . Functions, you can use local variables and methods inside a function and achieve 
MYAPP . dom . FancyButton = function (text, conf) { 
private functionality accessible, but in a controlled manner
Let's say you've defined a function that you absolutely need to keep intact, so you make it private. 
Let's define _setstyle( ) and _getstyle( ) as private functions, but then assign them to the 
var _setStyle = function (el, prop
var _getstyle = function (el, prop) { 
function are local, as long as you use the var statement
getstyle: function (el, prop) { 
setStyle: function (el, prop
http : / / www. commonj s . or g. which defines a require ( ) function and an exports object. ES6, 
adding features to support functional programming, interest in the area is gaining momentum. 
As functions are first class objects in JavaScript, passing and returning functions to and from a 
determined by a function. This function takes two arguments-a function, which returns a Boolean 
JavaScript. You must first understand how higher order functions work and later, once you are 
With ES6 function syntax changes, it is even more elegant to write higher order functions. Let's 
When we looked at arrow functions, we discussed that arrow functions return results of a single 
function, y => y+x. 
This introduction will help you get familiar with the increasing usage of higher order functions, 
a property of the constructor function, as follows: 
MYAPP . dom . factory = function (type, url) { 
be implemented as constructor functions, and they'll all inherit from the base tree object as 
cases to smardy cover maximum functional areas of the code, generally gives good indication 
avoided. When you are writing enough test cases to cover majority of your functional code, when 
want to test is always a function. The unit, or unit of work
string. We will test various scenarios around this function. This is the unit of code, which we 
undefined variable is passed to the function. Let's add one more test case, as follows: 
When all expectations are true, your spec is passed. You can write any valid JavaScript code 
possible to make sure that all systems are always available and correct. At the same time, you 
simulate a situation where all dependencies are available for a unit of code we want to test, we 
us track the execution of a function that may be a mock. We can use toHaveBeenCalledWith ( ), 
JavaScript code using aler t ( ) functions. Fortunately, modern browsers
program If you want a specific function to confirm to strict mode, you can add the directive as the 
first line of a function. For example, take a look at the following code snippet: 
we call the function which we think may throw an exception, we will wrap the code in the t ry {} 
list. You can use the map function to this event stream, just like you would use it on an array
This is because you are essentially returning two React .createElement functions, and that is 
of inputs like normal functions. These inputs are called props. To illustrate this, let's consider the 
earlier that both functional and class components are equivalent in react, one important distinction 
This appendix contains a list of the built-in functions (methods of the global object), discussed in 
This appendix lists the built-in constructor functions outlined in the ECMAScript (ES) standard, 
Points back to the constructor function used to create the object, in this case
set: function (v) {this. value = v;}, 
get: function (v) {return this . value; }, 
each element of the array. The callback function gets the arguments: the element, its 
> function hasEye(el, idx
JavaScript functions are objects. They can be defined using the Function constructor, like so: 
var sum = new Function (' a ' , ' b ' 
var sum = function (a, b) { 
function sum(a, b) { 
A Boolean object is not the same as a Boolean primitive value. As you know, all objects are 
function. Capturing groups are available as $1, $2
subset of JavaScript that only supports primitives, object literals
> function callback! key, value) { 
the Boolean false instead, the double negation !! returns the same Boolean: 
You can test with any string and it will cast to a Boolean true, except the empty string: 
function n ( ) you see the variable a that is in the same scope, and you access its most recent 
The immediate (self-invoking) anonymous function returns a pointer to the function aler t ( ), 
slice: function slice(from, to) { 
rand: function rand(min, max
function Triangle(a, b
function Kite(center, diag_a
function Rhombus(center, diag_a
function Trapezoid ( pi, side_a
function Pentagon(center, edge) { 
function Circle(center, radius) { 
In the inheritance function, you'll see the children only inherit the parent's prototype. So own 
function inherit(Child, Parent) { 
function Triangle(a, b
function Rectangle(p, side_a
function Square(p, side) { 
function walkD0M(n, cb) { 
To remove content and clean up functions, use the following code: 
add = function (node, ev
remove = function (node, ev
add = function (node, ev
add = function (node, ev
remove = function (node, ev) { 
addListener: function (element, event_name
removeListener : function (element, event_name
request: function (url, method
will include the “print” function. For those who don’t know, string literals are 
screen. This is the default of the print function, but you can also use this same 
Python is able to display these integers in the “print” function, but only if it is 
execute if the outcome is either true or false. In Python, any answer that is non-null or 
started with 1*1 and ending with 10*10. For sucha simple statement, you are getting a 
of coherent task within your code. When you take the time to define a function, you will 
def functionname(arg1, arg2
‘’docstring of the function i.e., a brief introduction about the function” 
in a function is going to be called the docstring, something that is short for 
function does. This is an optional part, but it is a good practice to get into. If you are 
present inside of the function, you will find that the return you get is the None object. 
executes. After the function returns the value, these are going to be destroyed so that you 
inside the function, this same change is then going to reflect back when you are doing the 
There are a few functions that Lambda functions will work with including reduce(), 
We have talked about a number of functions so far in this book, but it time to look at a 
The map() function is the one that will apply to ever member inside of an iterable, or 
functions. So 1 you are trying to work on a list, this would be a good one for you to use 
Next on the list is the filter function. Just like you would guess from the name, the filter 
a nurnber of built-in functions, and a few constructs
This program uses the print function, which sirnply Outputs its parameters to the terminal. 
All variables are case-sensitive. Python treats ’number’ and ’Number’ as separate, unrelated 
functions, that way is to return the data. The way to access narnes frorn other modules 
sarne list object. Python’s built-in id() function, which returns a unique object identifier 
print( 1 1 = 1 , 1) 
myseq is a local variable of the append_to_sequence function, but when this function gets 
returns the sorted list. The sortedQ function, like the sortQ method also accepts the reverse 
The max and min functions also apply to lists of strings, returning maximum and minimum 
function, which adds a group of elements to a set. 
function, regardless of what structure was used to initialize the set. 
The set function also provides a copy constructor. However, remember that the copy con- 
»> s. issubset (set ([32, 8
There are three functions which remove individual iterns from a set, called pop
»> set. intersection(sl, s2
the sarne functions as normal sets, except none of the functions that change the contents 
division” (applying the floor function 2 3 4 after division. So, for example
3. Use Python to calculate 11111111111111111111+22222222222222222222, but in one 
• 4.3. The rangeQ Function 3 , The Python Tutorial
A function is the simplest callable object in Python, but there are others
def functionname(argl, arg2
»> def functionname(argl,arg2): 
»> t = functionname(24,24) # Result: \8 
If a function takes no arguments, it must still include the parentheses
(i.e. when the function is called), which are called actual parameters
when the function is defined, which are called formal parameters. The interior of the 
A function can ’return’ a value, for example: 
A function can define variables within the function body, which are considered ’local’ to the 
When calling a function that takes sorne values for further processing, we need to send sorne 
calling the function. If you do not specify a value, then that parameter will have the default 
length argument lists. This means that each time you call the function, you can specify any 
def function(first,second
When calling the above function, you must provide value for each of the first two arguments. 
If we call this function with any keyword arguments other than max_length, they will be 
function can be certain that the called function will not change them. For mutability, see 
if the calling function wants to rnake sure a passed list does not get changed, it has to pass 
A function can be called by appending the arguments in parentheses to the function name, 
A function’s return value can be used by assigning it to a variable, like so: 
A closure is a nested function with an after-return access to the data of the outer function, 
where the nested function is returned by the outer function as a function object. Thus, even 
when the outer function has finished its execution after being called, the closure function 
def adder_inner(inner.argument): # inner function, nested function 
Lambda is often used as an argument to other functions that expects a function object, 
to an argument of your concat function); this will still work, and rnakes it easy not to 
• 4.6. Defining Functions 7 , The Python Tutorial
• 2. Built-in Functions /topen 4 in The Python Standard Library at Python Documentation, 
• 27.1. sys — System-specific parameters and functions 6 in Python Documentation, python 
4 http://docs.python.org/2/library/functions,html#open 
inside which various code (espedally function definitions) is executed, and the locals to this 
Calling a method is rnuch like calling a function, but instead of passing the instance as the 
'setx': <function setx at 0x4d6a04>, '_doc_': None} 
'setx': <function setx at 0x4d6a04>, '_doc_': None} 
with the x and y. If you remember from the section on lambda functions 2 , we can treat 
Reflection-enabling functions include typeQ, isinstanceQ
• 2. Built-in Functions 4 , docs.python.org 
The match and search functions do rnostly the sarne thing, except that the match function 
Here we use the search function of the re rnodule, rather than of the pattern object. For 
use the findall and finditer functions. The findall function returns a list of matching strings, 
Match objects are returned by the search and rnatch functions, and include Information 
functions, sub returns a string
The subn function is similar to sub, except it returns a tuple
as a paranreter when defining the pattern directly in the function, if you need any of the 
But there are some other convenient functions in os .path , wherc path. code. exists () only 
Make a thread that prints numbers frorn 1-10, waits for 1 sec between: 
The function takes an integer N and a vector of length N as input, we have to convert the 
void _afunction_wrapper(int N, boost::python::list mapping) { 
_afunction(N, mystrings); 
"def(""afunction", _afunction_wrapper); 
libraries and call C functions. This is not technically extending Python, but it serves one 
A library is loaded using the ctypes. CDLL function. After you load the library, the functions 
to forego the Standard Python print Statement and use the Standard C library function, 
size. Sometimes you don’t want the function to return anything, and other tirnes
next() Function and ,next() Method.4 
The printQ function inserts a new line at the end, by default. In Python 2
Python 2 has two versions of input functions, input() and raw_input(). The inputQ 
Python 3 evaluates 3 / 2 as 1.5 by default, which is more intuitive for new programmers. 
function, to iterate over generator object
expression 4 + 5 = 9. Here, 4 and 5 are called operands and + is called the operator. 
Decision structures evaluate multiple expressions, which produce TRUE or FALSE as the 
If the boolean expression evaluates to TRUE, then the block of statement(s) inside the if 
: symbol. If boolean expression evaluates to FALSE, then the first set of code after the 
When a generator function is called, it returns a generator object without even beginning 
execution of the function. When the next() method is called for the first time, the function 
-1 if x < y, 0 if x == y
The natural logarithm of x, for x> 0. 
Note: This function is not accessible directly, so we need to import math module and then 
Note: This function is not accessible directly. Therefore, we need to import the math 
The fabs() method returns the absolute value of x. Although similar to the abs() function, 
Note: This function is not accessible directly, so we need to import the math module and 
Note: This function is not accessible directly, so we need to import the math module and 
The log() method returns the natural logarithm of x, for x > 0. 
Note: This function is not accessible directly, so we need to import the math module and 
This method returns natural logarithm of x, for x > 0. 
Note: This function is not accessible directly, so we need to import the math module and 
", min(0, 100, -400)) 


When we run the above program, it produces the following result- 

min(80, 100, 1000) 

80 

min(-20, 100, 400) 

-20 

min(-80, -20, -10) 

-80 

min(0, 100, -400) : 

-400 



tutorialspoint 

GIMPLYEASYLEARNING 


78 









Python 3 


Number modfQ Method 

Description 

The modf() method returns the fractional and integer parts of x in a two-item tuple. Both 
parts have the same sign as x. The integer part is returned as a float. 

Syntax 

Following is the syntax for the modf() method- 

import math 
math.modf( x ) 

Note: This function is not accessible directly, so we need to import the math module and 
then we need to call this function using the math static object. 

Parameters 

x - This is a numeric expression. 

Return Value 

This method returns the fractional and integer parts of x in a two-item tuple. Both the 
parts have the same sign as x. The integer part is returned as a float. 

Example 

The following example shows the usage of the modf() method. 

#!/usr/bin/python3 

import math # This will import math module 
print (math.modf(100.12) : ", math.modf(100.12)) 
Note: This function is not accessible directly, so we need to import the math module and 
Note: This function is not accessible directly, so we need to import the random module 
Note: This function is not accessible directly, so we need to import the random module 
Note: This function is not accessible directly, so we need to import the random module 
Note: This function is not accessible directly, so we need to import the shuffle module and 
Note: This function is not accessible directly, so we need to import the math module and 
Note: This function is not accessible directly, so we need to import the math module and 
Note: This function is not accessible directly, so we need to import the math module and 
Note: This function is not accessible directly, so we need to import the math module and 
Note: This function is not accessible directly, so we need to import the math module and 
Note: This function is not accessible directly, so we need to import math module and then 
Note: This function is not accessible directly, so we need to import the math module and 
Note: This function is not accessible directly, so we need to import math module and then 
Note: This function is not accessible directly, so we need to import the math module and 
Note: This function is not accessible directly, so we need to import the math module and 
translated using table (constructed with the maketransQ function in the string module), 
Many of the Python's time functions handle time as a tuple of 9 numbers, as shown below- 
function, as a floating point number
to this function, as a floating point number. 
The calendar module supplies calendar-related functions, including functions to print a text 
A function is a block of organized, reusable code that is used to perform a single
• The Statement return [expression] exits a function, optionally passing back an 
Defining a function gives it a name, specifies the Parameters that are to be included in the 
Once the basic structure of a function is finalized, you can execute it by calling it from 
you change what a parameter refers to within a function, the change also reflects back in 
", mylist) 



tutorialspoint 

GIMPLYEASYLEARNING 


200 








Python 3 


neturn 

# Now you can call changeme function 
mylist = [ 10 , 20 , 30 ] 

changeme( mylist ) 

print (Values outside the function: ", mylist) 
Values inside the function before change: [10, 20
Values inside the function after change: [10, 20
Values outside the function: [10, 20
"print (""Values inside the function: ”", mylist) 
"print (""Values outside the function: ", mylist) 
To call the function printmeQ, you definitely need to pass one argument
in a function call, the caller identifies the arguments by the parameter name. 
the function definition, unlike required and default arguments. 
def functionname([formal_args, ] *var_args_tuple ): 
• Although it appears that lambdas are a one-line Version of a function, they are not 
by passing function, during invocation for performance reasons. 
The syntax of lambda function contains only a single Statement, which is as follows- 
The Statement return [expression] exits a function, optionally passing back an expression 
"print (""Inside the function : ", total) 
"print (""Outside the function : ", total ) 
Variables that are defined inside a function body have a local scope, and those defined 
functions. When you call a function, the variables declared inside it are brought into scope. 
"print (""Inside the function local total : ", total) 
"print (""Outside the function global total : ", total ) 
function Money, we assign Money a value
• If localsO is called from within a function, it will return all the names that can be 
• If globals() is called from within a function, it will return all the names that can 
The return type of both these functions is dictionary. Therefore, names can be extracted 
To make all of your functions available when you have imported Phone, you need to put 
This chapter covers all the basic I/O functions available in Python 3. For more functions, 
Python 2 has two built-in functions to read data from Standard input, which by default 
The input([prompt]) function is equivalent to rawjnput, except that it assumes that the 
open() function. This function creates a file object, which would be utilized to call other 
All files are contained within various directories, and Python has no problem handling these 
o os.UF_OPAQUE: The directory is opaque when viewed through a union stack, 
This function will not follow symbolic links. To leave one of the ids unchanged, set it to - 
The method makedirsQ is recursive directory creation function. Like mkdirQ, but makes 
functioning as os.rename(), but it also moves a file to a directory
functioning as os.renameQ, but it also moves a file to a directory
f_bavai1=1394521L, f_files=971520L
function. If not handled in the code, causes the interpreter to 
We would cover two important functions, which would be used to handle regulär 
The re.match function returns a match object on success, None on failure. We use 
This function searches for first occurrence of RE pattem within the string, with 
The re.search function returns a match object on success, none on failure. We 
thread.start_new_thread ( function, args[
the passed list of agrs. When the function returns, the thread terminates. 
applications. The core functionality provides ways to create three menu types: pop-up, 
Its functionality is very similar to the one provided by the Label widget, except that it can 
In order to implement this functionality, each group of radiobuttons must be associated to 
Some of these functions are showinfo, showwarning
tkMessageBox. FunctionNameftitle., message [
static PyObject *MyFunction( PyObject *self, PyObject *args ); 
static PyObject *MyFunctionWithKeywords(PyObject *self, 
• ml_meth: This is the address of a function that has any one of the signatures, 
• ml_doc: This is the docstring for the function, which could be NULL if you do not 
For the above-defined function, we have the following method mapping table- 
As you will most likely want to define functions that accept arguments, you can use one 
of the other signatures for your C functions. For example, the following function
This function returns 0 for errors, and a value not equal to 0 for success. Tuple is the 
(317) 572-3447, fax (317) 572-4355
the United States at (800) 762-2974, outside the United States at (317) 572-3993 or fax (317) 572-4002. 
declare functions that will be defined elsewhere. Remember, a declaration tells the compiler how a func- 
might be writing some code that has a function called foo (). One day, you decide to start using a third- 
£oo() you are referring to within your code. You can’t change the library’s function name, and it would 
51. If you assumed that C++ evaluated expressions from left to right, your answer would have been 1. 
Boolean value. Conditional operators, described below
Boolean expressions as shown below, the result is known to be true as soon as one of them is found to be 
myFunction(8, 'a'); 
myFunction(someInt, 'b'); 
myFunction(5, someChar) ; 
£00 () calls another function bar (), anew card is put on the deck so that bar () has its own stack frame 
in C to allow functions to modify variables in other stack frames, essentially passing by reference. By 
The C language provides a number of standard functions for working with strings, which are described 
function, like strcat () in C to concatenate two strings
The pattern for most functions is that they take in zero or more parameters, do some calculations
handle this situation by returning a special value from the function, such as the NULL pointer. Exceptions 
lowing example shows a function, divideNumbers ()
caller surrounds the function call with a try-catch block, as shown in the following code
function attempts to change the value of the parameter, it will not compile. 
The main value in const reference parameters is efficiency. When you pass a variable into a function, 
The main() function is a loop that displays the menu, performs the selected action
fulfill the functional and performance requirements of the program. Informally, the design is simply how 
class you move on to the next easiest piece: the bishop. After considering its attributes and functionality, 
functionality, such as bounds checking
users desire only a text-based interface. Conversely, it would be important to be aware of a user prefer- 
high-level behaviors or functionality of the subsystem, the interfaces exported from the subsystem to 
A good division into subsystems separates the program into its basic functional parts. For example, in 
Even though C refers to procedures as “functions,” C is not a functional language. 
because even though not all UIs are implemented in OOP (though these days, most are)
A subclass can augment its parent by adding additional functionality. For example, a monkey is an ani- 
This notion extends to superclasses as well. Since all monkeys are animals, all Monkey objects support 
in the zoo and have each animal move once. Since all animals are members of the Animal class, they all 
would be preferable to wrap up this multiple value functionality in a separate class, perhaps called a 
worry about any hash table functionality bleeding through. For example, if the hash table class sup- 
new functionality, and it should have been an is-a relationship. The point is that there is sometimes a 
Figure 3-10 shows a multiple inheritance design. There is still a superclass called Animal, which is fur- 
in Figure 3-10 shows three clean hierarchies, it’s not difficult to imagine how they could get messy. For 
what functionality you’re going to expose, you need to understand the purpose of the interface. 
the functionality you have to offer. However, an API that lets the customer do anything that your prod- 
decide on because you tend to expose most or all of the functionality, ideally without giving too much 
Q Stand-alone functions or classes. When you reuse your own code or coworkers’ code, you will 
the exact functionality that you require. For example, one of the authors once made the mistake 
Q Even if the library code provides the exact functionality you need, it might not give you the per- 
begin by learning the basic functionality. If it’s a library, what behaviors does it provide? If it’s a frame- 
To be more formal: big-O notation specifies algorithm run time as a function of its input size, also known 
mon categories of functions, in order of their performance from best to worst: 
cal functions such as abs (), sqrt ()
a binary function on parallel elements in the sequences, 
set_union(), 
set_intersection(), 
The STL was designed with functionality, performance
owners. When all owners are finished using the pointer, the number of references drops to 0 and the 
when you will need a similar piece of functionality in the future. For example, when one of the 
collection of functions, or a program subsystem. However
Use templates when you want to provide identical functionality for different types. For example, if you 
initialization and cleanup instead of placing that functionality in the constructor and destructor, you will 
In order to avoid omitting functionality in their interfaces, some programmers go to the opposite 
same functionality. Use this technique judiciously, however
that everyone would want the same functionality in their antitheft devices, and didn’t provide a mecha- 
customizability is that it allows you to provide the same basic functionality to every client, but gives 
You can allow greater customizability through function pointers and template parameters. For example, 
In order to reduce complexity in your interfaces while still providing enough functionality, you can pro- 
functionality. You should make the commonly used functionality easy to use, while still providing the 
option for the more advanced functionality. Returning to the map program, you might want to provide an 
required functionality, present uncluttered interfaces
multiple ways to perform the same functionality, and provide customizability. It concluded with two 
makes sure that an individual piece of functionality works. For example, individual unit tests for a file- 
functional decomposition, adequate comments
functions? When you're writing code, imagine that somebody new will have to maintain it in the future. 
modified function that follows, a thorough comment at the top explains the algorithm at a high level
Q) If you use comments to separate a function into sections, consider whether the function might 
cant complexity should be decomposed into separate functions or methods. For example, if somebody 
If you approach every method or function by considering what pieces of it you can put off until later, your 
Functions and methods are traditionally capitalized in C++, but
Bad code is often littered with “magic numbers.” In some function, the code is dividing by 24. Why 24? 
for functionality that pointers could already provide. In C, pointers were the only pass-by-reference 
The function prototype that follows makes it clear that the parameter will be changed, but
unwind the const property back from the calling function, once again ending up with a program that 
stand-alone function, you must write a prototype and a definition for a method. Note that the class defi- 
to other methods or functions. It is also sometimes useful for disambiguating names. For example, you 
dime 3 = 0, ww = Op 
function-call syntax. Based on the syntax for other constructors, you might be tempted to call the default 
function or method receives a copy of the variable, not the variable itself. Thus
look at the line in its full functional syntax, you can see the problem: 
When you return objects from functions or methods, it is sometimes difficult to see exactly what copying 
malfunction. A production application would probably use exceptions to report error conditions, as 
This code appears outside of any function or method bodies. It’s almost like declaring a global variable, 
You call a static method just like a regular function from within any method of the class. Thus, the 
thing for any method or function in C++. Specifically, you can overload the function or method name by 
using it for multiple functions, as long as the number or types of the parameters differ. For example
A constructor with defaults for all its parameters can function as a default constructor. That is, you can 
method or function call. Instead, the compiler should insert the method or function body directly into 
the code where the method or function call is made. This process is called inlining, and methods or func- 
the function or method definition. For example, you might want to make the setter and accessor meth- 
tute the function body if it can’t see the function definition? Thus, if you write inline functions or 
C++ allows classes to declare that other classes or nonmember functions are friends, and can access 
You write this function just like any other function, except that you can directly access private and 
exposing internals of your class to other classes or functions. Thus, you should use them only in limited 
function overloading, and recall that function overloading does not look at the return type of the function. 
pointers or function pointers, consult Chapter 13). Now
declaring a simple function pointer, except for the addition of SpreadsheetCell1: : before the 
method to a function such as qsort () that requires a function pointer, which simply won’t work. 
definition of Sub adds functionality to its parent class by providing an additional method, 
in place of WeatherPrediction. It will provide the same functionality, but nothing new yet. 
existing functionality to get the temperature in Fahrenheit, but converts the result before returning it. 
additional functionality defined in the Sub class. However, slicing does not occur if a subclass is assigned 
If you were to implement the design shown in Figure 10-5, you might discover that the subclass would 
use the model in Figure 10-5, which implies that somehow a DoubleSpreadsheetCel1 “is-a” 
One possible approach is to implement “do nothing” functionality for those behaviors. For example, 
or arise from untidy class hierarchies. Figure 10-8 shows a class diagram for the preceding example, 
functionality as a virtual method. In this case, a better implementation would be to declare a virtual 
The typeid functionality is sometimes handy in debugging, however. It is useful to print out the type of 
The logObject () function first writes the name of the object’s class to the file, followed by its log mes- 
to make sure that the shared parent doesn’t have any functionality of its own. That way, its methods can 
ent to have its own functionality. If the shared parent is a virtual base class, there will not be any ambigu- 
If you want to declare a function or method that takes a Grid object, you must specify the type stored in 
This parameter list is similar to the parameter list in a function or method. As in functions and methods, 
which you’re familiar from functions and methods. However, templates allow nontype parameters to be 
You can also write templates for stand-alone functions. For example, you could write a generic function 
The Find() function template can work on arrays of any type. For example, you could use it to find the 
Although the specialized find function could take just char* instead of char*& as its first parameter, it’s 
You can also overload template functions with nontemplate functions. For example, instead of writing a 
This function is identical in behavior to the specialized version in the previous section. However, the 
for char*s. The compiler always prefers the nontemplate function to a templatized version. However, if 
Function templates are useful when you want to overload operators in a class template. For example, 
alone function template. The definition, which should go directly in Grid.h
This function template will work on any Grid, as long as there is an insertion operator for the elements 
implementations for a subset of possible types without specializing individual types. For example, you 
The C++ standard does not permit partial template specialization of functions. Instead, you can over- 
cialization of the Find() function, presented earlier in this chapter
The compiler always chooses the “most specific” version of the function, with non- 
templates. When you actually sit down to write a template class or function, you can consult this chapter 
ime 2 = 3, w= ay 
pass-by-reference semantics for arguments passed to the function. When you use reference parameters, 
the function receives references to the function arguments. If those references are modified, the changes 
When the function swap () is called with the arguments x and y, the first parameter is initialized to 
in the variable argument to the function or method However, you should not limit your use of pass-by- 
reference to only those cases. Pass-by-reference avoids copying the argument to the function, providing 
pointers so that the the function can change the actual pointers, and the address of two ints so that the 
modify the int *s that are used as arguments to the function (through the reference), without any 
With this version of the function, you no longer need to pass the addresses of the pointers or ints. The 
functions and global variables have external linkage. However, you can specify internal (or static) link- 
precedes the first instance of the function name, there is no need to repeat it. 
marking a variable or function static, wrap it in an unnamed namespace like this: 
cially in large programs. For similar functionality, you should use static class members and methods. 
initialization has been performed for a certain function. For example, code that employs this technique 
times find yourself in a situation where a function is specified to take a const variable, which it must 
you want to write a quick-and-dirty debug function that prints strings to stderr if a debug flag is set, 
Macros are a remnant from C that are quite similar to inline functions, except that they are not type 
2 + 2,leading to this expansion: 
simple and straightforward. The malloc () function still exists in C++, but we recommend avoiding it. 
A similar difference exists between the free() function and the delete function. With free (), the 
As Figure 13-6 illustrates, the heap-based array is similar to the stack-based array
In the preceding function, docArray is a dynamically allocated array. Do not get this confused with a 
There is a function in C++ called realloc(), which is a holdover from the C language. Don’t use it! In 
The memory diagram for this array is shown in Figure 13-7. As you can see, it is no different from an 
size of a single element in the array. In Figure 13-8, the three-by-three board is 3*3*1 = 9 bytes
board[0] actually refers to the subarray highlighted in Figure 13-9. When you add a second subscript, 
The caller of this function can pass a stack-based or heap-based array. In the case of a heap-based array, 
Even if the function doesn’t explicitly have a parameter that is a pointer, the parameter-passing seman- 
passed to a function, it is always passed as a pointer. 
C++ contains several functions from the C language that operate on strings. As a general rule of thumb, 
these functions do not handle memory allocation. For example, the strcpy() function takes two strings 
class) that supports many of the same operations as the <cstring> functions but, best of all
You could capitalize mySt ring by passing it into this function. However, if you only wanted to capital- 
You don’t normally think about the location of functions in memory, but each function actually lives at a 
to the family of functions that have the given characteristics. For example, the following line declares a 
if (inFunction(values1l[i], values2[i])) { 
To call the findMatches() function, all you need is any function that adheres to the defined yesNoFcn 
function, which returns true if the two parameters are equal: 
Because the intEqual () function matches the yesNoFcn type, it can be passed as the final argument to 
function pointer, it could compare based on other criteria. For example
By using function pointers, a single function
returned from the getMoreData() function, all of the data has been received. 
==15606== Copyright (C) 2002-2003, and GNU GPL'd
==15606== Copyright (C) 2000-2003, and GNU GPL'd
If an improperly terminated string were handed to this function, it would only be a matter of time before 
handy syntax for functionality that could be handled through methods on the string class. However, 
functionality to be explored. If you take a peek at the <ostream> header file, you'll see many lines of 
There are several interesting observations to make about the previous function. First, its parameter is a 
Boolean value true and false will be treated as the Boolean value false. If noboolalpha is set, 
Why would you want to overload <<? If you are familiar with the printf () function in C, you know 
different functions, while retaining the current read position. String streams are also useful for parsing 
guages generally rely on return values from functions and other ad hoc approaches. Other languages, 
handler. It calls function B (), which calls function c ()
assume that its return codes are the same as other similar functions. That is not always true. On Solaris 9, 
The function to initialize a semaphore in the POSIX version is called sem_init (), and the function to 
the two functions handle error codes differently! sem_init () returns —1 and sets errno on error, while 
Another problem is that functions in C++ allow only one return value, so if you need to return both an 
occurred several function calls down the stack, without error-handling code in the intermediate 
a function can be violated at run time. These, and other
If the function fails to open the file and executes the throw exception() ; line, the rest of the function 
If a function or method specifies no throw list, it can throw any exception. You've already seen this behav- 
write this main() function, assuming that you can catch the int: 
Throw lists don’t prevent functions from throwing unlisted exception types, but 
When a function throws an exception that is not listed in its throw list, C++ calls a special function 
terminate the program — it can’t just exit the function normally. If it throws a new exception, that excep- 
throw list for the function specifies bad_exception, then bad_exception will be thrown. Otherwise
Given the opportunity to specify the behavior of a function in its signature, it seems wasteful not to take 
advantage of it. The exceptions thrown from a particular function are an important part of its interface, 
function past the current point of execution is skipped. However, local objects and variables in each 
C++ allows you to specify a new handler callback function. By default, there is no new handler
you centralize the failure handling to one function, and you don’t need to litter your code with 
the same as in any other function, but it is subtler in constructors because you’re accustomed to letting 
whether you are executing as a result of a normal function exit or delete call, or because of stack 
unwinding. The function uncaught_exception (), declared in the <exception> header file
your chance by exiting the function early due to an exception, you will never be able to go back 
// T£ this function is called from the copy constructor, 
// This function is called from operator=, in which case the 
always be an object of that class. If you write a global function, the left-hand-side can be an object of a dif- 
or global function is simple! However, most operators do not impose this requirement. 
function. This rule applies specifically to operator<< and operator>>, where the left-hand 
different from normal functions, which you can overload with any number of parameters. Additionally
methods of the class or global friend functions, summarizes when you should (or should not) overload 
operator> comparison function want to operator<(const T&, 
really apply to individual types: they aggregate results of Boolean expressions. Additionally, you lose 
The trickiest part of these functions is that, in order for mValue to be set correctly
know that the STL map provides associative array-like functionality, including the use of operator [] 
C++ allows you to overload the function call operator, written as operator (). If you write an operator () 
Here is an example of code that uses the function-call operator, contrasted with the call to a normal 
An object of a class with a function call operator is called a function object, or functor for short. 
function objects as callback functions to routines that expect function pointers, as long as the function 
Q You can customize the behavior of a function object by setting data members. For example, you 
Sometimes it is useful to be able to use objects in Boolean expressions. For example, programmers often 
In order to allow stream objects to be used in Boolean expressions, but prohibit their undesired promo- 
functions are called for every new expression and delete expression in the program, unless there are 
The call to the function remains the same. However, consider what happens when you pass-by-value in 
the first version of the function. In order to initialize the p parameter of processPerson (),me must be 
to the processPerson() function, and so must be destroyed when the function exits. This destruction 
Just as you should pass objects by reference to functions, you should also return them by reference from 
functions in order to avoid copying the objects unnecessarily. Unfortunately, it is sometimes impossible 
to another type for use in a larger expression. This rule applies mostly to function calls. For example, sup- 
Even if the result of the function is not used anywhere, the compiler might still generate code to create 
in an attempt to generate a functional program; in our experience, most efficiency optimization is per- 
ond set summarizes the amount of time spent executing each function in the program. The first, and 
in those lines shows the number of calls to the function (500,500 to nameExists () and 499
these functions are almost identical; they could probably be combined. In addition, most of 
// function incremented it, so we just continue. 
forms the same functionality as six PowerPC instructions. As a C++ programmer, you don’t need to know 
or legacy code that was written in C. Functions and classes, as you’ve seen many times in this book
work just fine together. A class method can call a function, and a function can make use of objects. 
The C++ function is written as normal. Keep in mind that you are implementing a function, not writing 
There are many different ways to deal with these problems. Figure 19-1 shows a formal bug process, 
A less formal approach is shown in Figure 19-2. In this workflow, anybody can file a bug and assign an ini- 
The final test (for now) checks the release functionality. Once an object is released, the Object Pool can 
tem that performs each function as a virtual user. This would be a scripting challenge, though several 
to each function, requiring changes to all the function prototypes in the whole program. 
// This function must print the entries in order. If the buffer has wrapped, 
The assert macro in the <cassert> library is a powerful tool. It takes a Boolean expression and, if the 
functioning inside asserts. For example, a line like this is asking for trouble: 
passes the object by value to the processCitations() function, which prints out the info using the 
at the function that reads the citations from the file. If that doesn’t work right, then obviously the object 
containers provide different functionality, the iterators present a common interface to code that wishes to 
helper function printVector () that prints the contents of the vector to cout, but whose implementa- 
space allocation by “packing” the Boolean values. Recall that a bool is either true or false, and thus 
The library also provides a utility function template, make_pair ()
is more useful when you want to pass a pair to a function. Unlike class templates, function templates 
take logarithmic time. It is usually implemented as some form of balanced tree, such as a red-black tree. 
count () member function. It returns the number of elements in the map with a given key. For maps, the 
and friend functions. The string interface is actually quite a good example of a cluttered interface, 
non-const object returns a proxy object to which you can assign a Boolean value, call £1ip()
are called function objects, or just functors. 
Q) Predefined function object classes: arithmetic function objects, comparison func- 
rithms are implemented as function templates, where the template type parameters are usually iterator 
templatized functions can usually deduce the template types from the function arguments, so you can 
generally call the algorithms as if they were normal functions, not templates. 
late() algorithms in detail. The next section presents the function objects, and the final section dis- 
specified in the function call, not the end iterator of the underlying container. 
If a container provides a method with the same functionality as a generic algorithm, 
This program passed a pointer to the perfectScore() function, which the £ind_if() algorithm then 
The accumulate() function does just that. In its most basic form, it calculates the sum of the elements 
used in place of function pointers. These objects are called function objects, or just functors. 
tion pointer as one of the parameters. When you use these functions, you can pass a functor instead of a 
function pointer. That fact, in and of itself
If you use the function objects as callbacks in algorithms, make sure that the 
In addition to the arithmetic function object classes, the C++ language provides all the standard 
C++ also provides function object classes for the three logical operations: logical_not, logical_and
When you try to use the basic function objects provided by the standard, it often feels as if you’re trying 
functional composition, or combining functions together to create the exact behavior you need. 
The function not1() negates the result of every call to the predicate it takes as an argument. Of course, 
greater_equal is a binary function, bind2nd() has already converted it to a unary function
method instead of a normal function pointer or functor. As explained in Chapter 9, the code to calla 
method pointer is different from that to call a normal function pointer, because the former must be called 
used as the callback where a unary or binary function is expected, respectively. 
function adapter, mem_fun()
You can’t use normal function pointers directly with the function adapters bind1st (),bind2nd()
using legacy C functions, such as those in the C Standard Library. If you write your own callbacks
encourage you to write function object classes, as described in the next section. 
not a number. The <cctype> header file provides a legacy C function called isdigit (), which returns 
a function object, you need to use the ptr_fun() adapter to generate a function object that can be used 
by the predefined functors. If you want to be able to use the function adapters with these functors, you 
either unary_function or binary_function, depending on whether they take one or two arguments. 
the “function” they provide. For example, instead of using ptr_fun() to convert isdigit ()
class myIsDigit : public unary_function<char, bool> 
functionality they are required to provide. Specifically, every random access iterator is also bidirectional
The STL provides three utility algorithms implemented as function templates: min (),max()
The nonmodifying algorithms include functions for searching elements in a range, generating numerical 
class MinAndMax : public unary_function<int, void> 
The merge () function allows you to merge two sorted ranges together, while maintaining the sorted 
satisfaction. We don’t show an example of the heap functions here, but the Standard Library Reference 
The includes () function implements standard subset determination, checking if all the elements of one 
The set_union(),set_intersection()
operations. For set_union() and set_symmetric_difference(), the result is at 
newEnd = set_union(setOne.begin(), setOne.end()
newEnd = set_intersection(setOne.begin(), setOne.end()
sionally attempt to register and vote anyway. Using your newfound algorithm and function object skills, 
functions and functors that are not yet written. As the example progresses, the missing implementations 
The top-level function, auditVoterRoll1s()
class RemoveNames : public unary_function<pair<const string, list<string> >
Note that RemoveNames subclasses unary_function, a technique described earlier in this chapter. The 
class NameInList : public unary_function<string, bool> 
and function objects available for your use, and showed you how to write your own function objects. 
function objects. If not, think for a moment about rewriting the voter registration audit example without 
If you aren’t impressed by the algorithms and function objects, or find them too complex
Conversely, every deallocation is performed with a call to the deallocate() method of the Allocator 
The insert_iterator and front_insert_iterator function similarly, except that the 
provide logarithmic insertion, lookup
usable in the generic algorithms functions, you must specify its traits. Recall from the discussion of writ- 
iterator should function like the iterator, but should provide read-only access to the elements. The itera- 
public std::binary_function<value_type, value_type
size_type erase (key_type&) ; Three different forms of erase. Logarithmic, 
public std::binary_function<value_type, value_type
Consider the following function declarations, which provide the ability to send data to another com- 
the network functions, which only process strings. The solution is to add serialization and deserializa- 
example. Assume that you have a function called getNext SentenceXML (), which asks the user for a 
callback functions or an object that implements certain methods. As the document is parsed, the appro- 
priate functions or methods are called, giving you a chance to perform an action. For example
The XML attributes are not shown in Figure 24-4 because they are properties of an element, not children 
Following is a main () that tests the serialization functionality by creating a Simple object, writing it to 
function, this issue will not be a problem. However
passing them as arguments to functions, adding another level of safety is essential. 
Q) Because all types are checked inside a single method, a subclass would have to override all 
might end up with something like Figure 25-1, which organizes the classes according to their attack and 
and passing them to OS-provided functions. For example, to draw a rectangle in a window
ing functionality. When talking about frameworks, programmers are usually referring to large class 
lection of C-style functions, not a cohesive class. 
Both programs have the same functionality. After executing, the file log. out should contain the follow- 
Figure 26-4 shows the same program, but with a FordFactory instead of a ToyotaFactory. Note that 
The following sample program makes use of this function to build 10 cars, whatever brand they might 
it needs a language-specific piece of functionality, it can just ask the LanguageFactory. For example
the game. The Player class would include functionality that requires network connectivity, such as an 
following function, designed to be called when the Player has won
functionality or protect against performance concerns. Sometimes, the underlying abstraction cannot be 
require only a subset of Xerces’ functionality. By writing a wrapper, you can maximize ease of use for the 
The next step is to define the new interface to the underlying functionality. For this example, we will 
deleted. In order to implement this functionality, the ParsedXMLElement needs to keep a static count of 
Since adapters exist to provide a more appropriate interface for underlying functionality, their use 
shown in Figure 26-5, but that design could be cumbersome and would grow exponentially as new 
This leads to situations like the one shown in Figure 26-6, where an ItalicParagraph operates ona 
track it down. If the interviewer hands you a function and tells you that it crashes when run, he or she 
set_intersection(), 99
set_union(), 99
arithmetic function objects, 624-625 
realloc() function, 355 
Boolean expression conversions, 455-457 
C functions, 630 
member functions, 629-630 
adding functionality, 231-233 
replacing functionality, 233 
stand-alone functions or classes, 78 
comparison function objects, 625-626 
functions, 16-17 
free() function, 353 
malloc() function, 352-353 
realloc() function, 355 
inline functions, 472 
integer function return codes, 403 
free() function, 353 
function call operator overloading, 448-449 
calling member functions, 629-630 
function pointers, 372-373 accessor operations
function templates, 295-299 constructors
functional relationships, 69-70 erase operations
functions insertion operations, 687-688 
inline functions, 204-205
legacy C functions, 630 arrays
getline() function, 387 
global functions and operator overloading, 433-434 Rational Purify
adding functionality, 231-233 
replacing functionality, 233 
inline functions, 204-205
print£() function, 379 
scanf() function, 379 
integer function return codes, 403 
1/0 streams (continued) code reuse, 787 
print£() function, 379 I/O streams
scanf() function, 379 libraries
legacy C functions, 630 
logical function objects, 627 
main() function, 3 
malloc() function, 352-353 
mem_fun_ref() function, 629-630 merge () algorithm
free() function, 353 access control
malloc() function, 352-353 access specifiers
realloc() function, 355 back ()
functional, 69-70 
calling member functions, 629-630 
function call operator, 448-449 
global functions, 433-434 
print£() function, 379 
scanf() function, 379 
function call operator, 448-449 
global functions, 433-434 
overloading template functions, 297-298 
functions, 272 plus
printf () function, 379 
inline functions, 472 
realloc() function, 355 
functional, 69-70 
stand-alone functions or classes, 78 
scanf () function, 379 
set_intersection() algorithm, 99
set_union() algorithm, 99
unsupported functionality, 100 replace()
adding functionality, 231-233 
replacing functionality, 233 
function templates, 295-299 
writing function objects, 630-631 
responsibility for its use and execution and agree not to sell or create derivative products, 
functions, and portability
functions, and portability
fgets( ). The fopen( ) function does two things. First, it creates a network socket
Let's use PHP's built-in functions to create your first webbot," which downloads a ""Hello"
As shown in Listing 3-1, fopen( ) establishes a network connection to the target
Before we can execute the example in Listing 3-1, we need to examine the two ways to 
An alternative to fopen( ) and fgets( ) is the function file( ), which downloads formatted 
element. The script in Listing 3-2 downloads the same web page used in Listing 3-1, but it 
The file( ) function is particularly useful for downloading comma-separated value (CSV) files, 
require additional functionality to handle advanced issues such as form submission, 
built-in functions alone. Therefore, most of this book's examples use PHP/CURLto download 
functions do and a lot more. PHP/CURL REFERENCE expands on cURL's features, but here's a 
Unlike the built-in PHP network functions, cURL supports multiple transfer protocols
download a file from a Webserver with PHP's fopen( ) or file( ) functions, your agent name 
wrapper function, which simplifies the complexities of a code library into something easier to 
While LIB_http has many functions, we'll restrict our discussion to simply fetching files from 
PHP's built-in functions for downloading files from the Internet. Not only is the interface simple, 
The script in Listing 3-6 downloads the page and displays the requested page, any errors
Listing 3-7 shows what is produced when the script in Listing 3-6 is executed, with the array 
Listing 3-7: File contents, errors
Some of these functions use an additional input parameter, $data_array
If you don't understand what all these functions do now, don't worry. Their use will become 
99 percent of your parsing tasks. Whether or not you use the functions in LIB_parse, I highly 
The function provided for that task is split_string( ), shown in Listing 4-1. 
When Listing 4-4 is run in a shell, the results should look like Examples of using 
function, but it returns an array of all items that match the parse description or all 
occurrences of data between two delimiting strings. This function, for example
The parse_array( ) function , shown in Listing 4-5
When the script in Listing 4-6 runs, the result should look like Using parse_array() to parse 
Results of running Listing 4-8, showing parsed image names shows the output of Listing 4-8. 
Results of running Listing 4-8, showing parsed image names 
In addition to the previously described parsing functions in LIB_parse, PHP also contains a 
built-in PHP parsing functions, along with examples of how they are used. 
function stristr() looks for an occurrence of needle in haystack. If found, stristr() 
The script in Listing 4-14 uses a variety of built-in functions, along with a few functions from 
for their data values. In Listing 5-1, a variable called session_id is set to 0001
emulation techniques shown in Listings 5-4 and 5-5. I n either case, the variables term and 
Conversely, since the GET method places form information in the URL's query string
webbot is set to something that looks like a browser (as shown in Listing 5-11). Obviously, if 
to use different standards to help identify differences between functions, data 
LIB_mysql consists of a few server configurations and three functions, which should handle 
abstractions with the same function names used in LIB_mysql. In this way, you can make the 
As shown in Listing 6-1, the configuration section provides an opportunity to define where 
Each function uses a similar interface, and each provides error reporting if you request an 
script in Listing 6-2, making it look like the table in Example table people after executing the 
Listing 6-3, which changes the Zl P code for the record. 
Running the script in Listing 6-3 changes values in the table, as shown in Example table 
For database functions other than inserting or updating records, LIB_mysql provides the 
exe_sql( ) function, which executes a SQL query against the database. This function is 
Listing 6-6 shows the code to extract, decode
Listing 6-6: Script to query, decode
to use different standards to help identify differences between functions, data 
LIB_mysql consists of a few server configurations and three functions, which should handle 
abstractions with the same function names used in LIB_mysql. In this way, you can make the 
As shown in Listing 6-1, the configuration section provides an opportunity to define where 
Each function uses a similar interface, and each provides error reporting if you request an 
script in Listing 6-2, making it look like the table in Example table people after executing the 
Listing 6-3, which changes the Zl P code for the record. 
Running the script in Listing 6-3 changes values in the table, as shown in Example table 
For database functions other than inserting or updating records, LIB_mysql provides the 
exe_sql( ) function, which executes a SQL query against the database. This function is 
Listing 6-6 shows the code to extract, decode
Listing 6-6: Script to query, decode
these functions. This script downloads the default HTML file from http://www.schrenk.com, 
Listing 6-10, showing the value of compressing files. 
The script from Listing 6-10, showing the value of compressing files 
built-in function that automatically strips HTML tags from a document. For example, if I add 
the lines shown in Listing 6-11 to the previous script, we can see the affect of stripping the 
space with a simple PHP function called trim( ), without reducing your ability to manipulate 
The script in Listing 6-12 fetches an image from the Internet, writes a copy of the original to 
The product of running the script in Listing 6-12 is shown in Output of Listing 6-12, making 
The thumbnailed image shown in Output of Listing 6-12, making thumbnails with 
Output of Listing 6-12, making thumbnails with LlB_thumbnail 
|i. iunraity 1*7 CaFFnan Of, iff
[] You can use webbots to perform a variety of diagnostic functions. For example, a webbot may 
The first script (Listing 8-1) shows the main webbot used in The image-capturing bot, when 
calls the download_images_for_page( ) function, which gets the images and stores them in a 
Our image-grabbing webbot uses the function download_binary_file( ), which is designed to 
function download_binary_file($file, $referer) 
Listing 8-2: A binary-safe file download routine, optimized for webbot use 
purposes. This function, shown in Listing 8-3
The main function for this webbot, download_images_for_page( )
The webbot downloads the target web page with the http_get( ) function, which was 
<a and > into an array. [l The function parse_array( ) is not case sensitive, so it doesn't 
Listing 9-3 also includes some HTML formatting to create a nice-looking report, which you'll 
Fully resolved URLs are made with the resolve_address( ) function (see Listing 9-5), which 
The webbot downloads the target web page with the http_get( ) function, which was 
<a and > into an array. [l The function parse_array( ) is not case sensitive, so it doesn't 
Listing 9-3 also includes some HTML formatting to create a nice-looking report, which you'll 
Fully resolved URLs are made with the resolve_address( ) function (see Listing 9-5), which 
10-4, performs the following steps: 
Listing 11-3. In particular, this step replaces &amp with the preferred & character. 
contents. The tags shown in Listing 12-2, however
Listing 12-3: Main aggregation webbot script, describing RSS sources and display format 
As you can tell from the script in Listing 12-3, most of the work is done in the LIB_rss 
In addition to using the http_get() function in the LIB_http library, this script also employs 
function download_parse_rss($target, $filter_array) 
Listing 12-8 is identical to Listing 12-4, with the following exceptions: 
function report_error_and_quit ($er ror_message, $server_connection ) 
// It is not traditional to end a function this way, but since there is 
function report_error_and_quit ($er ror_message, $server_connection ) 
// It is not traditional to end a function this way, but since there is 
This function returns data in an array, with elements containing a status code
function get_nntp_article_ids($server, $newsgroup) 
When you execute the code in Listing 14-6, you'll see a screen similar to the one in Reading a 
previous function call, this longer identifier is universal and references this article on any 
function read_nntp_article($server , $newsgroup
() function found in the LIB_parse library (see PARSING TECHNIQUES), as shown in Listing 
the get_attribute( ) function, to obtain the actual boundary value. [] Finally
() function found in the LIB_parse library (see PARSING TECHNIQUES), as shown in Listing 
the get_attribute( ) function, to obtain the actual boundary value. [] Finally
library contains functions for connecting to the mail server, authenticating your account on 
Note: Before you use the script in Listing 15-10, replace the values for SERVER
In Listing 15-11, the script makes the connection to the server and
Listing 15-12: Reading, displaying
Listing 15-13: Closing the connection to the server, or noting the login error if necessary 
PHP provides a built-in function for sending email, as shown in Listing 16-2. 
LIB_mail with a function formatted_mail( ), which makes it easy to send emails that are 
function formatted_mail($subject, $message
web pages. To send HTML-formatted emails with the formatted_mail( ) function, do the 
While the example in Listing 17-1 is hypothetical, you can see that interfacing with a webbot in this 
When a programmer accesses a webbot from a function interface, he or she gains the ability to use 
This project uses a web page that decodes ZIP codes and converts that operation into a function, 
This example function uses the interface shown in Listing 17-2, where a function named 
The script that interfaces the target web page to a PHP function, called describe_zipcode( )
While the example in Listing 17-1 is hypothetical, you can see that interfacing with a webbot in this 
When a programmer accesses a webbot from a function interface, he or she gains the ability to use 
This project uses a web page that decodes ZIP codes and converts that operation into a function, 
This example function uses the interface shown in Listing 17-2, where a function named 
The script that interfaces the target web page to a PHP function, called describe_zipcode( )
Now that you know how to write function interfaces to a web page (or in our case, a form)
Listings 18-1 and 18-2 are the main scripts for the example spider. Initially, the spider is limited 
Listing 18-1: Main spider script, initialization 
Listing 18-2: Main spider script, harvesting links 
functions that parse links from a web page when given a URL, archive harvested links in an 
an array. This function, shown in Listing 18-3
function archive_links($spider_array, $penetration_level
The function get_domain( ) parses the root domain from the target URL. For example, given 
function excluded_link($spider_array, $link) 
Functionally, the addition of the payload involves the inclusion of the image download library 
When the script in Listing 19-1 is run, it displays a screen similar to the one in Result of 
Listing 22-1 shows the cookies' names, values
Listing 22-1 shows the cookies' names, values
Listing 23-3: Cookie file declaration, as made in LIB_http 
As noted in Listing 22-3, the address for a cookie file should be a fully resolved local one. 
the scripts in Listing 22-1 (available at this book's website), PHP/CURL writes the cookies (in 
Listing 22-4: The cookie file, as written by PHP/CURL 
Listing 22-5: A PHP/CURL script, capable of managing cookies for multiple users 
In the batch file shown in Listing 23-1, the operating system executes the PHP interpreter
In the batch file shown in Listing 23-1, the operating system executes the PHP interpreter
Before using the method described in Listing 25-1, review a list of HTTP codes and decide which 
The script in Listing 25-2 verifies that a validation point, in this case a username
In Listing 25-4, the web page tells the browser to download http://www.nostarch.com instead 
Listing 25-9 finds and parses the values of all forms in a web page. When run, it also finds the 
example in Listing 25-11. If you eliminate the time-out, your script may hang permanently if it 
Before using the method described in Listing 25-1, review a list of HTTP codes and decide which 
The script in Listing 25-2 verifies that a validation point, in this case a username
In Listing 25-4, the web page tells the browser to download http://www.nostarch.com instead 
Listing 25-9 finds and parses the values of all forms in a web page. When run, it also finds the 
example in Listing 25-11. If you eliminate the time-out, your script may hang permanently if it 
() function, as shown in Listing 26-10. 
technique. The eval() function, which interprets the variable settings in Listing 26-10
the functions that make the request and receive the data. In contrast to XML, where the client 
directly execute functions on remote services, which return data in easy-to-use variables. An 
not to follow links from this web page to other pages. Conversely, index and follow 
not to follow links from this web page to other pages. Conversely, index and follow 
file( ) function, downloading files with 
update() function, of LIB_mysql 
wrapper function, using PFIP/CURL within 
less obvious Scheme/Lisp-style functional roots, it is exceedingly ap- 
passing around functions as callbacks, which encourages the Java- 
Therein lies the paradox of JavaScript, the Achilles’ heel of the lan- 
While this subset has been famously dubbed “The Good Parts,” I would 
program elements such as variable or function names, databases
the scope of every function, but what exactly it refers to bedevils even 
inside of the function, this is not in fact pointing at all to that function 
To reference a function object from inside itself, this by itself will 
// anonymous function (no none), cannot 
In the first function, called a “named function
out( . . ) has no name identifier (called an “anonymous function”), so 
to avoid the use of anonymous functions altogether, at least for 
function (expression), arguments.callee is deprecated and 
the foo identifier as a function object reference in each place, and not 
that it somehow refers to the function’s scope. It’s a tricky question, 
When a function is invoked, an activation record
about where the function was called from (the call-stack), how the 
function was invoked, what parameters were passed
this is neither a reference to the function itself, nor is it a reference 
this is actually a binding that is made when a function is invoked, and 
chain of function calls in order, as we did with the comments 
the first line of the foo( ) function, or simply inserted the de 
list of the functions that have been called to get to that line, 
applies to the function call, and so points this at the global object. 
context object for a function reference, the implicit binding rule says 
when an implicitly bound function loses that binding, which usually 
ing a function, it’s an implicit reference assignment
What if the function you’re passing your callback to is not your own, 
function setTimeout(fn, delay) { 
It’s quite common that our function callbacks lose their this binding, 
control of how your callback function reference will be executed, so 
question to include a reference on itself to the function, and use this 
jority of functions provided, and certainly all functions you will create
the function bar, it will always manually invoke foo with obj. This 
function bind(fn, obj) { 
Many libraries’ functions, and indeed many new built-in functions in 
They’re just regular functions that are, in essence
structor functions,” but rather construction calls o/functions. 
When a function is invoked with new in front of it, otherwise known 
4. Unless the function returns its own alternate object, the new- 
function bind(fn, obj) { 
fNOP = function(){}, 
function foo(pl,p2) { 
1. Is the function called with new {new binding )? If so, this is the 
2. Is the function called with call or apply {explicit binding), even 
3. Is the function called with a context {implicit binding), otherwise 
as parameters to a function call. Similarly, bind( . . ) can curry pa- 
function foo(a,b) { 
the functions in question don’t care about this, you need a placeholder 
function call (for instance, a third-party library function that you don’t 
function foo(a,b) { 
Not only is it functionally “safer,” but there’s a sort of stylistic benefit 
create “indirect references” to functions, and in those cases
function reference is invoked, the default binding rule also applies. 
reference to just the underlying function object. As such, the effective 
function call falling back to the default binding rule inadvertently, by 
function, preventing manual this override with either implicit bind- 
Arrow-functions are signified not by the function keyword, but by 
function to ensure its this, which can seem attractive
function “tricks,” perhaps you should either: 
but inside of the same function, and indeed for the same sorts of look- 
finding the direct call-site of that function. Once examined, four rules 
function is a subtype of object (technically, a “callable object”). Func- 
in functions can be used as a constructor (that is, a function call with 
It is true that some functions have this references in them, and that 
“method” than any other function, as this is dynamically bound at 
function from that property access, it’s not magically a “method” at 
same function, and neither implies anything about the function being 
Perhaps one could argue that a function becomes a method, not at 
more a “method” than “function.” But again, these are just 
One subset solution is that objects that are JSON-safe (that is, can be 
the last remaining reference to some object/ function, and you de 
function can be garbage-collected. But, it is not proper to think of 
get: function(){ return this. a * 2 }, 
function, with whatever value it returns being the result of the property 
a function callback to apply to each element in the array, differing only 
function, and also can be behavior-specialized
giving us the ability to compose more functionality together. However, 
function nixin( sourceObj, targetObj ) { 
ences to the functions are copied. So, Car now has a property called 
Car already had a drive property (function), so that property refer- 
function nixin( sourceObj, targetObj ) { 
function nixin( sourceObj, targetObj ) { 
Since the two objects also share references to their common functions, 
JavaScript functions can’t really be duplicated (in a standard, reliable 
rebinding functionality, it’s a brittle Something . cool . call( this ) 
since objects (and functions!) only have shared references duplicated, 
ject. Almost all objects are given a non-null value for this property, at 
of functions: all functions by default get a public, nonenumerable (see 
function, “constructor” does not actually mean “was construc- 
your program. Functions themselves are not constructors. However, 
when you put the new keyword in front of a normal function call, that 
makes that function call a “constructor call.” In fact, new sort of hijacks 
any normal function and calls it in a fashion that constructs an object, 
NothingSpecial is just a plain old normal function, but when called 
Functions aren’t constructors, but function calls are “constructor calls” 
are copied over to each of the a and b objects. However, that’s not what 
at a function that, reciprocally
function Bar(name,tabel) { 
When function Bar() { .. } is declared, Bar
cestry” of some object (a) if you have some function (Foo, with its 
bound function (see Chapter 2), the function created will not 
target function was invoked instead, which means that using 
function isRelatedTo(ol, o2) { 
tion of new functions acting as classes and constructor calls, 
delegated properties/functions on the [[Prototype]] chain, 
This polyfill works by using a throwaway F function, and we override 
subset of functionality, so most developers are fine with using the par- 
the new keyword with a function call, which among its four steps (see 
As a brief review of our conclusions from Chapter 5, the [[Proto 
to the functionality we can leverage in JavaScript, is all about objects 
setID: function (ID) { this. id = ID; }, 
XYZ.prepareTask = function(ID, Label) { 
actual function that did the construction, whereas other browsers 
function Widget(width, height) { 
function Button(width, height
Button. setup = function(width, height
LoginController. prototype. validateEntry = function(user,pw) { 
AuthController. prototype. server = function(url,data) { 
valldateEntry : function(user,pw) { 
showDialog: function(title,msg) { 
AuthController . server = function(url,data) { 
us the functionality we need. We also, as noted before
We get to drop the word function from the declaration, which makes 
suggested OLOO syntax has lots of function appearances, which 
bar: functionQ { /*..*/ }, 
tion expression (function () . .) attached to the bar property, because 
manually specified named function expression (function baz() . .), 
Even though the de-sugaring uses an anonymous function expression, 
that holds the delegatable something ( ) function, we assume that the 
object happens to have a t hen ( ) function present on it. In other words, 
(Chapters 4-6), it’s that classes are an optional design pattern for code 
While introducing an age calculation function, an INI file is used as a database of grandchildren. The formatting and placement of controls in a GUI object is explained.
“A function for dealing with the complications of calculating years, months and days since birth.”
All rights are reserved, so if you think that you're going to make this e-book into a movie
There are a number of AutoHotkey apps offered in this book to help you understand how to write AutoHotkey scripts. Each has specific learning points giving a more in-depth understanding of how AutoHotkey works and what it can do for you. Feel free to modify these apps to suit your own purposes. Although they are all functional on some level, a couple of them (Reminder app and Grandkids app) are not truly completed. Further work on those apps will continue in the coming months which will appear in my weekly AutoHotkey column and in another more advanced book sometime in the future. (In particular
The third line uses the Sleep command to briefly pause the routine (1/10 of a second) to ensure the copy command is completed and stored to the Clipboard before continuing. Hint: If you find that you're getting inconsistent results from some of your scripts, it could be due to the script outrunning itself. Often adding a short pause (Sleep) will resolve the problem.
This is about as simple as AutoHotkey gets. I've added this function to my regular AHK file. It is amazingly useful. For example, I work with a Web program I wrote specifically for producing e-books. When creating the index for this book I instantly made two windows on top with CTRL++F8 (the chapter editing window and the index editing window)
The work is done in the fourth line of code using the SubStr function. The SubStr function is used to parse a text string—in this case, the contents of the Clipboard. The first SubStr function (SubStr(Clipboard
"By reversing the order of the two functions and adding them together with the concatenate operator (the period ""."" between the two functions)", the Clipboard is replaced with the reverse order of the two characters originally highlighted.
The first step is to break the end result into basic functional units. In this case, the first result we want is to make a dropdown menu appear on the screen. Next we want a selection from the dropdown menu to initiate an appropriate action. Lastly we want build the corresponding action into the script. The steps I conceived were as follows:
After I initially entered and tested what I considered the logical formulas for the windows (X2 = W1/2 and Y2 = H1/2) which give me the midway points and half widths and heights, I discovered that any windows extending to the bottom of the screen were partially hidden behind the Taskbar—not ideal. I needed to know the height of the Taskbar to subtract from the screen height. I added the following line of code:
Both Items A and B in the code (see Figure 6) are essentially the same code used in the example from last chapter, except in this case the hotkey combination is ^#!B (CTRL++ALT+B). The text in the active window or field is selected (Send
The first line establishes the hotkey combination CTRL++J (^#J before the double colon ::). This can be any combination that works for you without interfering with other hotkeys in Windows and other programs. I use more than one function type key, such as CTRL
The second level of functionality in QuickLinks consists of the shortcuts located within the category folders. These shortcuts can be for anything acceptable to Windows File Explorer, including programs
The LOOP command uses the standard curly brackets ({}) to enclose the code executed each time the loop is incremented to the next file or folder. In this case the primary function of the loop is to create a menu item for each category folder. The first step in creating a menu is to ADD the menu items. In this case, a menu item named with the folder name (the value of A_LoopFileName
Another complication for adding more layers is the handling of the increased number of LOOP commands within loops within loops. The best option might be to put the internal loops into a function which calls itself as it drills down through the folder tree structure. If this is done with a function, the array variables would need to be declared global as they are created at each level. Otherwise the data would be lost in local variables.
OnMessage() command function, Chapter Thirty-two
The reminder script is basic in its function. Press the hotkey combination CTRL++R (R for reminder) and a setup window pops up. It uses both the GUI (Graphic User Interface) command for picking a time and adding a message, then sets a timer for a pop-up to appear at a later time in the same day (see Figure 1).
Each chapter I'm adding a little more to the Reminder app. The original Reminder script was fairly short (although longer than it needed to be). It's now becoming fairly involved. This time more important functionality is added, plus more error correction.
"The first three lines of code I copied unaltered from an example. The AutoHotkey OnMessage command is used to call the standard Windows message WM_MOUSEMOVE found in the List of Windows Messages. The WM_MOUSEMOVE function uses the data setup hCursor and IDC_HAND to make a DllCall—which is a little cryptic. The only value that I added was the ""Static2"" ( if (ctrl == ""Static2"")) which designates the Speak control on the GUI window. (I found that value with the Window Spy utility", Chapter Ten
While introducing an age calculation function, an INI file is used as a database of grandchildren. The formatting and placement of controls in a GUI object is explained.
A function for dealing with the complications of calculating years, months and days since birth.
Function, HowOld()
Functions described, what are they?
Remainder function, Mod()
SubStr function,Chapter Thirty-four
It took me a little while to come up with the HowOld() function for calculating age. I had a number of false starts. I couldn't find a good AutoHotkey age calculation function on the Web, but I think this one does the job. If you find any errors
“A function for dealing with the complications of calculating years, months and days since birth.”
In the last chapter I introduced the GrandKids app which used AutoHotkey to calculate the age of grandchildren (or anyone else). All that's needed is the date of birth which is stored in an INI file. It uses a function I wrote for making the calculations. I must admit that it took me some time and a number of mental gymnastics to finally get an age calculating function that works. (If you find a problem with it, please let me know.) It is much shorter than most of the other age functions I found
An AutoHotkey Function is similar to a subroutine or a label which is a self-contained set of code. Functions are visually distinguished by the set of parentheses that immediately follow the function name (FunctionName() or FunctionName(Para1,Para2)). Functions differ from subroutines in that you may pass data to a function via parameters (the items between the parentheses) or pass no data at all
"where Birthday is just that and A_now is the current date. Function can also be called by setting a variable to a returned value (Variable =: Function()). The command ""Return x"" is used to return a value from the function. (This is not the same ""Return"" used at the end of an AutoHotkey script", subroutine
The age calculation function in the GrandKids AutoHotkey app is called HowOld(FromDay,ToDay). The name of the function is HowOld using the parameters FromDay and ToDay. The FromDay (from day) would be the birthday (or any other date) and ToDay (to day) equates to the current date in the GrandKids app
You will note in the code below that the built-in AutoHotkey Substr() function is used a number of times to parse (break apart the components of) dates. The Substr() function is one of the most powerful and useful string (text) manipulation functions. In the case of the normal date/time format (yyyymmddhhmmss) the SubStr() function can be used to extract the year, month and date.
"This conditional uses a couple of tricks to determine the matching date. First the AutoHotkey SubStr() function is used with the birthday (FromDay) to determine if it is February 29 (""0229""). No fancy calculations are needed here because it either is or isn't. (If someone enters a date which doesn't exist the function will still run although it will not calculate the days.) The second part of the conditional (Mod(SubStr(ToDay",1
It turns out in age calculation that the only day that matters when you are born on February 29 is February 28 of non-leap years. This is because on those years you turn one year older on February 28—the last day of the month. On March 1 you will be one year and one day older. For purposes of this function, if this is a non-leap year
Based upon the discussion of the SubStr() function and date/time strings, you can see that the year
I originally constructed a method for padding the value of the newly calculated month because at the time I hadn't found a built-in AutoHotkey function for padding—which is common in other programming languages. I did this by adding 100 to the new month, then extracting the desired text:
This uses a variation of the SubStr() function to pad any string with any character or blank spaces. The function concatenates (combines) two strings: a string of the padding character," ""0"
I opted for a solution that included fixing the length of each text field by padding the field on the right with blank spaces. Then I only need one tab (`t) character. To do that I first formatted Birthday (FormatTime) for display. Then I combined the three names and added ample blank spaces to the end—saving the result in the variable RowSpace. I next used the SubStr() function to shorten each name string line to the same length, SubStr(RowSpace
I then added blank spaces to the end of the formatted Birthday and saved it in the variable BDSpace. I next used the SubStr() function to shorten each birthday text line to the same length, SubStr(BDSpace
Function, HowOld()
Functions described, what are they?
OnMessage() command function, Chapter Thirty-two
Remainder function, Mod()
SubStr function, Chapter Five
All rights are reserved, so if you think that you're going to make this e-book into a movie
The chapters in the book are grouped by their function in developing a deeper understanding of Regular Expressions while emphasizing the practical application of RegExMatch() and RegExReplace()—the two primary AutoHotkey Regular Expressions functions. I consider the first three chapters (in particular Chapter One and Chapter Three) the most important for getting a quick start on how to view and understand Regular Expressions and the AutoHotkey RegEx functions, most of the remaining chapters can be studied in almost any order as they demonstrate a particular RegEx application—i.e. finding double words in text (Chapter Five); fixing mistyped word contractions (Chapter Six); swapping two word in any text editing (Chapter Seven); extracting IP addresses from text
This data mining train is the image I visualize when working with a RegEx. The key to understanding RegEx is knowing what the conductor is trying to do when it interprets the special symbols in a RegEx set of instructions to bring the right character passengers on board. It took me a while to comprehend that the primary purpose of the AutoHotkey RegEx functions are data extractions, RegExMatch()
Another use for a RegEx may be to find duplicate words in a document. This can be done with other functions, but it would take a few lines of code with conditionals (If-Then)
There are two primary RegEx functions in AutoHotkey: RegExMatch() and RegExReplace(). While working with both over the past few months, it slowly dawned on me when to use each one. While there is some overlap
Understanding the differences in these AutoHotkey functions makes it easier to pick the proper tool for the job. RegExMatch() is for mining, extracting
The same is true for the RegExReplace tab which replicates the RegExReplace() function. The data string in entered into the top text box, then the RegEx (without double quotes) in the second box
"This function would return FoundPos for ""cat"," ""cot"
There are a number of other special characters which affect the behaviour of the RegEx discussed in many of the following chapters. The question mark ? when following a character or range means the preceding character is optional—match none or one time. The pipe (a horizontal line inside a range [… |…]) means match either from the range before the pipe | or the range after the pipe | symbol. The \w symbol is similar to \d except it means match any letters (upper or lower case) or digits. The symbol \w is the same as [A-Za-z0-9]. These are merely a few of the more common symbols. As you continue you'll find techniques for matching a negative (matches only if it is not a specific character or set of characters), matching the beginning and end or the haystack (anchors)
In AutoHotkey there are two primary functions used with Regular Expressions: RegExMatch() and RegExReplace(). Half the battle of using RegEx functions in your scripts is knowing when to use which one. They both will save results to new variables and use the same expressions to find matches, but what each function does best is very different.
As might be expected RegExReplace() directly returns the entire new altered string. This makes it ideal for mass replacement similar to those done with the AutoHotkey StringReplace command. StringReplace is faster than the RegExReplace() function, but it doesn't have the flexibility and power of Regular Expressions. The RegExReplace() function has the power to alter the text by replacing it and returning the new string in a variable. This is useful for situations where there may be a number of conditions which require replacement
[Chapter Four Confession: The validation of the Number of Serving in the Calorie Count app was one of the first AutoHotkey RegEx tasks I undertook. I didn't have a deep enough understanding of the two functions and when to use each. I unnecessarily started out with RegExReplace() and ended up appropriately with RegExMatch(). I went down a couple of dead-ends. While the explanations are valid and useful, I was tempted to leave the chapter out of this book. However
Early in my wanderings through Regular Expressions (RegEx) I used the AutoHotkey RegEx functions (RegExMatch() and RegExReplace()) to control the formatting of the number of servings field in the CalorieCount.ahk script. As I worked with the expressions and tried to clean up the problems, the snippet of code became more and more involved. (Sometimes the light comes on slowly. The more I work with RegEx
This subroutine uses both the RegExMatch() and RegExReplace() functions. There are a number of conditionals included to clean up the data. Plus, a mathematical operation was used to convert the variable to a number—if only temporarily.
This function strips all letters (lowercase and uppercase) from the variable Food5. As it turns out, I never really needed this line. (Yes
the first set of numbers encountered (plus any decimal) is extracted from the remaining string. The key word is extracted. I should have been thinking in terms of extracting the desired number from the string when using the RegExMatch() function rather than merely matching, but with my lack of experience in AutoHotkey RegEx I was caught up in doing everything one step at a time. When I saw the new expression ([0-9]+\.?[\d]?[\d]?)
The first part of the RegEx ([0-9]+) is a range that includes and digits between 0 and 9. When a number is encountered, the match begins. In this part of the expression the plus sign (+) is added to the range telling RegEx to continue matching as long as the next character is a digit. If not
Note: A second trailing zero is fairly easy to prevent by changing the last portion of the expression from [\d]? to [1-9]? which eliminates 0 from the range, thus preventing a 0 in the second decimal place ([0-9]+\.?[\d]?[1-9]?). However
Each of these example functions is almost an entire AutoHotkey script. All that needs to be added is the value of Haystack (the input text) and a way to retrieve or display NewValue (the changed text). The first will mark the double words, while the second will eliminate one of the double words.
This RegEx technique fixes typos in contractions. While there may not be great demand for this particular function," there a other times when unknown character combinations need to be quickly parsed and recombined forming a new string such as modifying multiple filenames. (Note the double double quote """" needed to escape the double quote character within the AutoHotkey function"
This time the hotkey combination has been changed to ALT+W (!W) for swapping words. The script looks almost identical except the InStr() function has been added to locate the position of the space between the two words in the Clipboard (Position := InStr(Clipboard," "" "")). This is needed to properly parse"
The Position of the space is used in with the SubStr() function to clip the words and recombine them with a space between them (SubStr(Clipboard,"Position+1) . "" "" . SubStr(Clipboard"
The Clipboard := statement gets much longer (I had to fold it with AutoHotkey line continuation for the Web site) and a little more complicated to figure out. The first SubStr() returns the last word which starts at Position2+2. (Remember that the first position is 0 with the StringGetPos command, so then we must add 2 to the position of the space rather than one for the SubStr() function.) The center section of the text remains the same
When using the RegExReplace() function, we no longer a need to locate the position of the space between the two words (as long as it exists). It is simply a matter of identifying the first word (\w+)
The RegExMatch() function is used to find the first IP address in the stored Clipboard text (RegExMatch(Clipboard," ""\b\d{1"
The RegExMatch() function above only finds the first match in a string—then stops looking. If you want to find all of the matching strings (in this case IP addresses), then it's necessary to put the snippet of code in a loop and adjust the starting position in the string after each match found. This is the point at which the variable result FoundPos is used:
The second variable is Next which calculates the starting position of each new match search in the text. The Next parameter in the RegExMatch() function shown is the point at which the RegEx will begin searching in the text string. Without this incrementing parameter, the function would always return the same first IP and result in an infinite loop.
I would like to state that this function is self-explanatory, but it isn't. Suffice it to say that I copied it from the online documentation and modified the pertinent parts for the purposes of the IPFind.ahk script. I created the variable IPsearch to store the URL of the Web page. Notice that the variable FindIP is the IP address fed to the function by the main script. IPFind is concatenated (inserted) inside the URL discussed above so the page for that specific IP will be downloaded.
While I have previously used the ComObjCreate() function in other scripts (mostly copied from scripts found on the AutoHotkey Forum), I don't have enough of an understanding of how everything fits together to offer a precise explanation. (That may come at sometime in the future when I dedicate time to figuring out how ComObject works in AutoHotkey.) For now all I can say is it works and downloads a Web page to the variable version. I did add the Sleep command to pause the script since an Internet download can take a little time. If you find that you are getting no results for an IP that should work
The RegExMatch() function stores the first backreference (the matched data within the parentheses) in the first array variable Location1. If there were more backreference (sets of parentheses), then they would be stored in successive variables (Location2
This snippet of the AutoHotkey script loops through the list of IP addresses found and uses the GetLocation() function explained above to look up the server's geographic location for each. The IP and location are concatenated to the list (IPList) which is displayed in a MsgBox. If there are no IPs found," then ""No IPs Found!"" is displayed. CountIP— is used to decrease itself by 1 before starting the loop since the previous loop added one extra for the last non-existent IP. Other than these notes"
The first range [a-z0-9_\.-]+ accepts any lowercase letters, numbers
^[^\W]([a-z0-9_.-]+)[^.]@([^\W][\da-z.-]+)([^.]\.[a-z]{2,6}[^\W])$
[a-z0-9_\.-] Any lowercase letters, numbers
Using AutoHotkey commands and functions such as DllCall(), SendMessage
All rights are reserved, so if you think that you're going to make this e-book into a movie
The third command that Ellen put in the mix was the ComObjCreate() function for calling the default Windows text reading voice used in the quick little SayWhat app discussed in Chapter Thirty-two," ""An Easier Way to Get Your Computer to Talk to You."" ComObjCreate() is a function which accesses built in Windows features. Often"
Other than the stolen function (DisplaySetBrightness()) which controls the screen brightness, understanding the Gui
Next the DisplaySetBrightness() function is called using MySlider as input. This is the function which actually sets the brightness of the screen. You can review it in the full code listing above, but from my point of view
The ScreenDimmer.ahk script is a relatively simple app which uses one mysterious function copied from someone else's script. The app works great for people who don't have an easy way to dim their screen, but it was written primarily as an example of how to use the AutoHotkey Slider control in a Graphic User Interface (GUI). Now we will add a StatusBar GUI control displaying the current screen brightness value which will also act as a reset button for the dimmer. This demonstrates how to use the StatusBar GUI command which can be added to any AutoHotkey GUI window.
By placing the StatusBar function (SB_SetText()) into the Slider GUI subroutine (Dimmer), the value of the screen brightness (MySlider) is altered in the informational bar as the slider is moved. Note that quotes and the concatenation operator ( . ) are required when passing the function parameters.
The AddItem label (subroutine) is used to add the text in the variable NewItem to the ListView. This is done with the LV_Add() function after the Gui, Submit command is used to save the value in the text field:
It is actually that simple to add a new item. The LV_Add() function is one of four row functions in ListView for working with the display (LV_Add(), LV_Insert()
The LV_GetCount() function is one of the three functions (LV_GetCount(), LV_GetNext()
It would be great if there was a simple function which automatically indicated whether the row was checked or not. I didn't find one. Plus, we need a flag in the text file that tells us that the row was checked before adding it to the file. (In this script an asterisk will be added to be beginning of any line of text which was checked before saving.) There is a convoluted method consisting of three line of code found in the online documentation which determines the checkbox status:
Now whenever the UpdateFile() function runs, it places an asterisk in front of every checked row in the ToDoList.txt file. This gives us a key to use for adding checks to each row when the data is restored to a new ToDoList window while loading the script on subsequent use or reloading.
The LV_GetNext() function retrieves the selected row number. This number saved in SelectedRow is used in the LV_GetText(EditText, SelectedRow) function to save the row text to the variable EditText. Next the GuiControl command is used to place the row text (EditText) into the edit field below (Edit1). The same GuiControl command is used to change the name of the button to Update.
For this reason the ListView control includes the LV_ModifyCol() function for making changes to columns. Using the format LV_ModifyCol([ColumnNumber, Options
"Figure 2. By adding the ""AutoHdr"" option to the LV_ModifyCol() function", the designated column takes on the width of the title or data
The data save function, UpdateFile()
In this case the built-in AutoHotkey variable A_GuiEvent (G-Label Notifications) is used to detect when a column header is clicked inside the ListView box (A_GuiEvent = ColClick). The built-in variable A_EventInfo contains the column number (A_EventInfo = 10). The LV_ModifyCol() function is used to sort (descending) on Column 9 even though the Column 10 header has been clicked (LV_ModifyCol(9,SortDesc)).
I don't consider any of my scripts truly complete even though they may be functional. There is always more to add and if I use any my AutoHotkey apps regularly, I tend to keep making changes. You will likely do the same with your scripts.
The ListView function LV_GetCount() without parameters returns the number of rows in the ListView. If LV_GetCount() = 0 then LastTotalCal := 0. Otherwise, the value of the last Total Calories is retrieved with LV_GetText(LastTotalCal
Note that the various string functions (SubStr(), InStr()) can be used directly with the variables and the Loop
Previously I briefly discussed the possibility of using an INI file to hold the data since AutoHotkey has many file handling functions built into the INI commands. This would work for a simple example, but the limitations of INI files would prove impractical over the long run and would certainly limit the capabilities of the RecipeTree app. In addition
In the IF conditional above (If RowData2 = 0), a recipe level branch is added when RowData2 is zero. Otherwise (Else) an ingredient level branch is added.
"Suffice it to say A = ""B"" and B = ""A"" and when A is evaluated in an expression (%A%) we get the value of B. When B is evaluated in an expression (%B%) we get the value of A. As confusing as it may be", in practice this reciprocal variable technique makes it possible to tie temporary variables (ItemID) to the variable values in the data file.
"The next few lines are identical to those copied from the example at the AutoHotkey Web site until the If TV_GetParent(ItemID) = 0 conditional is encountered. The TV_GetParent() function is used to identify whether the branch is a recipe or an ingredient. A recipe will return the value 0 for TV_GetParent(ItemID) since it has no parent. In this case ParentCode is set to the recipe number (ParentCode := ""R"" . R) and ChildCode is set to 0", which designates a recipe branch when the data file is read. The recipe number is then incremented by 1 (R += 1) to be ready for when the next recipe branch is encountered and the ingredient code is set (or reset) to 1.
Looking over the TreeView functions, there are a few which will retrieve the information we need. The first is TV_GetSelection() which returns the ItemID of the selected branch to be moved. With this ItemID we can capture both the name of the branch with TV_GetText(OutputVariable
"The function for adding branches (TV_Add(""New Recipe",0
The TV_Modify() function is used to select the newly created branch in both the AddRecipe label and the AddIngredient label (TV_Modify(NewAdd," ""Select""))."
These lines could have been added to the UpdateFile() function, but the variable RecipeChange would need to be declared Global. Otherwise the function would treat it as a local variable and not update the value for use in the rest of the script.
One of my complaints about the ClipJump app was that it didn't have an easy way to start and stop it. I could have written a short script using the ClipJump command line function, but by adding it here
Each of these functions is handled by a hotkey combination in the QuikPlay app. However, if that same hotkey combination is used in a menu structure
The ListView IL_Create() function initializes the list name ImageListID which will contain the icons. This list is created with space for three images, but that is not fixed. If you add more images than specified
The IL_Add() function adds each image (which may be ICO, CUR
Note that all the menu items are either enabled or disabled as appropriate. The Start/Exit menu item name is changed as appropriate. The LV_Modify() function resets the image (green dot/red dot) as appropriate and the Active text (Yes/No). Then the app is either launched with the Run command or exited with the Process, Close command.
The same AddIcon() function is used a second time in the submenu level loop, again following the Menu
I think the problem you're seeing is that when you pulled the code from the function [found in the beginner's e-book], the last curly brace was associated with that function and is not needed for your purpose. Rather than adding the one in bold
Note: In the original function Width and Height were passed to the function from the main routine. The key to understanding how a script works is knowing what each piece does. While I could see where the variables X1, Y1
The heart of this app is the one line of code which makes the computer talk using the ComObjCreate() function. This function did not exist in AutoHotkey Basic, but was added in AutoHotkey_L (the current accepted version). There is important history involved in this and many other changes to AutoHotkey. But first
Of primary interest is the ComObjCreate line of code which appears just before the final Return marking the end of the ButtonTalk: subroutine. This function does not appear in any of the basic AutoHotkey documentation I have referenced in past chapters. That's because it was added in AutoHotkey_L version (now the current AutoHotkey download at the main AutoHotkey Web site). However, the documentation on the main site remains applicable to the basic version of AutoHotkey. The updated documentation can be found at ahkscript.org.
"The numerical label (0x53) is the actual designator for the standard Windows Message. The ""WM_HELP"" (must be in quotes) is the name of the function called and does not need to be the same as the Windows Message name. It can be any function name as long as the function exists in the script. However", using the same name as the Windows Message makes it easier to remember the purpose of the OnMessage function.
This function can appear anywhere in the script," but should not be inside the subroutine (i.e. between the beginning of the subroutine (label) and the RETURN at the end). All functions and subroutines in a script must be self contained. A function will begin with an open curly bracket ""{"" and end with a closed curly bracket ""}"" while a subroutine will end with a RETURN."
"The function WM_HELP() opens a message box titled ""Info!"" and displays the text ""You thought you'd see some info here!"" This function can be later modified to display information about the current Reminder app", give help
The key ingredient in this script is the OnMessage() function introduced to the Reminder app in the last chapter. OnMessage() uses Windows System Messages to monitor or enact various Windows functions. In this case, the message 0x200 (WM_MOUSEMOVE) is used to monitor the movement and position of the mouse. When the mouse is moved the function CheckControl() is called.
The function CheckControl called by OnMessage() can include up to four parameters (wParam, lParam
Using AutoHotkey commands and functions such as DllCall(), SendMessage
Some of the functions that make this row color changing technique work are fairly complex and I haven't taken the time to completely decipher them myself. They do involve AutoHotkey commands and functions such as DllCall(), SendMessage
The purpose of the ShowTodo: label is to reopen the window if it has either been minimized or closed. This is called from the right-click menu for the icon in the Notification Tray to open the hidden window. The two functions, LV_ColorInitiate() and SetColor()
The second function I added was one of my own making. After running the initiating function, a loop is needed to cycle through the rows and set the colors based upon whether each row was checked or not:
The key change I made to the original functions was in the WM_NOTIFY( p_w, p_l
The original function uses the LV_GetText(Index, Current_Line
This can get fairly complicated. I barely understand it myself. I will leave the functions below for others to peruse. The point is that even though I don't completely understand the available code, I can still use it for a practical application.
The #Include command is designed primarily to bring in libraries of function and subroutines. It often will not be effective in combining apps which are more involved—especially if there is any conflict between the scripts. It was easy to add the AutoCorrect app because it only consists of a series of hot text replacements. There are no involved conditionals (IF-ELSE), creation of GUIs (Graphic Controls)
ComObjCreate() function; Chapter Six, Chapter Seven
Function, built in
Function, built in
Function, built in
Functions; Chapter Five, Chapter Thirty
Functions, built in math; Chapter Seven
LV_Add() function, ListView; Chapter Nine
LV_GetCount() function, ListView; Chapter Nine
LV_Modify() function; Chapter Eleven, Chapter Fifteen
LV_ModifyCol() function; Chapter Ten, Chapter Twelve
SubStr() function; Chapter Nine, Chapter Sixteen
TV_Add() TreeView function; Chapter Seventeen, Chapter Twenty
Using AutoHotkey commands and functions such as DllCall(), SendMessage
All rights are reserved, so if you think that you're going to make this e-book into a movie
The third command that Ellen put in the mix was the ComObjCreate() function for calling the default Windows text reading voice used in the quick little SayWhat app discussed in Chapter Thirty-two," ""An Easier Way to Get Your Computer to Talk to You."" ComObjCreate() is a function which accesses built in Windows features. Often"
Other than the stolen function (DisplaySetBrightness()) which controls the screen brightness, understanding the Gui
Next the DisplaySetBrightness() function is called using MySlider as input. This is the function which actually sets the brightness of the screen. You can review it in the full code listing above, but from my point of view
The ScreenDimmer.ahk script is a relatively simple app which uses one mysterious function copied from someone else's script. The app works great for people who don't have an easy way to dim their screen, but it was written primarily as an example of how to use the AutoHotkey Slider control in a Graphic User Interface (GUI). Now we will add a StatusBar GUI control displaying the current screen brightness value which will also act as a reset button for the dimmer. This demonstrates how to use the StatusBar GUI command which can be added to any AutoHotkey GUI window.
By placing the StatusBar function (SB_SetText()) into the Slider GUI subroutine (Dimmer), the value of the screen brightness (MySlider) is altered in the informational bar as the slider is moved. Note that quotes and the concatenation operator ( . ) are required when passing the function parameters.
The AddItem label (subroutine) is used to add the text in the variable NewItem to the ListView. This is done with the LV_Add() function after the Gui, Submit command is used to save the value in the text field:
It is actually that simple to add a new item. The LV_Add() function is one of four row functions in ListView for working with the display (LV_Add(), LV_Insert()
The LV_GetCount() function is one of the three functions (LV_GetCount(), LV_GetNext()
It would be great if there was a simple function which automatically indicated whether the row was checked or not. I didn't find one. Plus, we need a flag in the text file that tells us that the row was checked before adding it to the file. (In this script an asterisk will be added to be beginning of any line of text which was checked before saving.) There is a convoluted method consisting of three line of code found in the online documentation which determines the checkbox status:
Now whenever the UpdateFile() function runs, it places an asterisk in front of every checked row in the ToDoList.txt file. This gives us a key to use for adding checks to each row when the data is restored to a new ToDoList window while loading the script on subsequent use or reloading.
The LV_GetNext() function retrieves the selected row number. This number saved in SelectedRow is used in the LV_GetText(EditText, SelectedRow) function to save the row text to the variable EditText. Next the GuiControl command is used to place the row text (EditText) into the edit field below (Edit1). The same GuiControl command is used to change the name of the button to Update.
For this reason the ListView control includes the LV_ModifyCol() function for making changes to columns. Using the format LV_ModifyCol([ColumnNumber, Options
"Figure 2. By adding the ""AutoHdr"" option to the LV_ModifyCol() function", the designated column takes on the width of the title or data
The data save function, UpdateFile()
In this case the built-in AutoHotkey variable A_GuiEvent (G-Label Notifications) is used to detect when a column header is clicked inside the ListView box (A_GuiEvent = ColClick). The built-in variable A_EventInfo contains the column number (A_EventInfo = 10). The LV_ModifyCol() function is used to sort (descending) on Column 9 even though the Column 10 header has been clicked (LV_ModifyCol(9,SortDesc)).
I don't consider any of my scripts truly complete even though they may be functional. There is always more to add and if I use any my AutoHotkey apps regularly, I tend to keep making changes. You will likely do the same with your scripts.
The ListView function LV_GetCount() without parameters returns the number of rows in the ListView. If LV_GetCount() = 0 then LastTotalCal := 0. Otherwise, the value of the last Total Calories is retrieved with LV_GetText(LastTotalCal
Note that the various string functions (SubStr(), InStr()) can be used directly with the variables and the Loop
Previously I briefly discussed the possibility of using an INI file to hold the data since AutoHotkey has many file handling functions built into the INI commands. This would work for a simple example, but the limitations of INI files would prove impractical over the long run and would certainly limit the capabilities of the RecipeTree app. In addition
In the IF conditional above (If RowData2 = 0), a recipe level branch is added when RowData2 is zero. Otherwise (Else) an ingredient level branch is added.
"Suffice it to say A = ""B"" and B = ""A"" and when A is evaluated in an expression (%A%) we get the value of B. When B is evaluated in an expression (%B%) we get the value of A. As confusing as it may be", in practice this reciprocal variable technique makes it possible to tie temporary variables (ItemID) to the variable values in the data file.
"The next few lines are identical to those copied from the example at the AutoHotkey Web site until the If TV_GetParent(ItemID) = 0 conditional is encountered. The TV_GetParent() function is used to identify whether the branch is a recipe or an ingredient. A recipe will return the value 0 for TV_GetParent(ItemID) since it has no parent. In this case ParentCode is set to the recipe number (ParentCode := ""R"" . R) and ChildCode is set to 0", which designates a recipe branch when the data file is read. The recipe number is then incremented by 1 (R += 1) to be ready for when the next recipe branch is encountered and the ingredient code is set (or reset) to 1.
Looking over the TreeView functions, there are a few which will retrieve the information we need. The first is TV_GetSelection() which returns the ItemID of the selected branch to be moved. With this ItemID we can capture both the name of the branch with TV_GetText(OutputVariable
"The function for adding branches (TV_Add(""New Recipe",0
The TV_Modify() function is used to select the newly created branch in both the AddRecipe label and the AddIngredient label (TV_Modify(NewAdd," ""Select""))."
These lines could have been added to the UpdateFile() function, but the variable RecipeChange would need to be declared Global. Otherwise the function would treat it as a local variable and not update the value for use in the rest of the script.
One of my complaints about the ClipJump app was that it didn't have an easy way to start and stop it. I could have written a short script using the ClipJump command line function, but by adding it here
Each of these functions is handled by a hotkey combination in the QuikPlay app. However, if that same hotkey combination is used in a menu structure
The ListView IL_Create() function initializes the list name ImageListID which will contain the icons. This list is created with space for three images, but that is not fixed. If you add more images than specified
The IL_Add() function adds each image (which may be ICO, CUR
Note that all the menu items are either enabled or disabled as appropriate. The Start/Exit menu item name is changed as appropriate. The LV_Modify() function resets the image (green dot/red dot) as appropriate and the Active text (Yes/No). Then the app is either launched with the Run command or exited with the Process, Close command.
The same AddIcon() function is used a second time in the submenu level loop, again following the Menu
I think the problem you're seeing is that when you pulled the code from the function [found in the beginner's e-book], the last curly brace was associated with that function and is not needed for your purpose. Rather than adding the one in bold
Note: In the original function Width and Height were passed to the function from the main routine. The key to understanding how a script works is knowing what each piece does. While I could see where the variables X1, Y1
The heart of this app is the one line of code which makes the computer talk using the ComObjCreate() function. This function did not exist in AutoHotkey Basic, but was added in AutoHotkey_L (the current accepted version). There is important history involved in this and many other changes to AutoHotkey. But first
Of primary interest is the ComObjCreate line of code which appears just before the final Return marking the end of the ButtonTalk: subroutine. This function does not appear in any of the basic AutoHotkey documentation I have referenced in past chapters. That's because it was added in AutoHotkey_L version (now the current AutoHotkey download at the main AutoHotkey Web site). However, the documentation on the main site remains applicable to the basic version of AutoHotkey. The updated documentation can be found at ahkscript.org.
"The numerical label (0x53) is the actual designator for the standard Windows Message. The ""WM_HELP"" (must be in quotes) is the name of the function called and does not need to be the same as the Windows Message name. It can be any function name as long as the function exists in the script. However", using the same name as the Windows Message makes it easier to remember the purpose of the OnMessage function.
This function can appear anywhere in the script," but should not be inside the subroutine (i.e. between the beginning of the subroutine (label) and the RETURN at the end). All functions and subroutines in a script must be self contained. A function will begin with an open curly bracket ""{"" and end with a closed curly bracket ""}"" while a subroutine will end with a RETURN."
"The function WM_HELP() opens a message box titled ""Info!"" and displays the text ""You thought you'd see some info here!"" This function can be later modified to display information about the current Reminder app", give help
The key ingredient in this script is the OnMessage() function introduced to the Reminder app in the last chapter. OnMessage() uses Windows System Messages to monitor or enact various Windows functions. In this case, the message 0x200 (WM_MOUSEMOVE) is used to monitor the movement and position of the mouse. When the mouse is moved the function CheckControl() is called.
The function CheckControl called by OnMessage() can include up to four parameters (wParam, lParam
Using AutoHotkey commands and functions such as DllCall(), SendMessage
Some of the functions that make this row color changing technique work are fairly complex and I haven't taken the time to completely decipher them myself. They do involve AutoHotkey commands and functions such as DllCall(), SendMessage
The purpose of the ShowTodo: label is to reopen the window if it has either been minimized or closed. This is called from the right-click menu for the icon in the Notification Tray to open the hidden window. The two functions, LV_ColorInitiate() and SetColor()
The second function I added was one of my own making. After running the initiating function, a loop is needed to cycle through the rows and set the colors based upon whether each row was checked or not:
The key change I made to the original functions was in the WM_NOTIFY( p_w, p_l
The original function uses the LV_GetText(Index, Current_Line
This can get fairly complicated. I barely understand it myself. I will leave the functions below for others to peruse. The point is that even though I don't completely understand the available code, I can still use it for a practical application.
The #Include command is designed primarily to bring in libraries of function and subroutines. It often will not be effective in combining apps which are more involved—especially if there is any conflict between the scripts. It was easy to add the AutoCorrect app because it only consists of a series of hot text replacements. There are no involved conditionals (IF-ELSE), creation of GUIs (Graphic Controls)
ComObjCreate() function; Chapter Six, Chapter Seven
Function, built in
Function, built in
Function, built in
Functions; Chapter Five, Chapter Thirty
Functions, built in math; Chapter Seven
LV_Add() function, ListView; Chapter Nine
LV_GetCount() function, ListView; Chapter Nine
LV_Modify() function; Chapter Eleven, Chapter Fifteen
LV_ModifyCol() function; Chapter Ten, Chapter Twelve
SubStr() function; Chapter Nine, Chapter Sixteen
TV_Add() TreeView function; Chapter Seventeen, Chapter Twenty
Igor Krunic 2003-2007 in the School of Economics. After graduating in 2007, he went on to study at The College of Tourism
Europe and Asia were at least as well connected as the United States. Nearly half of the citizens of the European Union are online, and even higher rates are found in the Scandinavian countries. There is a wide variance in Asian countries; for example
This allows you to give form elements a label. Clicking the label functions like clicking the element (a radio button, for example) itself. This improves Forms Accessibility.
Machine learning is actually a subset of Artificial intelligence. You probably have an intuitive understanding of what artificial intelligence is. You can think of a robot from a science fiction movie as your reference point. That is, artificial intelligence is a system that has cognitive abilities that would at the very least try to mimic the human mind
So you can see fro this that machine learning is actually a subset of artificial intelligence. Humans obviously learn from experience, and that is one of the goals of AI
Strong AI utilizes neural networks. A neural network is a set of interconnected nodes (aka functions). The interconnections are reminiscent of a nervous system, where individual nerve cells act as the nodes and they are interconnected with other nerve cells. A simple arrangement is to have input directly connected to the nodes which are connected to the output. This is generally the idea behind machine learning.
Now we start by making a window. A window is a range of data points that we use to examine subsets of the data. For example, if looking at age
Each node of the neural network is some function, so its basically one of the functions that we’ve seen before. In the beginning
The data is then run through the activation function for each node. The activation function creates a nonlinear estimate of the output, and then this compared to the correct answer to get error estimates. This gives you how far off the guessing that was generated by the assigned bias of each node was in getting to the correct answer. This information is then fed back into each node. Then the bias of each node is adjusted. The weights of the inputs can be adjust as well
Linear regression is a relatively simple mathematic technique that is used to determine the functional relationship between two variables. It’s simple enough that it’s often taught in algebra courses. Linear regression begins with an input variable that is considered the independent variable. The output from the model is the dependent variable. Using ordinary functional notation, this is expressed as
Linear regression can be used on any mathematical relationship of the form y = f(x), but researchers are interested in using the technique when it’s known that there is a relationship but it’s not known what the form of that relationship is. In this case
Not all graphs are as scattered as the one shown in the picture, in fact in most cases where linear regression is used you’re likely to see the data points clustered closely about the line used to fit the data. If the model didn’t have strong predictive power it wouldn’t see used so much. Once the machine has learned on a set of training data
A machine learning model can learn a decision tree by splitting the data into different subsets based on different attributes. This is done using a process called recursion, where a function calls itself based on revised inputs
Also remember that you can use a combination method. That is you can supply the model with the answers for a subset of the training data, and then use unsupervised learning for the rest of the data. This is one area that you should consider for further study after finishing this book. Learning which is the best approach is an important skill
"We could enclose in a few words the definition of Artificial Intelligence as the ""art of developing machines capable of performing functions that when performed by people require intelligence"" (Kurzweil", 1990)
Boolean: This type of data is used to perform logical operations, which are widely used in programming
1.5 Module Operator: its symbol is (%); its function is to return the rest of the division between the two operators. In the following example, we have that division 8 is made between 5 that is equal to 1 with 3 of rest
2.2 Operator Different than: its symbol is ( ! = ); its function is to determine if two values are different and if so, the result will be True. For example:
2.3 Operator Greater than: its symbol is ( > ); its function is to determine if the value on the left is greater than the value on the right and if so, the result it yields is True. For example:
2.4 Operator Less than: its symbol is ( < ); its function is to determine if the left value is less than the right one, and if so
not ( x < y ) will be true if x < y is false, that is
"Then we continue to declare a variable ""a""; this is directly related to the input function that will wait for any value entered by the user; in this case", should be 0 to break the infinite cycle
We define a function as a piece of code, which is reusable and is responsible for performing a certain task
Functions are considered a really important component for programming, mostly in the structured programming paradigm
List() function: This function will create a list, using and argument on specific
Range() function: This function will create a list of elements, determined by the programmer. This function is usually used in for cycles
A function will never be executed unless it is invoked, and this is nothing more than calling it by its name:
After defining our function, we can call it whenever we want to.
We call parameters to all those values that are going to be used in a function; they will work as inputs. Functions can receive one or more parameters and they just have to be written correctly and separated by a comma, in order to be invoked.
• Argument by position: When we send an argument to a function, this one receives it in an ordinated way
• Arguments by name: When we call a function, it should have identified on its arguments the value that each parameter will have according to its name.
You can see that we defined the number function; this will contain the parameters x and y. After we defined it, we added the sentence return and right after it a subtraction.
We define a lambda function as a special function, this one is part of the default functions of the Python programming language
The lambda function has a special syntax and that is the reason why we consider it an exclusive function since it allows us to create any kind of function on a really fast way, without having to save it.
You can easily see the use of the lambda function. We have a sum function that we equaled to lambda, who is going to have two parameters
The lambda function is used mostly to call functions that are needed in a program for a really short time, since
We define the filter() function as the one that has the task of filtering arguments, whether they are lists or iterators. As a result
This function will execute elements on a tuple or a list, in order to be able to return elements on the sequence
When we create a lambda type function, this will be focused on a single line of code
Despite being the lambda function better for saving lines of code, sometimes the def statement is easier to understand for those users that are getting started into programmers and even for those that already have some experience but not that much.
It is important when operating with a lambda function type, to assign a variable to it
After creating the function, we say that the variable a would be equal to the result of sum (1
A module is able to contain definitions of a function and even statements, which can be executable. With this
But this sounds a little repetitive since it seems that all computers are the same, but Python had already thought about this
File: This argument will provide us with the name of the file we are going to access through the open() function, this is what we will call the path of our file.
File.close: This attribute returns a Boolean. It returns as True, if the file on which we were working on is closed
The close() function is the one through which we delete any information that has been written or stored on the memory of our program; this way, we can proceed to close a file properly. Even though there are other ways for closing files
When we talk about the newline mode we refer to the mode that controls the functionalities of creating a new line, these can be: '\r'
In this example we can see that we have created our file by importing the workbook function, which belongs to the openpyxl module
In conclusion we can eliminate and solve the error," with ""try"
Another thing that is important for us to work with when it is time to handle any of the codings that we want to do in the Fish shell is the idea of the function. When we are in the Fish shell, the functions are going to be the lists of commands
There are going to be a lot of different types of functions that we are able to work in order to help us out. The first type will be a built-in function. And in the Fish shell, they are going to be able to help us create some of the functions that we would like to work with.
The first thing that we are going to work with on this one is some of the shortcuts that we are able to focus on. These shortcuts are going to be program functions like saving and exiting, and we are going to be able to look near the bottom of the screen to see some of these when we are in Nano. You will not need to use SHIFT when you want to work on the shortcuts
Inverse TCP Flag Scan: In this case, a hacker will transmit TCP probe packets with a TCP flag (FIN
The rigorous maintenance of all the hardware ensures that there will always be availability fo the services rendered by this hardware. Failing equipment should be promptly and adequately repaired to keep in order a properly functioning operating system environment that is devoid of any software conflicts. One aspect of maintenance that should also be carried out is updating all the necessary system components. It will also be to provide ample bandwidth for communications and to ensure a minimal occurrence of bottlenecks. Mitigation of hardware failures and their repercussions can be done using high-availability clusters, redundancy
Web security does this exactly. A functional definition of web security for us can be that it is a set of protocols and protection measures employed in the safeguarding of your website together with your web applications against hacking and against unsanctioned access by personnel who are unauthorized. The integral division of Information Security can protect web services, websites and web applications. This provides crucial security for anything that is carried out on the Internet.
There’s also a lot less bureaucracy in the world of indie games. Chances are you’ll have at most 2-3 people that are straight up above you. On the other hand, in AAA games you’ll find that there’s a seemingly never-ending chain of executives looking at the back of your head.
Let’s take a look. Ship#accelerate takes what we’ve all hated in high school and uses it for game development. The offsetx/y functions are almost the same as what you could use sine or cosine for. Let’s take an example. If we had something that moves 50 pixels on an angle of 20 degrees, then the distance it moves would be offset_x(50
All of these factors impact heavily on how well you can do as a game developer. If you’ve got a small team that plans to work for 2-3 hours a day that are just starting out- don’t start with a complex, 100-hour playtime RPG. Instead
As for the RPG Maker platform's basic functions, I’ll trust that you’ll learn those by yourself in case you decide to use it for your game development.
You can create new classes to add brand new functions and windows to the game logic within. Alternatively, we can modify the classes already there to alter the flow of in-game portions.
Almost all the functions of RPG Maker are actually chunks of Ruby code. It goes without saying that there are absolutely tons of this code. Thankfully, it’s rather well organized.
The Casual: The casual gamer doesn’t care that much about intense detail and is more fond of getting stronger than they are of being challenged. If there’s a fight that takes them 5-10 tries, they’ll likely not come back to the game again. If you’re targeting this audience
Real-time RPGs (also known as action RPGs) are the second subset of the role-playing game we’ll be taking a close look at. Some turn-based RPG design elements still stay here, so we will not be repeating them.
● Toolbar: The toolbar contains a variety of functions ranging from Advance Frame to something much simpler, like Rotate. The most important thing here is that simply clicking “Play” lets you start playing your game immediately.
While introducing an age calculation function, an INI file is used as a database of grandchildren. The formatting and placement of controls in a GUI object is explained.
“A function for dealing with the complications of calculating years, months and days since birth.”
All rights are reserved, so if you think that you're going to make this e-book into a movie
There are a number of AutoHotkey apps offered in this book to help you understand how to write AutoHotkey scripts. Each has specific learning points giving a more in-depth understanding of how AutoHotkey works and what it can do for you. Feel free to modify these apps to suit your own purposes. Although they are all functional on some level, a couple of them (Reminder app and Grandkids app) are not truly completed. Further work on those apps will continue in the coming months which will appear in my weekly AutoHotkey column and in another more advanced book sometime in the future. (In particular
The third line uses the Sleep command to briefly pause the routine (1/10 of a second) to ensure the copy command is completed and stored to the Clipboard before continuing. Hint: If you find that you're getting inconsistent results from some of your scripts, it could be due to the script outrunning itself. Often adding a short pause (Sleep) will resolve the problem.
This is about as simple as AutoHotkey gets. I've added this function to my regular AHK file. It is amazingly useful. For example, I work with a Web program I wrote specifically for producing e-books. When creating the index for this book I instantly made two windows on top with CTRL++F8 (the chapter editing window and the index editing window)
The work is done in the fourth line of code using the SubStr function. The SubStr function is used to parse a text string—in this case, the contents of the Clipboard. The first SubStr function (SubStr(Clipboard
"By reversing the order of the two functions and adding them together with the concatenate operator (the period ""."" between the two functions)", the Clipboard is replaced with the reverse order of the two characters originally highlighted.
The first step is to break the end result into basic functional units. In this case, the first result we want is to make a dropdown menu appear on the screen. Next we want a selection from the dropdown menu to initiate an appropriate action. Lastly we want build the corresponding action into the script. The steps I conceived were as follows:
After I initially entered and tested what I considered the logical formulas for the windows (X2 = W1/2 and Y2 = H1/2) which give me the midway points and half widths and heights, I discovered that any windows extending to the bottom of the screen were partially hidden behind the Taskbar—not ideal. I needed to know the height of the Taskbar to subtract from the screen height. I added the following line of code:
Both Items A and B in the code (see Figure 6) are essentially the same code used in the example from last chapter, except in this case the hotkey combination is ^#!B (CTRL++ALT+B). The text in the active window or field is selected (Send
The first line establishes the hotkey combination CTRL++J (^#J before the double colon ::). This can be any combination that works for you without interfering with other hotkeys in Windows and other programs. I use more than one function type key, such as CTRL
The second level of functionality in QuickLinks consists of the shortcuts located within the category folders. These shortcuts can be for anything acceptable to Windows File Explorer, including programs
The LOOP command uses the standard curly brackets ({}) to enclose the code executed each time the loop is incremented to the next file or folder. In this case the primary function of the loop is to create a menu item for each category folder. The first step in creating a menu is to ADD the menu items. In this case, a menu item named with the folder name (the value of A_LoopFileName
Another complication for adding more layers is the handling of the increased number of LOOP commands within loops within loops. The best option might be to put the internal loops into a function which calls itself as it drills down through the folder tree structure. If this is done with a function, the array variables would need to be declared global as they are created at each level. Otherwise the data would be lost in local variables.
OnMessage() command function, Chapter Thirty-two
The reminder script is basic in its function. Press the hotkey combination CTRL++R (R for reminder) and a setup window pops up. It uses both the GUI (Graphic User Interface) command for picking a time and adding a message, then sets a timer for a pop-up to appear at a later time in the same day (see Figure 1).
Each chapter I'm adding a little more to the Reminder app. The original Reminder script was fairly short (although longer than it needed to be). It's now becoming fairly involved. This time more important functionality is added, plus more error correction.
"The first three lines of code I copied unaltered from an example. The AutoHotkey OnMessage command is used to call the standard Windows message WM_MOUSEMOVE found in the List of Windows Messages. The WM_MOUSEMOVE function uses the data setup hCursor and IDC_HAND to make a DllCall—which is a little cryptic. The only value that I added was the ""Static2"" ( if (ctrl == ""Static2"")) which designates the Speak control on the GUI window. (I found that value with the Window Spy utility", Chapter Ten
While introducing an age calculation function, an INI file is used as a database of grandchildren. The formatting and placement of controls in a GUI object is explained.
A function for dealing with the complications of calculating years, months and days since birth.
Function, HowOld()
Functions described, what are they?
Remainder function, Mod()
SubStr function,Chapter Thirty-four
It took me a little while to come up with the HowOld() function for calculating age. I had a number of false starts. I couldn't find a good AutoHotkey age calculation function on the Web, but I think this one does the job. If you find any errors
“A function for dealing with the complications of calculating years, months and days since birth.”
In the last chapter I introduced the GrandKids app which used AutoHotkey to calculate the age of grandchildren (or anyone else). All that's needed is the date of birth which is stored in an INI file. It uses a function I wrote for making the calculations. I must admit that it took me some time and a number of mental gymnastics to finally get an age calculating function that works. (If you find a problem with it, please let me know.) It is much shorter than most of the other age functions I found
An AutoHotkey Function is similar to a subroutine or a label which is a self-contained set of code. Functions are visually distinguished by the set of parentheses that immediately follow the function name (FunctionName() or FunctionName(Para1,Para2)). Functions differ from subroutines in that you may pass data to a function via parameters (the items between the parentheses) or pass no data at all
"where Birthday is just that and A_now is the current date. Function can also be called by setting a variable to a returned value (Variable =: Function()). The command ""Return x"" is used to return a value from the function. (This is not the same ""Return"" used at the end of an AutoHotkey script", subroutine
The age calculation function in the GrandKids AutoHotkey app is called HowOld(FromDay,ToDay). The name of the function is HowOld using the parameters FromDay and ToDay. The FromDay (from day) would be the birthday (or any other date) and ToDay (to day) equates to the current date in the GrandKids app
You will note in the code below that the built-in AutoHotkey Substr() function is used a number of times to parse (break apart the components of) dates. The Substr() function is one of the most powerful and useful string (text) manipulation functions. In the case of the normal date/time format (yyyymmddhhmmss) the SubStr() function can be used to extract the year, month and date.
"This conditional uses a couple of tricks to determine the matching date. First the AutoHotkey SubStr() function is used with the birthday (FromDay) to determine if it is February 29 (""0229""). No fancy calculations are needed here because it either is or isn't. (If someone enters a date which doesn't exist the function will still run although it will not calculate the days.) The second part of the conditional (Mod(SubStr(ToDay",1
It turns out in age calculation that the only day that matters when you are born on February 29 is February 28 of non-leap years. This is because on those years you turn one year older on February 28—the last day of the month. On March 1 you will be one year and one day older. For purposes of this function, if this is a non-leap year
Based upon the discussion of the SubStr() function and date/time strings, you can see that the year
I originally constructed a method for padding the value of the newly calculated month because at the time I hadn't found a built-in AutoHotkey function for padding—which is common in other programming languages. I did this by adding 100 to the new month, then extracting the desired text:
This uses a variation of the SubStr() function to pad any string with any character or blank spaces. The function concatenates (combines) two strings: a string of the padding character," ""0"
I opted for a solution that included fixing the length of each text field by padding the field on the right with blank spaces. Then I only need one tab (`t) character. To do that I first formatted Birthday (FormatTime) for display. Then I combined the three names and added ample blank spaces to the end—saving the result in the variable RowSpace. I next used the SubStr() function to shorten each name string line to the same length, SubStr(RowSpace
I then added blank spaces to the end of the formatted Birthday and saved it in the variable BDSpace. I next used the SubStr() function to shorten each birthday text line to the same length, SubStr(BDSpace
Function, HowOld()
Functions described, what are they?
OnMessage() command function, Chapter Thirty-two
Remainder function, Mod()
SubStr function, Chapter Five
switch statement evaluates its expression, then executes all statements that follow the matching case label. The body of a switch statement is known as a switch block. A statement in the switch block can be labelled with one or more case or default labels.
The expression in the while statement must evaluates to a Boolean value, otherwise compiler throws an error. While statement first evaluates the expression
p=2*ar[]=2*1 ,c=0
p=3*ar[]=3*2 ,c=0
p=4*ar[]=4*6=24 ,c=2
//member function definition, outside of the class
//member function definition, outside of the class
It is useful for beginners and for testing small pieces of code to function in interactive mode, as we can test them immediately.
The operator Bitwise NOT (~) is used to invert all the bits, i.e. it returns the number's complement.
An empty string means False as a Boolean value, while True as a Boolean value is a non-empty string.
Python also includes the functionality to test conditional statements using the conditional operator, much like other programming languages.
We'll create the function msg() in the example below . In JavaScript, you must write function in function name to construct a function. To call a method
Outside of the function, a variable is declared.
Operators are symbols in JavaScript that are used to execute operations on operands. 3+2 equals 5 in plain terms. The operands here are 3 and 2, and the operator is +.
If the condition is true or false, the if statement is used in JavaScript to execute the code.
If either condition is true or false, the if else statement is used.
The definition of function literals, which is another way to describe functions
The syntax for a function literal is similar to that of a function statement, except that it is used as an expression rather than a statement
In Python the keywords method and function have a different meaning. While functions are a set of statements that accomplish a task when called, a method refers to a function declared within a class
Lists include built-in functions that make it possible, amongst other things to:
When we deal with combining true or false statements, we are effectively applying what is called Boolean logic. Boolean logic deals with Boolean variables that have two values 1 and 0 (or true and false). By evaluating conditions
Three functions are declared: accelerate, turn_right and calculate_distance.
The function accelerate is called; because this object is an instance of the class Vehicle, the function accelerate that is a member of the class Vehicle will be called; as a result
The function accelerate is called; because the object v2 is an instance of the class MotoredVehicle, and because this class has its own function accelerate
While functions include a series of statements to be executed; methods are functions defined as part of a class. This section will focus on functions; however, most of the information will also be applicable to methods.
Functions can be compared to a friend or a colleague to whom you gently ask to perform a task, based on specific instructions
Functions are very useful because once the code for a method has been created, it can be called several times without the need to rewrite the same code over and over again. Also
A function can then be called using the () operator, as follows:
Now that you know a bit more about functions, we will see how the definition of functions can be refined to include a return type
Each parameter (referred to as a and b) should be integers. This means that passing parameters that are not integers (e.g., float or string) will result in an error.
Now that we have seen how to specify the type of the parameters passed to a function, let’s see how we can specify default values; in Python
This function takes two parameters, each of them are integers.
We create a variable called sum1; we then call the function calculate_sum, passing the values 1 and 2
We create a variable called sum2; we then call the function calculate_sum, passing no parameters (i.e.
Local variables are declared within a function and are to be used only within this function, hence the term local
The variable the_name is declared outside of any function, and it is therefore global and accessible throughout the script.
Note that while you can use a global variale inside a function; it is necessary to delare it inside the function with the keyword global if you intend to modify this global variable inside the function, as illustrated in the next code snippet:
One more thing: lets’ imagine that the locale function uses a variable for which the name is the same as one of the global variables; in that case, by default
After calling the function function1, we also print the new value of the global variable the_name.
After calling the function function1, we also print the new value of the global variable the_name.
Name functions using Snake Casing: In Snake casing the words included in a name are using lower-case and are separated by an underscore: for example, my_function.
When you create functions or blocks of instructions, the code within needs to be indented.
• All variables are written consistently (e.g., spelling and case). The name of each variable is case-sensitive; this means that if you declare a variable my_variable but then refer to it as my_Variable later on in the code
• When calling a function, the exact name of this function (i.e.
Meaning: you need to add a colon (possibly after the definition of a function or before a block of instructions (e.g., conditional statement).
So what is a function? A function is usually employed to perform a task outside the main body of the game. I usually compare functions to a friend or a colleague to whom you gently ask to perform a task for you. In many cases you will call them, and they will agree to perform the task. Sometimes they will need additional information to perform the task (e.g.
In Python a function declaration usually includes the parameters passed to this function. You can also specify the type of the parameters, and the type of data returned by the function
The indentation that you use for the code within a function (i.e., the number of spaces)
At this stage we have just defined the function my_first_function; in other words, we have specified what the function should do when it has been called. So once the function has been defined
Note that the function needs to be declared before it is called. So the location of the function in the script (i.e., at the end or the start) does matter
Now that you have written your first function, please do the following:
Note that we could have created a function that takes many other parameters. For example, we could have created a function that takes the first and last name as parameters
def my_third_function (f_name, l_name):
This type of function will, in addition to possibly taking parameters and processing this information
The function calculate_age is called once; it returns the calculated age, and this value is returned and saved in the variable called my_age.
Now that you have written the code for your new function, please do the following:
We then call the member functions display_color, display_name
When defining a function with several parameters, you can break down the line into several lines as follows.
So at this stage we have defined the key variables for our game; what we need to do now is to define a function that will initialize the game (e.g., to define the range of the random number
We use the keyword global to specify that the variables that we are declaring refer to the global variables defined earlier; in other word any change to these variables within the function will be mirrored to the global variables. Or in other words, using these variables within the function is the same as using the global variables.
Within the function, we declare a loop that will loop indefinitely (the condition is always True).
That’s it; so we have effectively created a function called init_game that defined the word to be guessed along with the string to be displayed to the user (i.e., initially question marks)
In the previous code we declare a function called display_letters that prints the content of the string variable string_to_display, which will initially made of question marks
Now that the function has been created, we will be focusing on processing the players input when they enter a key and try to guess one of the letters that are part of the word to guess.
The next step will eb to create function that will gather the user’s input, check if it the key pressed is one of the letters from the word to guess
We also replace the corresponding question mark in the string displayed to the user by the actual letter; this is done by calling a function called replace_char_at_index, that we yet must define.
So now that we have created the function that processes the entries from the player, we just need to create two additional functions: game_loop and replace_char_at_index.
This function takes three parameters: string_to_work_with, new_character and index.
Now that we have defined the function and the global variables that will be used within, we can start to read the word file and extract words from it.
Now that we have created this function, we just need to replace the previous code by a call to this function:
The previous code is essentially a copy paste of the code that we had already created to generate an array of words to be guessed; the only difference is that now this code is part of a function, so it can be called
The last parameter uses the built-in function pygame.Rect to draw a rectangle based on the variables that we have defined earlier (i.e., the coordinates of the top left corner
The built-in function flip updates the drawing surface so that the changes that we have made (i.e., drawing the rectangle) are applied and visible to the user.
We use the built-in function pygame.draw.rect to draw each square (i.e., rectangle).
Please add the following function to the script, after the code that you have just entered.
So that we can test this function, please add the following code to the script (new code in bold):
We define a function called main_window that will be in charge of displaying the different elements of the game (e.g., the player
So now that we have defined functions that detect the keys pressed by the player and that display the player character, we can create the main loop of the game where we will call both of these functions to be able to move and display the character based on the keys pressed.
We define a function called main, that will be the main loop of our game
Now that the function change_level has been modified, we can start to implement our timer and to also modify previous code that using a call to this function without parameter.
Please add the following code at the end of the function display_main_window (new code in bold), before its last line:
Within this function, we loop indefinitely.
Now that the call to the function animation has been processed, the last thing we need to do is to display the frame for the animation
You can detect keystrokes by using the function pygame.key.get_pressed(). For example, the following code detects when the key E is pressed.
‘a and b’ returns true if both a, b are true. Else false.
Boolean operators and, or are called short circuit operators
def functionName(argument1, argument2 …. argumentN):
By using ‘len’ function, you can get the length of the list.
Set is an unordered collection of elements with no duplicates. We can perform union, intersection
>>> evenNumbers . issubset({ 2 , 4 })
>>> evenNumbers . issubset({ 2 , 4 
union(other, ...)
intersection(other, ...)
If A and B are two sets, then Simmetric difference between A and B is A^B = (A-B) union (B-A)
intersection_update(other, ...)
>>> numbers . intersection_update(oddNumbers, powersOf2)
'open' function opens file in specific mode and return corresponding file object. Throws OSError, if it is unable to open a file.
__init__ is a special function called constructor used to initialize objects. In Employee class, __init__ method is used to initialize id
‘global’ keyword is used to create/change a global variables (You can declare functions, classes etc. also) from local context.
When a variable is handed to a function, ownership is transferred to the called function's variable. Passing value has the same semantics as assigning a value to a variable.
The ownership of the 'ch' variable is handed to the variable 'c' through the moves copy() function, which binds with the value 'a.'
When you return values from a function, you're also transferring ownership. Consider the following:
The gives ownership() function returns the value of y, which in this case is 100
A reference is an address that is supplied as an argument to a function. Borrowing is the same as borrowing something and returning it after we are finished with it. Borrowing and references are mutually exclusive, meaning that when a reference is relinquished
The calculate length() function has a reference to string str as a parameter in the example above, but it does not take ownership of it.
Variable's' is valid in the aforementioned scenario until the control does not return to the main() function. When the variables are supplied to the function as a reference rather than actual values, we don't need to return the values to reclaim ownership.
To make an API more broad and useful without losing its functionality, we give the string slice as an argument to the method instead of the reference.
Within the function body, create an instance:
When the function's parameters and fields have the same name, use the Field Init Shorthand.
To invoke the area() function, we utilise the method syntax. An instance is followed by the dot operator
A function can also be defined on a specific instance. Let's define the function that takes a Computer language instance, which looks like this:
It is useful for beginners and for testing small pieces of code to function in interactive mode, as we can test them immediately.
The operator Bitwise NOT (~) is used to invert all the bits, i.e. it returns the number's complement.
An empty string means False as a Boolean value, while True as a Boolean value is a non-empty string.
Python also includes the functionality to test conditional statements using the conditional operator, much like other programming languages.
derivatives: knowledge (knbw + -ledge), width (wide +-th)
instead of a noun. As a pronoun always has the same syntactical functions as a noun some grammarians say it is not a distinct part of speech. But as it often has a marked distinctiveness of form and usually shows peculiarities of usage it is quite clear that it is a distinct part of speech. Although it is never the name of a person or thing, as is a noun
AU who have studied this question have come to the same conclusion. Doth any (now anyone) here know me? (Shakespeare, King Lear
tives of the personal pronouns. They gradually developed into possessive adjectives and pronouns. The present difference of form for the two functions is the result of a long development described in Syntax, 57 5 a. The pronominal forms here are peculiar. Elsewhere the common way to make a pronominal form is to add one to the adjective form. In England one is actually coming into use also here: ‘Leaning back in his one of the two Chippendale armchairs in which they sat’ (Juliana Ewing
thine developed out of the genitive of the personal pronouns I and thou. At first both forms were used as possessive adjectives and possessive pronouns. In the twelfth century they began in adjective function to lose their -n before consonants: ‘min arm,’ but ‘mi fot’ (foot). Gradually my
participles of verbs in adjective function are all descriptive ad­ jectives, since they indicate either an active or passive state: run­ ning water
derivative adjectives, i.e. adjectives formed by adding to a noun
noun before an intensifying adjective sometimes drops out so that the intensifying adjective must assume the function of the pronoun in addition to its own, thus becoming an emphatic pronoun. This construction is most common in elliptical sentences: ‘Did you ever know a woman to pardon another for being handsomer than her-s&fV (= she herself was). It sometimes serves as the predicate of a sentence: ‘ You are not yourself today.’ A feeling of modesty often suggests its use instead of the pompous I mys&f
they always perform the function of a simple adverb in the propo­ sition in which they stand. No formal connective links this in­ dependent proposition to the preceding independent proposition. The two propositions lie side by side without a formal binding tie. This is a form of parataxis, described in 18 (5th par.)
The preposition does not function singly, but forms a gram­
a function to perform in the sentence. In ‘I live in this house’ the prepositional phrase in this house modifies the verb live, hence it performs the function of an adverb.
sitional unit performs the functions of (1) an adverb; (2) a noun in the objective relation, object of a verb or an adjective or parti­ ciple; (3) an adjective in the predicative or the attributive relation.
Functions, forms
Function, form
speech than a verb. It may serve also as the object of a preposi­ tion or an adjective. The object function is indicated by placing the noun or the pronoun after the verb, preposition
4. Functions, Forms
grammatical function but do not always have exactly the same meaning. When there are two forms for the same thing there is a tendency for them to become differentiated. Today the s-genitive has become associated with life and cannot usually be used with nouns that denote lifeless things. Thus today we say ‘ a boy’s leg ’ but not ‘a table’s leg.’ For things we usually employ the ©/-geni­ tive: ‘the leg of the table’ The s-genitive is used with names of things only when in lively language they are thought of as having life: ‘the ocean’s roar,’ ‘Duty’s call
5. Function, Form
with its own grammatical function, as in the case of each other
relative pronoun performs a double function: It is a pronoun in the clause in which it stands and is also a connective joining the clause in which it stands to the governing noun. As a pronoun it has the case required by its function in the relative clause, i.e. is subject
adjective and pronominal function, while today it is uninflected in adjective function and has the one-form in pronominal function
meaning or function. The usual comparative and superlative of old are older, oldest
to say?’ In adverbial function farther and further are used indis­ criminately: ‘You may go farther (or further) and fare worse.’ There is, however
Functions. The different degrees have different forms when used substantively (43 1), the form with one being for the most part required in the positive but often felt as unnecessary in the com­ parative and superlative. The comparative and the superlative of descriptive adjectives frequently do not need one
The function of the subjunctive is to represent something, not
optative and the potential subjunctive in a and b above, it will become apparent that the old simple form does not occur so often as the newer form with a modal auxiliary. The latter by virtue of its finer shades of meaning has gained the ascendancy in both literary and colloquial language. The old simple form
function, i.e. a spreading of Middle English singular -th to the plural
portant notes a and b under 1 serve as the basis of the following detailed description of the Middle English inflection of weak verbs. Middle English inflection here rests upon Old English inflection, and Modern English inflection with its numerous irregularities cannot be understood as a system without a careful study of Middle English inflection. If the Middle English categories given below be mastered
1 Old strong form; still used in dialect. * In verbal function more common than hid, in adjective function the
In adjective function, however
was often used also as a past participle alongside of spoken. In England bespoke is in adjective function still widely used as a past participle: ‘bespoke boots,’ i.e. made to order in contrast to ready-made.
drunken is employed in adjective function, usually however only before a noun in the attributive relation: 'Before me reeled a drunken sailor.’ In older English
position immediately before a group of words indicates its function: ‘He came early, but soon went away.’ ‘Wait until I come.’
The functions of conjunctions are described in 18. Pure conjunctions are regularly uninflected, but there are cer­
tain inflected pronouns which perform the function not only of pronouns but also of conjunctions (7 IV a, 6
6*17147, 63
in compounds and derivatives, association
152* 47 2 b, 4
function and forms of, 27 3 form
50 29-31 2 c, 3 (par. 6)
functions of, 27 1 -o
adjective function of, 8
noun(s)) functions of, 51
derivative, 13 a
Data were collected for the purpose of documenting and exploring students’ socio-emotional experiences in the COVID-19-induced emergency transition to OL. The first paper resulting from this project focuses on the types and functions of students’ interpersonal interactions in synchronous online lessons (Alger & Eyckmans, 2022). The aim of the present chapter is to examine students’ process of role adjustment from ‘learner’ to ‘online learner’ in an EOL context.
Almost all students (36/40) mentioned an adjustment to ‘self’ learning attributes and strategies, such as self-regulation
My university used Moodle to provide the content and to conduct online exams as well as using assignments. The exam or quiz function of this platform enables us to create quizzes with traditional item formats such as multiple choice and fill in the blanks. Using the assignment function, the students could upload their assignments in word processing or pdf formats.
4 Conclusions, Limitations
The rationale of this study is framed within the research projects UJI-B2020-09 and UJI-B2018-59 carried out at Universitat Jaume I, and the research project GV/2021/035 at Universitat Politècnica de València. It has been supported by the projects 46163 and 46093 carried out at Universitat Jaume I.
Exploring the relationship between Intermediate and Advanced level speaking functions of the ACTFL Guidelines (ACTFL, 2012) and TTRPG gameplay involves two steps: (1) a theoretical comparison of the essential ACTFL functions at these target levels with the common tasks in TTRPGs and (2) a practical investigation of actual language use during sample TTRPG gameplay by language learners.
The theoretical comparison was achieved by listing all of the ACTFL speaking functions for the relevant proficiency levels and attempting to associate each with a common task from TTRPG gameplay, where appropriate. The ACTFL speaking functions are found in the ACTFL Guidelines (ACTFL
The goal of this study was to determine whether participants in TTRPGs employed ACTFL Intermediate Level and Advanced Level speaking functions during gameplay. The investigation revealed that, both theoretically and practically
The pedagogical proposal was implemented during the first term of 2020/2021 in a group of 57 students, who were mostly first-year students. In addition to their interest in the field of video games
The present chapter outlines how the phonetic software Praat can be used to improve the pronunciation of German learners of English in an online-based environment and by focusing on one specific case. Bringing linguistic aspects into the virtual language classroom represents a key aspect in the current approach and functions as the starting point of the practical learning scenario described here. Further, a well-balanced mix of guided
Conversely, the graph with the STT application accuracy scores reports a more significant gap in the evaluation of different speaking tasks of participants with a lower English language proficiency level. In particular
Daffodil bulbs require well-drained soil and a sunny planting location. They should be planted in holes that are 3-6 inches deep and there should be 2-4 inches between bulbs. The bulb should be placed in the hole, pointed side up
(5) President Roosevelt established year-round Daylight Saving Time (also called War Time) from 1942-1945. However, after this period
